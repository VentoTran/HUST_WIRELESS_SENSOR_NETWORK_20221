
slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005488  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08005598  08005598  00015598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005668  08005668  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005668  08005668  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005668  08005668  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005668  08005668  00015668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800566c  0800566c  0001566c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005670  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a60  20000010  08005680  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a70  08005680  00021a70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e96  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003440  00000000  00000000  00033ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  00037310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c8  00000000  00000000  00038550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000039ac  00000000  00000000  00039618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001400a  00000000  00000000  0003cfc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009120d  00000000  00000000  00050fce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e21db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b28  00000000  00000000  000e222c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08005580 	.word	0x08005580

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08005580 	.word	0x08005580

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_frsub>:
 80002b8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__addsf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_fsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c4 <__addsf3>:
 80002c4:	0042      	lsls	r2, r0, #1
 80002c6:	bf1f      	itttt	ne
 80002c8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002cc:	ea92 0f03 	teqne	r2, r3
 80002d0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d8:	d06a      	beq.n	80003b0 <__addsf3+0xec>
 80002da:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002de:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002e2:	bfc1      	itttt	gt
 80002e4:	18d2      	addgt	r2, r2, r3
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	4048      	eorgt	r0, r1
 80002ea:	4041      	eorgt	r1, r0
 80002ec:	bfb8      	it	lt
 80002ee:	425b      	neglt	r3, r3
 80002f0:	2b19      	cmp	r3, #25
 80002f2:	bf88      	it	hi
 80002f4:	4770      	bxhi	lr
 80002f6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000302:	bf18      	it	ne
 8000304:	4240      	negne	r0, r0
 8000306:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800030a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000312:	bf18      	it	ne
 8000314:	4249      	negne	r1, r1
 8000316:	ea92 0f03 	teq	r2, r3
 800031a:	d03f      	beq.n	800039c <__addsf3+0xd8>
 800031c:	f1a2 0201 	sub.w	r2, r2, #1
 8000320:	fa41 fc03 	asr.w	ip, r1, r3
 8000324:	eb10 000c 	adds.w	r0, r0, ip
 8000328:	f1c3 0320 	rsb	r3, r3, #32
 800032c:	fa01 f103 	lsl.w	r1, r1, r3
 8000330:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000334:	d502      	bpl.n	800033c <__addsf3+0x78>
 8000336:	4249      	negs	r1, r1
 8000338:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800033c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000340:	d313      	bcc.n	800036a <__addsf3+0xa6>
 8000342:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000346:	d306      	bcc.n	8000356 <__addsf3+0x92>
 8000348:	0840      	lsrs	r0, r0, #1
 800034a:	ea4f 0131 	mov.w	r1, r1, rrx
 800034e:	f102 0201 	add.w	r2, r2, #1
 8000352:	2afe      	cmp	r2, #254	; 0xfe
 8000354:	d251      	bcs.n	80003fa <__addsf3+0x136>
 8000356:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800035a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035e:	bf08      	it	eq
 8000360:	f020 0001 	biceq.w	r0, r0, #1
 8000364:	ea40 0003 	orr.w	r0, r0, r3
 8000368:	4770      	bx	lr
 800036a:	0049      	lsls	r1, r1, #1
 800036c:	eb40 0000 	adc.w	r0, r0, r0
 8000370:	3a01      	subs	r2, #1
 8000372:	bf28      	it	cs
 8000374:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000378:	d2ed      	bcs.n	8000356 <__addsf3+0x92>
 800037a:	fab0 fc80 	clz	ip, r0
 800037e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000382:	ebb2 020c 	subs.w	r2, r2, ip
 8000386:	fa00 f00c 	lsl.w	r0, r0, ip
 800038a:	bfaa      	itet	ge
 800038c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000390:	4252      	neglt	r2, r2
 8000392:	4318      	orrge	r0, r3
 8000394:	bfbc      	itt	lt
 8000396:	40d0      	lsrlt	r0, r2
 8000398:	4318      	orrlt	r0, r3
 800039a:	4770      	bx	lr
 800039c:	f092 0f00 	teq	r2, #0
 80003a0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a4:	bf06      	itte	eq
 80003a6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003aa:	3201      	addeq	r2, #1
 80003ac:	3b01      	subne	r3, #1
 80003ae:	e7b5      	b.n	800031c <__addsf3+0x58>
 80003b0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b8:	bf18      	it	ne
 80003ba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003be:	d021      	beq.n	8000404 <__addsf3+0x140>
 80003c0:	ea92 0f03 	teq	r2, r3
 80003c4:	d004      	beq.n	80003d0 <__addsf3+0x10c>
 80003c6:	f092 0f00 	teq	r2, #0
 80003ca:	bf08      	it	eq
 80003cc:	4608      	moveq	r0, r1
 80003ce:	4770      	bx	lr
 80003d0:	ea90 0f01 	teq	r0, r1
 80003d4:	bf1c      	itt	ne
 80003d6:	2000      	movne	r0, #0
 80003d8:	4770      	bxne	lr
 80003da:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003de:	d104      	bne.n	80003ea <__addsf3+0x126>
 80003e0:	0040      	lsls	r0, r0, #1
 80003e2:	bf28      	it	cs
 80003e4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e8:	4770      	bx	lr
 80003ea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ee:	bf3c      	itt	cc
 80003f0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f4:	4770      	bxcc	lr
 80003f6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003fa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000402:	4770      	bx	lr
 8000404:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000408:	bf16      	itet	ne
 800040a:	4608      	movne	r0, r1
 800040c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000410:	4601      	movne	r1, r0
 8000412:	0242      	lsls	r2, r0, #9
 8000414:	bf06      	itte	eq
 8000416:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800041a:	ea90 0f01 	teqeq	r0, r1
 800041e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000422:	4770      	bx	lr

08000424 <__aeabi_ui2f>:
 8000424:	f04f 0300 	mov.w	r3, #0
 8000428:	e004      	b.n	8000434 <__aeabi_i2f+0x8>
 800042a:	bf00      	nop

0800042c <__aeabi_i2f>:
 800042c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	ea5f 0c00 	movs.w	ip, r0
 8000438:	bf08      	it	eq
 800043a:	4770      	bxeq	lr
 800043c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000440:	4601      	mov	r1, r0
 8000442:	f04f 0000 	mov.w	r0, #0
 8000446:	e01c      	b.n	8000482 <__aeabi_l2f+0x2a>

08000448 <__aeabi_ul2f>:
 8000448:	ea50 0201 	orrs.w	r2, r0, r1
 800044c:	bf08      	it	eq
 800044e:	4770      	bxeq	lr
 8000450:	f04f 0300 	mov.w	r3, #0
 8000454:	e00a      	b.n	800046c <__aeabi_l2f+0x14>
 8000456:	bf00      	nop

08000458 <__aeabi_l2f>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000464:	d502      	bpl.n	800046c <__aeabi_l2f+0x14>
 8000466:	4240      	negs	r0, r0
 8000468:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800046c:	ea5f 0c01 	movs.w	ip, r1
 8000470:	bf02      	ittt	eq
 8000472:	4684      	moveq	ip, r0
 8000474:	4601      	moveq	r1, r0
 8000476:	2000      	moveq	r0, #0
 8000478:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800047c:	bf08      	it	eq
 800047e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000482:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000486:	fabc f28c 	clz	r2, ip
 800048a:	3a08      	subs	r2, #8
 800048c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000490:	db10      	blt.n	80004b4 <__aeabi_l2f+0x5c>
 8000492:	fa01 fc02 	lsl.w	ip, r1, r2
 8000496:	4463      	add	r3, ip
 8000498:	fa00 fc02 	lsl.w	ip, r0, r2
 800049c:	f1c2 0220 	rsb	r2, r2, #32
 80004a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a4:	fa20 f202 	lsr.w	r2, r0, r2
 80004a8:	eb43 0002 	adc.w	r0, r3, r2
 80004ac:	bf08      	it	eq
 80004ae:	f020 0001 	biceq.w	r0, r0, #1
 80004b2:	4770      	bx	lr
 80004b4:	f102 0220 	add.w	r2, r2, #32
 80004b8:	fa01 fc02 	lsl.w	ip, r1, r2
 80004bc:	f1c2 0220 	rsb	r2, r2, #32
 80004c0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c4:	fa21 f202 	lsr.w	r2, r1, r2
 80004c8:	eb43 0002 	adc.w	r0, r3, r2
 80004cc:	bf08      	it	eq
 80004ce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004d2:	4770      	bx	lr

080004d4 <DS18B20_StartAll>:
	return 1;
}

/* Start conversion on all sensors */
void DS18B20_StartAll()
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	OneWire_Reset(&OneWire); // Reset the bus
 80004d8:	4806      	ldr	r0, [pc, #24]	; (80004f4 <DS18B20_StartAll+0x20>)
 80004da:	f000 fc3a 	bl	8000d52 <OneWire_Reset>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_SKIPROM); // Skip ROM command
 80004de:	21cc      	movs	r1, #204	; 0xcc
 80004e0:	4804      	ldr	r0, [pc, #16]	; (80004f4 <DS18B20_StartAll+0x20>)
 80004e2:	f000 fcb3 	bl	8000e4c <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 80004e6:	2144      	movs	r1, #68	; 0x44
 80004e8:	4802      	ldr	r0, [pc, #8]	; (80004f4 <DS18B20_StartAll+0x20>)
 80004ea:	f000 fcaf 	bl	8000e4c <OneWire_WriteByte>
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	2000006c 	.word	0x2000006c

080004f8 <DS18B20_Read>:

/* Read one sensor */
uint8_t DS18B20_Read(uint8_t number, float *destination)
{
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b087      	sub	sp, #28
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	6039      	str	r1, [r7, #0]
 8000502:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount) // If read sensor is not availible
 8000504:	4b4f      	ldr	r3, [pc, #316]	; (8000644 <DS18B20_Read+0x14c>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	79fa      	ldrb	r2, [r7, #7]
 800050a:	429a      	cmp	r2, r3
 800050c:	d301      	bcc.n	8000512 <DS18B20_Read+0x1a>
		return 0;
 800050e:	2300      	movs	r3, #0
 8000510:	e094      	b.n	800063c <DS18B20_Read+0x144>

	uint16_t temperature;
	uint8_t resolution;
	float result;
	uint8_t i = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	74fb      	strb	r3, [r7, #19]
	uint8_t crc;

#endif


	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address)) // Check if sensor is DS18B20 family
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	011b      	lsls	r3, r3, #4
 800051a:	4a4b      	ldr	r2, [pc, #300]	; (8000648 <DS18B20_Read+0x150>)
 800051c:	4413      	add	r3, r2
 800051e:	4618      	mov	r0, r3
 8000520:	f000 f93e 	bl	80007a0 <DS18B20_Is>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d101      	bne.n	800052e <DS18B20_Read+0x36>
		return 0;
 800052a:	2300      	movs	r3, #0
 800052c:	e086      	b.n	800063c <DS18B20_Read+0x144>

	if (!OneWire_ReadBit(&OneWire)) // Check if the bus is released
 800052e:	4847      	ldr	r0, [pc, #284]	; (800064c <DS18B20_Read+0x154>)
 8000530:	f000 fc62 	bl	8000df8 <OneWire_ReadBit>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d101      	bne.n	800053e <DS18B20_Read+0x46>
		return 0; // Busy bus - conversion is not finished
 800053a:	2300      	movs	r3, #0
 800053c:	e07e      	b.n	800063c <DS18B20_Read+0x144>

	OneWire_Reset(&OneWire); // Reset the bus
 800053e:	4843      	ldr	r0, [pc, #268]	; (800064c <DS18B20_Read+0x154>)
 8000540:	f000 fc07 	bl	8000d52 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	011b      	lsls	r3, r3, #4
 8000548:	4a3f      	ldr	r2, [pc, #252]	; (8000648 <DS18B20_Read+0x150>)
 800054a:	4413      	add	r3, r2
 800054c:	4619      	mov	r1, r3
 800054e:	483f      	ldr	r0, [pc, #252]	; (800064c <DS18B20_Read+0x154>)
 8000550:	f000 fdb0 	bl	80010b4 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8000554:	21be      	movs	r1, #190	; 0xbe
 8000556:	483d      	ldr	r0, [pc, #244]	; (800064c <DS18B20_Read+0x154>)
 8000558:	f000 fc78 	bl	8000e4c <OneWire_WriteByte>

	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 800055c:	2300      	movs	r3, #0
 800055e:	74fb      	strb	r3, [r7, #19]
 8000560:	e00d      	b.n	800057e <DS18B20_Read+0x86>
		data[i] = OneWire_ReadByte(&OneWire);
 8000562:	7cfc      	ldrb	r4, [r7, #19]
 8000564:	4839      	ldr	r0, [pc, #228]	; (800064c <DS18B20_Read+0x154>)
 8000566:	f000 fc8f 	bl	8000e88 <OneWire_ReadByte>
 800056a:	4603      	mov	r3, r0
 800056c:	461a      	mov	r2, r3
 800056e:	f104 0318 	add.w	r3, r4, #24
 8000572:	443b      	add	r3, r7
 8000574:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8000578:	7cfb      	ldrb	r3, [r7, #19]
 800057a:	3301      	adds	r3, #1
 800057c:	74fb      	strb	r3, [r7, #19]
 800057e:	7cfb      	ldrb	r3, [r7, #19]
 8000580:	2b04      	cmp	r3, #4
 8000582:	d9ee      	bls.n	8000562 <DS18B20_Read+0x6a>
	crc = OneWire_CRC8(data, 8); // CRC calculation

	if (crc != data[8])
		return 0; // CRC invalid
#endif
	temperature = data[0] | (data[1] << 8); // Temperature is 16-bit length
 8000584:	7a3b      	ldrb	r3, [r7, #8]
 8000586:	b21a      	sxth	r2, r3
 8000588:	7a7b      	ldrb	r3, [r7, #9]
 800058a:	021b      	lsls	r3, r3, #8
 800058c:	b21b      	sxth	r3, r3
 800058e:	4313      	orrs	r3, r2
 8000590:	b21b      	sxth	r3, r3
 8000592:	823b      	strh	r3, [r7, #16]

	OneWire_Reset(&OneWire); // Reset the bus
 8000594:	482d      	ldr	r0, [pc, #180]	; (800064c <DS18B20_Read+0x154>)
 8000596:	f000 fbdc 	bl	8000d52 <OneWire_Reset>

	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 800059a:	7b3b      	ldrb	r3, [r7, #12]
 800059c:	115b      	asrs	r3, r3, #5
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	f003 0303 	and.w	r3, r3, #3
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	3309      	adds	r3, #9
 80005a8:	73fb      	strb	r3, [r7, #15]

	switch (resolution) // Chceck the correct value dur to resolution
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	3b09      	subs	r3, #9
 80005ae:	2b03      	cmp	r3, #3
 80005b0:	d83e      	bhi.n	8000630 <DS18B20_Read+0x138>
 80005b2:	a201      	add	r2, pc, #4	; (adr r2, 80005b8 <DS18B20_Read+0xc0>)
 80005b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b8:	080005c9 	.word	0x080005c9
 80005bc:	080005e3 	.word	0x080005e3
 80005c0:	080005fd 	.word	0x080005fd
 80005c4:	08000617 	.word	0x08000617
	{
		case DS18B20_Resolution_9bits:
			result = temperature*(float)DS18B20_STEP_9BIT;
 80005c8:	8a3b      	ldrh	r3, [r7, #16]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff ff2e 	bl	800042c <__aeabi_i2f>
 80005d0:	4603      	mov	r3, r0
 80005d2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff fdba 	bl	8000150 <__aeabi_fmul>
 80005dc:	4603      	mov	r3, r0
 80005de:	617b      	str	r3, [r7, #20]
		break;
 80005e0:	e028      	b.n	8000634 <DS18B20_Read+0x13c>
		case DS18B20_Resolution_10bits:
			result = temperature*(float)DS18B20_STEP_10BIT;
 80005e2:	8a3b      	ldrh	r3, [r7, #16]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ff21 	bl	800042c <__aeabi_i2f>
 80005ea:	4603      	mov	r3, r0
 80005ec:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fdad 	bl	8000150 <__aeabi_fmul>
 80005f6:	4603      	mov	r3, r0
 80005f8:	617b      	str	r3, [r7, #20]
		 break;
 80005fa:	e01b      	b.n	8000634 <DS18B20_Read+0x13c>
		case DS18B20_Resolution_11bits:
			result = temperature*(float)DS18B20_STEP_11BIT;
 80005fc:	8a3b      	ldrh	r3, [r7, #16]
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff ff14 	bl	800042c <__aeabi_i2f>
 8000604:	4603      	mov	r3, r0
 8000606:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff fda0 	bl	8000150 <__aeabi_fmul>
 8000610:	4603      	mov	r3, r0
 8000612:	617b      	str	r3, [r7, #20]
		break;
 8000614:	e00e      	b.n	8000634 <DS18B20_Read+0x13c>
		case DS18B20_Resolution_12bits:
			result = temperature*(float)DS18B20_STEP_12BIT;
 8000616:	8a3b      	ldrh	r3, [r7, #16]
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff ff07 	bl	800042c <__aeabi_i2f>
 800061e:	4603      	mov	r3, r0
 8000620:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff fd93 	bl	8000150 <__aeabi_fmul>
 800062a:	4603      	mov	r3, r0
 800062c:	617b      	str	r3, [r7, #20]
		 break;
 800062e:	e001      	b.n	8000634 <DS18B20_Read+0x13c>
		default:
			result = 0xFF;
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <DS18B20_Read+0x158>)
 8000632:	617b      	str	r3, [r7, #20]
	}

	*destination = result;
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	697a      	ldr	r2, [r7, #20]
 8000638:	601a      	str	r2, [r3, #0]

	return 1; //temperature valid
 800063a:	2301      	movs	r3, #1
}
 800063c:	4618      	mov	r0, r3
 800063e:	371c      	adds	r7, #28
 8000640:	46bd      	mov	sp, r7
 8000642:	bd90      	pop	{r4, r7, pc}
 8000644:	20000080 	.word	0x20000080
 8000648:	2000002c 	.word	0x2000002c
 800064c:	2000006c 	.word	0x2000006c
 8000650:	437f0000 	.word	0x437f0000

08000654 <DS18B20_SetResolution>:

	return conf;
}

uint8_t DS18B20_SetResolution(uint8_t number, DS18B20_Resolution_t resolution)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	460a      	mov	r2, r1
 800065e:	71fb      	strb	r3, [r7, #7]
 8000660:	4613      	mov	r3, r2
 8000662:	71bb      	strb	r3, [r7, #6]
	if( number >= TempSensorCount)
 8000664:	4b4b      	ldr	r3, [pc, #300]	; (8000794 <DS18B20_SetResolution+0x140>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	79fa      	ldrb	r2, [r7, #7]
 800066a:	429a      	cmp	r2, r3
 800066c:	d301      	bcc.n	8000672 <DS18B20_SetResolution+0x1e>
		return 0;
 800066e:	2300      	movs	r3, #0
 8000670:	e08c      	b.n	800078c <DS18B20_SetResolution+0x138>

	uint8_t th, tl, conf;
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address))
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	011b      	lsls	r3, r3, #4
 8000676:	4a48      	ldr	r2, [pc, #288]	; (8000798 <DS18B20_SetResolution+0x144>)
 8000678:	4413      	add	r3, r2
 800067a:	4618      	mov	r0, r3
 800067c:	f000 f890 	bl	80007a0 <DS18B20_Is>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d101      	bne.n	800068a <DS18B20_SetResolution+0x36>
		return 0;
 8000686:	2300      	movs	r3, #0
 8000688:	e080      	b.n	800078c <DS18B20_SetResolution+0x138>

	OneWire_Reset(&OneWire); // Reset the bus
 800068a:	4844      	ldr	r0, [pc, #272]	; (800079c <DS18B20_SetResolution+0x148>)
 800068c:	f000 fb61 	bl	8000d52 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	011b      	lsls	r3, r3, #4
 8000694:	4a40      	ldr	r2, [pc, #256]	; (8000798 <DS18B20_SetResolution+0x144>)
 8000696:	4413      	add	r3, r2
 8000698:	4619      	mov	r1, r3
 800069a:	4840      	ldr	r0, [pc, #256]	; (800079c <DS18B20_SetResolution+0x148>)
 800069c:	f000 fd0a 	bl	80010b4 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 80006a0:	21be      	movs	r1, #190	; 0xbe
 80006a2:	483e      	ldr	r0, [pc, #248]	; (800079c <DS18B20_SetResolution+0x148>)
 80006a4:	f000 fbd2 	bl	8000e4c <OneWire_WriteByte>

	OneWire_ReadByte(&OneWire);
 80006a8:	483c      	ldr	r0, [pc, #240]	; (800079c <DS18B20_SetResolution+0x148>)
 80006aa:	f000 fbed 	bl	8000e88 <OneWire_ReadByte>
	OneWire_ReadByte(&OneWire);
 80006ae:	483b      	ldr	r0, [pc, #236]	; (800079c <DS18B20_SetResolution+0x148>)
 80006b0:	f000 fbea 	bl	8000e88 <OneWire_ReadByte>

	th = OneWire_ReadByte(&OneWire); 	// Writing to scratchpad begins from the temperature alarms bytes
 80006b4:	4839      	ldr	r0, [pc, #228]	; (800079c <DS18B20_SetResolution+0x148>)
 80006b6:	f000 fbe7 	bl	8000e88 <OneWire_ReadByte>
 80006ba:	4603      	mov	r3, r0
 80006bc:	73bb      	strb	r3, [r7, #14]
	tl = OneWire_ReadByte(&OneWire); 	// 	so i have to store them.
 80006be:	4837      	ldr	r0, [pc, #220]	; (800079c <DS18B20_SetResolution+0x148>)
 80006c0:	f000 fbe2 	bl	8000e88 <OneWire_ReadByte>
 80006c4:	4603      	mov	r3, r0
 80006c6:	737b      	strb	r3, [r7, #13]
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 80006c8:	4834      	ldr	r0, [pc, #208]	; (800079c <DS18B20_SetResolution+0x148>)
 80006ca:	f000 fbdd 	bl	8000e88 <OneWire_ReadByte>
 80006ce:	4603      	mov	r3, r0
 80006d0:	73fb      	strb	r3, [r7, #15]

	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 80006d2:	79bb      	ldrb	r3, [r7, #6]
 80006d4:	2b09      	cmp	r3, #9
 80006d6:	d108      	bne.n	80006ea <DS18B20_SetResolution+0x96>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006de:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	f023 0320 	bic.w	r3, r3, #32
 80006e6:	73fb      	strb	r3, [r7, #15]
 80006e8:	e022      	b.n	8000730 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 80006ea:	79bb      	ldrb	r3, [r7, #6]
 80006ec:	2b0a      	cmp	r3, #10
 80006ee:	d108      	bne.n	8000702 <DS18B20_SetResolution+0xae>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006f6:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	f043 0320 	orr.w	r3, r3, #32
 80006fe:	73fb      	strb	r3, [r7, #15]
 8000700:	e016      	b.n	8000730 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8000702:	79bb      	ldrb	r3, [r7, #6]
 8000704:	2b0b      	cmp	r3, #11
 8000706:	d108      	bne.n	800071a <DS18B20_SetResolution+0xc6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800070e:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	f023 0320 	bic.w	r3, r3, #32
 8000716:	73fb      	strb	r3, [r7, #15]
 8000718:	e00a      	b.n	8000730 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 800071a:	79bb      	ldrb	r3, [r7, #6]
 800071c:	2b0c      	cmp	r3, #12
 800071e:	d107      	bne.n	8000730 <DS18B20_SetResolution+0xdc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000726:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8000728:	7bfb      	ldrb	r3, [r7, #15]
 800072a:	f043 0320 	orr.w	r3, r3, #32
 800072e:	73fb      	strb	r3, [r7, #15]
	}

	OneWire_Reset(&OneWire); // Reset the bus
 8000730:	481a      	ldr	r0, [pc, #104]	; (800079c <DS18B20_SetResolution+0x148>)
 8000732:	f000 fb0e 	bl	8000d52 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	011b      	lsls	r3, r3, #4
 800073a:	4a17      	ldr	r2, [pc, #92]	; (8000798 <DS18B20_SetResolution+0x144>)
 800073c:	4413      	add	r3, r2
 800073e:	4619      	mov	r1, r3
 8000740:	4816      	ldr	r0, [pc, #88]	; (800079c <DS18B20_SetResolution+0x148>)
 8000742:	f000 fcb7 	bl	80010b4 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_WSCRATCHPAD); // Write scratchpad command
 8000746:	214e      	movs	r1, #78	; 0x4e
 8000748:	4814      	ldr	r0, [pc, #80]	; (800079c <DS18B20_SetResolution+0x148>)
 800074a:	f000 fb7f 	bl	8000e4c <OneWire_WriteByte>

	OneWire_WriteByte(&OneWire, th); // Write 3 bytes to scratchpad
 800074e:	7bbb      	ldrb	r3, [r7, #14]
 8000750:	4619      	mov	r1, r3
 8000752:	4812      	ldr	r0, [pc, #72]	; (800079c <DS18B20_SetResolution+0x148>)
 8000754:	f000 fb7a 	bl	8000e4c <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, tl);
 8000758:	7b7b      	ldrb	r3, [r7, #13]
 800075a:	4619      	mov	r1, r3
 800075c:	480f      	ldr	r0, [pc, #60]	; (800079c <DS18B20_SetResolution+0x148>)
 800075e:	f000 fb75 	bl	8000e4c <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, conf);
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	4619      	mov	r1, r3
 8000766:	480d      	ldr	r0, [pc, #52]	; (800079c <DS18B20_SetResolution+0x148>)
 8000768:	f000 fb70 	bl	8000e4c <OneWire_WriteByte>

	OneWire_Reset(&OneWire); // Reset the bus
 800076c:	480b      	ldr	r0, [pc, #44]	; (800079c <DS18B20_SetResolution+0x148>)
 800076e:	f000 faf0 	bl	8000d52 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	011b      	lsls	r3, r3, #4
 8000776:	4a08      	ldr	r2, [pc, #32]	; (8000798 <DS18B20_SetResolution+0x144>)
 8000778:	4413      	add	r3, r2
 800077a:	4619      	mov	r1, r3
 800077c:	4807      	ldr	r0, [pc, #28]	; (800079c <DS18B20_SetResolution+0x148>)
 800077e:	f000 fc99 	bl	80010b4 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_CPYSCRATCHPAD); // Copy scratchpad to EEPROM
 8000782:	2148      	movs	r1, #72	; 0x48
 8000784:	4805      	ldr	r0, [pc, #20]	; (800079c <DS18B20_SetResolution+0x148>)
 8000786:	f000 fb61 	bl	8000e4c <OneWire_WriteByte>

	return 1;
 800078a:	2301      	movs	r3, #1
}
 800078c:	4618      	mov	r0, r3
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000080 	.word	0x20000080
 8000798:	2000002c 	.word	0x2000002c
 800079c:	2000006c 	.word	0x2000006c

080007a0 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t* ROM)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b28      	cmp	r3, #40	; 0x28
 80007ae:	d101      	bne.n	80007b4 <DS18B20_Is+0x14>
		return 1;
 80007b0:	2301      	movs	r3, #1
 80007b2:	e000      	b.n	80007b6 <DS18B20_Is+0x16>
	return 0;
 80007b4:	2300      	movs	r3, #0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr

080007c0 <DS18B20_AllDone>:

uint8_t DS18B20_AllDone(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	return OneWire_ReadBit(&OneWire); // Bus is down - busy
 80007c4:	4802      	ldr	r0, [pc, #8]	; (80007d0 <DS18B20_AllDone+0x10>)
 80007c6:	f000 fb17 	bl	8000df8 <OneWire_ReadBit>
 80007ca:	4603      	mov	r3, r0
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2000006c 	.word	0x2000006c

080007d4 <DS18B20_ReadAll>:

void DS18B20_ReadAll(void)
{
 80007d4:	b590      	push	{r4, r7, lr}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
	uint8_t i;

	if (DS18B20_AllDone())
 80007da:	f7ff fff1 	bl	80007c0 <DS18B20_AllDone>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d02e      	beq.n	8000842 <DS18B20_ReadAll+0x6e>
	{
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 80007e4:	2300      	movs	r3, #0
 80007e6:	71fb      	strb	r3, [r7, #7]
 80007e8:	e026      	b.n	8000838 <DS18B20_ReadAll+0x64>
		{
			ds18b20[i].ValidDataFlag = 0;
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	4a17      	ldr	r2, [pc, #92]	; (800084c <DS18B20_ReadAll+0x78>)
 80007ee:	011b      	lsls	r3, r3, #4
 80007f0:	4413      	add	r3, r2
 80007f2:	330c      	adds	r3, #12
 80007f4:	2200      	movs	r2, #0
 80007f6:	701a      	strb	r2, [r3, #0]

			if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	011b      	lsls	r3, r3, #4
 80007fc:	4a13      	ldr	r2, [pc, #76]	; (800084c <DS18B20_ReadAll+0x78>)
 80007fe:	4413      	add	r3, r2
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff ffcd 	bl	80007a0 <DS18B20_Is>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d012      	beq.n	8000832 <DS18B20_ReadAll+0x5e>
			{
				ds18b20[i].ValidDataFlag = DS18B20_Read(i, &ds18b20[i].Temperature); // Read single sensor
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	011b      	lsls	r3, r3, #4
 8000810:	3308      	adds	r3, #8
 8000812:	4a0e      	ldr	r2, [pc, #56]	; (800084c <DS18B20_ReadAll+0x78>)
 8000814:	441a      	add	r2, r3
 8000816:	79fc      	ldrb	r4, [r7, #7]
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff fe6b 	bl	80004f8 <DS18B20_Read>
 8000822:	4603      	mov	r3, r0
 8000824:	4619      	mov	r1, r3
 8000826:	4a09      	ldr	r2, [pc, #36]	; (800084c <DS18B20_ReadAll+0x78>)
 8000828:	0123      	lsls	r3, r4, #4
 800082a:	4413      	add	r3, r2
 800082c:	330c      	adds	r3, #12
 800082e:	460a      	mov	r2, r1
 8000830:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	3301      	adds	r3, #1
 8000836:	71fb      	strb	r3, [r7, #7]
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <DS18B20_ReadAll+0x7c>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	79fa      	ldrb	r2, [r7, #7]
 800083e:	429a      	cmp	r2, r3
 8000840:	d3d3      	bcc.n	80007ea <DS18B20_ReadAll+0x16>
			}
		}
	}
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	bd90      	pop	{r4, r7, pc}
 800084a:	bf00      	nop
 800084c:	2000002c 	.word	0x2000002c
 8000850:	20000080 	.word	0x20000080

08000854 <DS18B20_Quantity>:
	for(i = 0; i < 8; i++)
		ds18b20[number].Address[i] = ROM[i]; // Write ROM into sensor's structure
}

uint8_t DS18B20_Quantity(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
	return TempSensorCount;
 8000858:	4b02      	ldr	r3, [pc, #8]	; (8000864 <DS18B20_Quantity+0x10>)
 800085a:	781b      	ldrb	r3, [r3, #0]
}
 800085c:	4618      	mov	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	20000080 	.word	0x20000080

08000868 <DS18B20_GetTemperature>:

uint8_t DS18B20_GetTemperature(uint8_t number, float* destination)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	6039      	str	r1, [r7, #0]
 8000872:	71fb      	strb	r3, [r7, #7]
	if(!ds18b20[number].ValidDataFlag)
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <DS18B20_GetTemperature+0x3c>)
 8000878:	011b      	lsls	r3, r3, #4
 800087a:	4413      	add	r3, r2
 800087c:	330c      	adds	r3, #12
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d101      	bne.n	8000888 <DS18B20_GetTemperature+0x20>
		return 0;
 8000884:	2300      	movs	r3, #0
 8000886:	e008      	b.n	800089a <DS18B20_GetTemperature+0x32>

	*destination = ds18b20[number].Temperature;
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <DS18B20_GetTemperature+0x3c>)
 800088c:	011b      	lsls	r3, r3, #4
 800088e:	4413      	add	r3, r2
 8000890:	3308      	adds	r3, #8
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	601a      	str	r2, [r3, #0]
	return 1;
 8000898:	2301      	movs	r3, #1

}
 800089a:	4618      	mov	r0, r3
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr
 80008a4:	2000002c 	.word	0x2000002c

080008a8 <DS18B20_Init>:

void DS18B20_Init(DS18B20_Resolution_t resolution)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
	uint8_t next = 0, i = 0, j;
 80008b2:	2300      	movs	r3, #0
 80008b4:	73fb      	strb	r3, [r7, #15]
 80008b6:	2300      	movs	r3, #0
 80008b8:	73bb      	strb	r3, [r7, #14]
	OneWire_Init(&OneWire, DS18B20_GPIO_Port, DS18B20_Pin); // Init OneWire bus
 80008ba:	2201      	movs	r2, #1
 80008bc:	491f      	ldr	r1, [pc, #124]	; (800093c <DS18B20_Init+0x94>)
 80008be:	4820      	ldr	r0, [pc, #128]	; (8000940 <DS18B20_Init+0x98>)
 80008c0:	f000 fc34 	bl	800112c <OneWire_Init>

	next = OneWire_First(&OneWire); // Search first OneWire device
 80008c4:	481e      	ldr	r0, [pc, #120]	; (8000940 <DS18B20_Init+0x98>)
 80008c6:	f000 fbd8 	bl	800107a <OneWire_First>
 80008ca:	4603      	mov	r3, r0
 80008cc:	73fb      	strb	r3, [r7, #15]
	while(next)
 80008ce:	e018      	b.n	8000902 <DS18B20_Init+0x5a>
	{
		TempSensorCount++;
 80008d0:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <DS18B20_Init+0x9c>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	3301      	adds	r3, #1
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <DS18B20_Init+0x9c>)
 80008da:	701a      	strb	r2, [r3, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 80008dc:	7bbb      	ldrb	r3, [r7, #14]
 80008de:	1c5a      	adds	r2, r3, #1
 80008e0:	73ba      	strb	r2, [r7, #14]
 80008e2:	011b      	lsls	r3, r3, #4
 80008e4:	4a18      	ldr	r2, [pc, #96]	; (8000948 <DS18B20_Init+0xa0>)
 80008e6:	4413      	add	r3, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	4815      	ldr	r0, [pc, #84]	; (8000940 <DS18B20_Init+0x98>)
 80008ec:	f000 fc01 	bl	80010f2 <OneWire_GetFullROM>
		next = OneWire_Next(&OneWire);
 80008f0:	4813      	ldr	r0, [pc, #76]	; (8000940 <DS18B20_Init+0x98>)
 80008f2:	f000 fbd2 	bl	800109a <OneWire_Next>
 80008f6:	4603      	mov	r3, r0
 80008f8:	73fb      	strb	r3, [r7, #15]
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <DS18B20_Init+0x9c>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b03      	cmp	r3, #3
 8000900:	d803      	bhi.n	800090a <DS18B20_Init+0x62>
	while(next)
 8000902:	7bfb      	ldrb	r3, [r7, #15]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d1e3      	bne.n	80008d0 <DS18B20_Init+0x28>
 8000908:	e000      	b.n	800090c <DS18B20_Init+0x64>
			break;
 800090a:	bf00      	nop
	}

	for(j = 0; j < i; j++)
 800090c:	2300      	movs	r3, #0
 800090e:	737b      	strb	r3, [r7, #13]
 8000910:	e00a      	b.n	8000928 <DS18B20_Init+0x80>
	{
		DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
 8000912:	79fa      	ldrb	r2, [r7, #7]
 8000914:	7b7b      	ldrb	r3, [r7, #13]
 8000916:	4611      	mov	r1, r2
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fe9b 	bl	8000654 <DS18B20_SetResolution>

		DS18B20_StartAll(); // Start conversion on all sensors
 800091e:	f7ff fdd9 	bl	80004d4 <DS18B20_StartAll>
	for(j = 0; j < i; j++)
 8000922:	7b7b      	ldrb	r3, [r7, #13]
 8000924:	3301      	adds	r3, #1
 8000926:	737b      	strb	r3, [r7, #13]
 8000928:	7b7a      	ldrb	r2, [r7, #13]
 800092a:	7bbb      	ldrb	r3, [r7, #14]
 800092c:	429a      	cmp	r2, r3
 800092e:	d3f0      	bcc.n	8000912 <DS18B20_Init+0x6a>
	}
}
 8000930:	bf00      	nop
 8000932:	bf00      	nop
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40010c00 	.word	0x40010c00
 8000940:	2000006c 	.word	0x2000006c
 8000944:	20000080 	.word	0x20000080
 8000948:	2000002c 	.word	0x2000002c

0800094c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000950:	4a0c      	ldr	r2, [pc, #48]	; (8000984 <MX_FREERTOS_Init+0x38>)
 8000952:	2100      	movs	r1, #0
 8000954:	480c      	ldr	r0, [pc, #48]	; (8000988 <MX_FREERTOS_Init+0x3c>)
 8000956:	f002 f965 	bl	8002c24 <osThreadNew>
 800095a:	4603      	mov	r3, r0
 800095c:	4a0b      	ldr	r2, [pc, #44]	; (800098c <MX_FREERTOS_Init+0x40>)
 800095e:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(button_task, NULL, &myTask02_attributes);
 8000960:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <MX_FREERTOS_Init+0x44>)
 8000962:	2100      	movs	r1, #0
 8000964:	480b      	ldr	r0, [pc, #44]	; (8000994 <MX_FREERTOS_Init+0x48>)
 8000966:	f002 f95d 	bl	8002c24 <osThreadNew>
 800096a:	4603      	mov	r3, r0
 800096c:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <MX_FREERTOS_Init+0x4c>)
 800096e:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(sensor_task, NULL, &myTask03_attributes);
 8000970:	4a0a      	ldr	r2, [pc, #40]	; (800099c <MX_FREERTOS_Init+0x50>)
 8000972:	2100      	movs	r1, #0
 8000974:	480a      	ldr	r0, [pc, #40]	; (80009a0 <MX_FREERTOS_Init+0x54>)
 8000976:	f002 f955 	bl	8002c24 <osThreadNew>
 800097a:	4603      	mov	r3, r0
 800097c:	4a09      	ldr	r2, [pc, #36]	; (80009a4 <MX_FREERTOS_Init+0x58>)
 800097e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	080055e4 	.word	0x080055e4
 8000988:	080009a9 	.word	0x080009a9
 800098c:	20000084 	.word	0x20000084
 8000990:	08005608 	.word	0x08005608
 8000994:	080009b9 	.word	0x080009b9
 8000998:	20000088 	.word	0x20000088
 800099c:	0800562c 	.word	0x0800562c
 80009a0:	08000a59 	.word	0x08000a59
 80009a4:	2000008c 	.word	0x2000008c

080009a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009b0:	2001      	movs	r0, #1
 80009b2:	f002 f9e1 	bl	8002d78 <osDelay>
 80009b6:	e7fb      	b.n	80009b0 <StartDefaultTask+0x8>

080009b8 <button_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_button_task */
void button_task(void *argument)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN button_task */
  /* Infinite loop */
  for(;;)
  {
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == 0)
 80009c0:	2108      	movs	r1, #8
 80009c2:	4822      	ldr	r0, [pc, #136]	; (8000a4c <button_task+0x94>)
 80009c4:	f001 f806 	bl	80019d4 <HAL_GPIO_ReadPin>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d112      	bne.n	80009f4 <button_task+0x3c>
	  {
		  HAL_Delay(150);
 80009ce:	2096      	movs	r0, #150	; 0x96
 80009d0:	f000 fd78 	bl	80014c4 <HAL_Delay>
		  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == 0)
 80009d4:	2108      	movs	r1, #8
 80009d6:	481d      	ldr	r0, [pc, #116]	; (8000a4c <button_task+0x94>)
 80009d8:	f000 fffc 	bl	80019d4 <HAL_GPIO_ReadPin>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d130      	bne.n	8000a44 <button_task+0x8c>
		  {
			  // todo: Start measuring
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80009e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e6:	481a      	ldr	r0, [pc, #104]	; (8000a50 <button_task+0x98>)
 80009e8:	f001 f823 	bl	8001a32 <HAL_GPIO_TogglePin>
			  status_measure = START_MEASURING;
 80009ec:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <button_task+0x9c>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
 80009f2:	e027      	b.n	8000a44 <button_task+0x8c>
		  }
	  } else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0)
 80009f4:	2110      	movs	r1, #16
 80009f6:	4815      	ldr	r0, [pc, #84]	; (8000a4c <button_task+0x94>)
 80009f8:	f000 ffec 	bl	80019d4 <HAL_GPIO_ReadPin>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d112      	bne.n	8000a28 <button_task+0x70>
	  {
		  HAL_Delay(150);
 8000a02:	2096      	movs	r0, #150	; 0x96
 8000a04:	f000 fd5e 	bl	80014c4 <HAL_Delay>
		  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0)
 8000a08:	2110      	movs	r1, #16
 8000a0a:	4810      	ldr	r0, [pc, #64]	; (8000a4c <button_task+0x94>)
 8000a0c:	f000 ffe2 	bl	80019d4 <HAL_GPIO_ReadPin>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d116      	bne.n	8000a44 <button_task+0x8c>
		  {
			  // todo: Stop measuring
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 8000a16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a1a:	480d      	ldr	r0, [pc, #52]	; (8000a50 <button_task+0x98>)
 8000a1c:	f001 f809 	bl	8001a32 <HAL_GPIO_TogglePin>
			  status_measure = STOP_MEASURING;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <button_task+0x9c>)
 8000a22:	2202      	movs	r2, #2
 8000a24:	701a      	strb	r2, [r3, #0]
 8000a26:	e00d      	b.n	8000a44 <button_task+0x8c>
		  }
	  } else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0)
 8000a28:	2120      	movs	r1, #32
 8000a2a:	4808      	ldr	r0, [pc, #32]	; (8000a4c <button_task+0x94>)
 8000a2c:	f000 ffd2 	bl	80019d4 <HAL_GPIO_ReadPin>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d106      	bne.n	8000a44 <button_task+0x8c>
	  {
		  HAL_Delay(150);
 8000a36:	2096      	movs	r0, #150	; 0x96
 8000a38:	f000 fd44 	bl	80014c4 <HAL_Delay>
		  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0)
 8000a3c:	2120      	movs	r1, #32
 8000a3e:	4803      	ldr	r0, [pc, #12]	; (8000a4c <button_task+0x94>)
 8000a40:	f000 ffc8 	bl	80019d4 <HAL_GPIO_ReadPin>
		  {
			  // todo: Display voltage battery...
		  }
	  }

	  osDelay(1);
 8000a44:	2001      	movs	r0, #1
 8000a46:	f002 f997 	bl	8002d78 <osDelay>
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == 0)
 8000a4a:	e7b9      	b.n	80009c0 <button_task+0x8>
 8000a4c:	40010c00 	.word	0x40010c00
 8000a50:	40011000 	.word	0x40011000
 8000a54:	20000081 	.word	0x20000081

08000a58 <sensor_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensor_task */
void sensor_task(void *argument)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensor_task */
  /* Infinite loop */
  for(;;)
  {
	  switch (status_measure) {
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <sensor_task+0x58>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d11e      	bne.n	8000aa6 <sensor_task+0x4e>
		case START_MEASURING:
			DS18B20_ReadAll();
 8000a68:	f7ff feb4 	bl	80007d4 <DS18B20_ReadAll>
			DS18B20_StartAll();
 8000a6c:	f7ff fd32 	bl	80004d4 <DS18B20_StartAll>
			for(int i = 0; i < DS18B20_Quantity(); i++)
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	e00f      	b.n	8000a96 <sensor_task+0x3e>
			{
				if(DS18B20_GetTemperature(i, &temperature))
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	490e      	ldr	r1, [pc, #56]	; (8000ab4 <sensor_task+0x5c>)
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fef3 	bl	8000868 <DS18B20_GetTemperature>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d003      	beq.n	8000a90 <sensor_task+0x38>
				{
					osDelay(2000);
 8000a88:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a8c:	f002 f974 	bl	8002d78 <osDelay>
			for(int i = 0; i < DS18B20_Quantity(); i++)
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	3301      	adds	r3, #1
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	f7ff fedd 	bl	8000854 <DS18B20_Quantity>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	dbe8      	blt.n	8000a76 <sensor_task+0x1e>
				}
			}
			break;
 8000aa4:	e000      	b.n	8000aa8 <sensor_task+0x50>
		default:
			break;
 8000aa6:	bf00      	nop
	}
	  osDelay(1);
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f002 f965 	bl	8002d78 <osDelay>
	  switch (status_measure) {
 8000aae:	e7d7      	b.n	8000a60 <sensor_task+0x8>
 8000ab0:	20000081 	.word	0x20000081
 8000ab4:	20000090 	.word	0x20000090

08000ab8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	f107 0310 	add.w	r3, r7, #16
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000acc:	4b33      	ldr	r3, [pc, #204]	; (8000b9c <MX_GPIO_Init+0xe4>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a32      	ldr	r2, [pc, #200]	; (8000b9c <MX_GPIO_Init+0xe4>)
 8000ad2:	f043 0310 	orr.w	r3, r3, #16
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b30      	ldr	r3, [pc, #192]	; (8000b9c <MX_GPIO_Init+0xe4>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0310 	and.w	r3, r3, #16
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae4:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <MX_GPIO_Init+0xe4>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a2c      	ldr	r2, [pc, #176]	; (8000b9c <MX_GPIO_Init+0xe4>)
 8000aea:	f043 0320 	orr.w	r3, r3, #32
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <MX_GPIO_Init+0xe4>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0320 	and.w	r3, r3, #32
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afc:	4b27      	ldr	r3, [pc, #156]	; (8000b9c <MX_GPIO_Init+0xe4>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a26      	ldr	r2, [pc, #152]	; (8000b9c <MX_GPIO_Init+0xe4>)
 8000b02:	f043 0308 	orr.w	r3, r3, #8
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b24      	ldr	r3, [pc, #144]	; (8000b9c <MX_GPIO_Init+0xe4>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0308 	and.w	r3, r3, #8
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b14:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <MX_GPIO_Init+0xe4>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	4a20      	ldr	r2, [pc, #128]	; (8000b9c <MX_GPIO_Init+0xe4>)
 8000b1a:	f043 0304 	orr.w	r3, r3, #4
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <MX_GPIO_Init+0xe4>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f003 0304 	and.w	r3, r3, #4
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000b32:	481b      	ldr	r0, [pc, #108]	; (8000ba0 <MX_GPIO_Init+0xe8>)
 8000b34:	f000 ff65 	bl	8001a02 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	4819      	ldr	r0, [pc, #100]	; (8000ba4 <MX_GPIO_Init+0xec>)
 8000b3e:	f000 ff60 	bl	8001a02 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b42:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b54:	f107 0310 	add.w	r3, r7, #16
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4811      	ldr	r0, [pc, #68]	; (8000ba0 <MX_GPIO_Init+0xe8>)
 8000b5c:	f000 fdb6 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DS18B20_Pin;
 8000b60:	2301      	movs	r3, #1
 8000b62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	4619      	mov	r1, r3
 8000b76:	480b      	ldr	r0, [pc, #44]	; (8000ba4 <MX_GPIO_Init+0xec>)
 8000b78:	f000 fda8 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000b7c:	2338      	movs	r3, #56	; 0x38
 8000b7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b88:	f107 0310 	add.w	r3, r7, #16
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_GPIO_Init+0xec>)
 8000b90:	f000 fd9c 	bl	80016cc <HAL_GPIO_Init>

}
 8000b94:	bf00      	nop
 8000b96:	3720      	adds	r7, #32
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40011000 	.word	0x40011000
 8000ba4:	40010c00 	.word	0x40010c00

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bac:	f000 fc58 	bl	8001460 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb0:	f000 f80e 	bl	8000bd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb4:	f7ff ff80 	bl	8000ab8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000bb8:	f000 fbbe 	bl	8001338 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  DS18B20_Init(DS18B20_Resolution_12bits);
 8000bbc:	200c      	movs	r0, #12
 8000bbe:	f7ff fe73 	bl	80008a8 <DS18B20_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000bc2:	f001 ffc9 	bl	8002b58 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000bc6:	f7ff fec1 	bl	800094c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000bca:	f001 fff7 	bl	8002bbc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <main+0x26>

08000bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b090      	sub	sp, #64	; 0x40
 8000bd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd6:	f107 0318 	add.w	r3, r7, #24
 8000bda:	2228      	movs	r2, #40	; 0x28
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f004 fcc6 	bl	8005570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bfa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c00:	2301      	movs	r3, #1
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c04:	2302      	movs	r3, #2
 8000c06:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c0e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c14:	f107 0318 	add.w	r3, r7, #24
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 ff23 	bl	8001a64 <HAL_RCC_OscConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c24:	f000 f828 	bl	8000c78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c28:	230f      	movs	r3, #15
 8000c2a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2102      	movs	r1, #2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 f990 	bl	8001f68 <HAL_RCC_ClockConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c4e:	f000 f813 	bl	8000c78 <Error_Handler>
  }
}
 8000c52:	bf00      	nop
 8000c54:	3740      	adds	r7, #64	; 0x40
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c6a:	d101      	bne.n	8000c70 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c6c:	f000 fc0e 	bl	800148c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c7c:	b672      	cpsid	i
}
 8000c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <Error_Handler+0x8>
	...

08000c84 <OneWire_Delay>:
#include "onewire.h"
#include "ds18b20.h"

/* Delay function for constant 1-Wire timings */
void OneWire_Delay(uint16_t us)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <OneWire_Delay+0x2c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= us);
 8000c96:	bf00      	nop
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <OneWire_Delay+0x2c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c9e:	88fb      	ldrh	r3, [r7, #6]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d9f9      	bls.n	8000c98 <OneWire_Delay+0x14>
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr
 8000cb0:	200000dc 	.word	0x200000dc

08000cb4 <OneWire_BusInputDirection>:

/* Bus direction control */
void OneWire_BusInputDirection(OneWire_t *onewire)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	889b      	ldrh	r3, [r3, #4]
 8000ccc:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f107 0208 	add.w	r2, r7, #8
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 fcf7 	bl	80016cc <HAL_GPIO_Init>
}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <OneWire_BusOutputDirection>:

void OneWire_BusOutputDirection(OneWire_t *onewire)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 8000cee:	2311      	movs	r3, #17
 8000cf0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	889b      	ldrh	r3, [r3, #4]
 8000cfe:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f107 0208 	add.w	r2, r7, #8
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 fcde 	bl	80016cc <HAL_GPIO_Init>
}
 8000d10:	bf00      	nop
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <OneWire_OutputLow>:

/* Bus pin output state control */
void OneWire_OutputLow(OneWire_t *onewire)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin<<16; // Reset the 1-Wire pin
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	889b      	ldrh	r3, [r3, #4]
 8000d24:	041a      	lsls	r2, r3, #16
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	611a      	str	r2, [r3, #16]
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr

08000d36 <OneWire_OutputHigh>:

void OneWire_OutputHigh(OneWire_t *onewire)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	889a      	ldrh	r2, [r3, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	611a      	str	r2, [r3, #16]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr

08000d52 <OneWire_Reset>:
 * Returns:
 * 	0 - Reset ok
 * 	1 - Error
 */
uint8_t OneWire_Reset(OneWire_t* onewire)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b084      	sub	sp, #16
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
	uint8_t i;

	OneWire_OutputLow(onewire);  // Write bus output low
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff ffdc 	bl	8000d18 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ffc0 	bl	8000ce6 <OneWire_BusOutputDirection>
	OneWire_Delay(480); // Wait 480 us for reset
 8000d66:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8000d6a:	f7ff ff8b 	bl	8000c84 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release the bus by switching to input
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ffa0 	bl	8000cb4 <OneWire_BusInputDirection>
	OneWire_Delay(70);
 8000d74:	2046      	movs	r0, #70	; 0x46
 8000d76:	f7ff ff85 	bl	8000c84 <OneWire_Delay>

	i = HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin); // Check if bus is low
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	889b      	ldrh	r3, [r3, #4]
 8000d82:	4619      	mov	r1, r3
 8000d84:	4610      	mov	r0, r2
 8000d86:	f000 fe25 	bl	80019d4 <HAL_GPIO_ReadPin>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	73fb      	strb	r3, [r7, #15]
															 // if it's high - no device is presence on the bus
	OneWire_Delay(410);
 8000d8e:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8000d92:	f7ff ff77 	bl	8000c84 <OneWire_Delay>

	return i;
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <OneWire_WriteBit>:

/* Writing/Reading operations */
void OneWire_WriteBit(OneWire_t* onewire, uint8_t bit)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	70fb      	strb	r3, [r7, #3]
	if (bit) // Send '1',
 8000dac:	78fb      	ldrb	r3, [r7, #3]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d00f      	beq.n	8000dd2 <OneWire_WriteBit+0x32>
	{
		OneWire_OutputLow(onewire);	// Set the bus low
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ffb0 	bl	8000d18 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ff94 	bl	8000ce6 <OneWire_BusOutputDirection>
		OneWire_Delay(6);
 8000dbe:	2006      	movs	r0, #6
 8000dc0:	f7ff ff60 	bl	8000c84 <OneWire_Delay>

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ff75 	bl	8000cb4 <OneWire_BusInputDirection>
		OneWire_Delay(64);
 8000dca:	2040      	movs	r0, #64	; 0x40
 8000dcc:	f7ff ff5a 	bl	8000c84 <OneWire_Delay>
		OneWire_Delay(60);

		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
		OneWire_Delay(10);
	}
}
 8000dd0:	e00e      	b.n	8000df0 <OneWire_WriteBit+0x50>
		OneWire_OutputLow(onewire); // Set the bus low
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ffa0 	bl	8000d18 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ff84 	bl	8000ce6 <OneWire_BusOutputDirection>
		OneWire_Delay(60);
 8000dde:	203c      	movs	r0, #60	; 0x3c
 8000de0:	f7ff ff50 	bl	8000c84 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f7ff ff65 	bl	8000cb4 <OneWire_BusInputDirection>
		OneWire_Delay(10);
 8000dea:	200a      	movs	r0, #10
 8000dec:	f7ff ff4a 	bl	8000c84 <OneWire_Delay>
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <OneWire_ReadBit>:

uint8_t OneWire_ReadBit(OneWire_t* onewire)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0; // Default read bit state is low
 8000e00:	2300      	movs	r3, #0
 8000e02:	73fb      	strb	r3, [r7, #15]

	OneWire_OutputLow(onewire); // Set low to initiate reading
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff87 	bl	8000d18 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ff6b 	bl	8000ce6 <OneWire_BusOutputDirection>
	OneWire_Delay(2);
 8000e10:	2002      	movs	r0, #2
 8000e12:	f7ff ff37 	bl	8000c84 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release bus for Slave response
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff ff4c 	bl	8000cb4 <OneWire_BusInputDirection>
	OneWire_Delay(10);
 8000e1c:	200a      	movs	r0, #10
 8000e1e:	f7ff ff31 	bl	8000c84 <OneWire_Delay>

	if (HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin)) // Read the bus state
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	889b      	ldrh	r3, [r3, #4]
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	f000 fdd1 	bl	80019d4 <HAL_GPIO_ReadPin>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <OneWire_ReadBit+0x44>
		bit = 1;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	73fb      	strb	r3, [r7, #15]

	OneWire_Delay(50); // Wait for end of read cycle
 8000e3c:	2032      	movs	r0, #50	; 0x32
 8000e3e:	f7ff ff21 	bl	8000c84 <OneWire_Delay>

	return bit;
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* onewire, uint8_t byte)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8000e58:	2308      	movs	r3, #8
 8000e5a:	73fb      	strb	r3, [r7, #15]

	do
	{
		OneWire_WriteBit(onewire, byte & 1); // LSB first
 8000e5c:	78fb      	ldrb	r3, [r7, #3]
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	4619      	mov	r1, r3
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ff9a 	bl	8000da0 <OneWire_WriteBit>
		byte >>= 1;
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	085b      	lsrs	r3, r3, #1
 8000e70:	70fb      	strb	r3, [r7, #3]
	} while(--i);
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	3b01      	subs	r3, #1
 8000e76:	73fb      	strb	r3, [r7, #15]
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d1ee      	bne.n	8000e5c <OneWire_WriteByte+0x10>
}
 8000e7e:	bf00      	nop
 8000e80:	bf00      	nop
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* onewire)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8000e90:	2308      	movs	r3, #8
 8000e92:	73fb      	strb	r3, [r7, #15]
 8000e94:	2300      	movs	r3, #0
 8000e96:	73bb      	strb	r3, [r7, #14]

	do{
		byte >>= 1;
 8000e98:	7bbb      	ldrb	r3, [r7, #14]
 8000e9a:	085b      	lsrs	r3, r3, #1
 8000e9c:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff ffaa 	bl	8000df8 <OneWire_ReadBit>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	01db      	lsls	r3, r3, #7
 8000ea8:	b25a      	sxtb	r2, r3
 8000eaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	b25b      	sxtb	r3, r3
 8000eb2:	73bb      	strb	r3, [r7, #14]
	} while(--i);
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	73fb      	strb	r3, [r7, #15]
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1eb      	bne.n	8000e98 <OneWire_ReadByte+0x10>

	return byte;
 8000ec0:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <OneWire_ResetSearch>:

/* 1-Wire search operations */
void OneWire_ResetSearch(OneWire_t* onewire)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
	// Clear the search results
	onewire->LastDiscrepancy = 0;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	719a      	strb	r2, [r3, #6]
	onewire->LastDeviceFlag = 0;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	721a      	strb	r2, [r3, #8]
	onewire->LastFamilyDiscrepancy = 0;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	71da      	strb	r2, [r3, #7]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr

08000eee <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* onewire, uint8_t command)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b084      	sub	sp, #16
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	70fb      	strb	r3, [r7, #3]
	uint8_t id_bit_number;
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	id_bit_number = 1;
 8000efa:	2301      	movs	r3, #1
 8000efc:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8000f06:	2301      	movs	r3, #1
 8000f08:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	733b      	strb	r3, [r7, #12]

	if (!onewire->LastDeviceFlag) // If last device flag is not set
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	7a1b      	ldrb	r3, [r3, #8]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f040 809a 	bne.w	800104c <OneWire_Search+0x15e>
	{
		if (OneWire_Reset(onewire)) // Reset bus
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff1a 	bl	8000d52 <OneWire_Reset>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d00a      	beq.n	8000f3a <OneWire_Search+0x4c>
		{
			// If error while reset - reset search results
			onewire->LastDiscrepancy = 0;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	719a      	strb	r2, [r3, #6]
			onewire->LastDeviceFlag = 0;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	721a      	strb	r2, [r3, #8]
			onewire->LastFamilyDiscrepancy = 0;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	71da      	strb	r2, [r3, #7]
			return 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e09b      	b.n	8001072 <OneWire_Search+0x184>
		}

		OneWire_WriteByte(onewire, command); // Send searching command
 8000f3a:	78fb      	ldrb	r3, [r7, #3]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff ff84 	bl	8000e4c <OneWire_WriteByte>

		// Searching loop, Maxim APPLICATION NOTE 187
		do
		{
			id_bit = OneWire_ReadBit(onewire); // Read a bit 1
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff ff57 	bl	8000df8 <OneWire_ReadBit>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(onewire); // Read the complement of bit 1
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ff52 	bl	8000df8 <OneWire_ReadBit>
 8000f54:	4603      	mov	r3, r0
 8000f56:	723b      	strb	r3, [r7, #8]

			if ((id_bit == 1) && (cmp_id_bit == 1)) // 11 - data error
 8000f58:	7a7b      	ldrb	r3, [r7, #9]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d102      	bne.n	8000f64 <OneWire_Search+0x76>
 8000f5e:	7a3b      	ldrb	r3, [r7, #8]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d064      	beq.n	800102e <OneWire_Search+0x140>
			{
				break;
			}
			else
			{
				if (id_bit != cmp_id_bit)
 8000f64:	7a7a      	ldrb	r2, [r7, #9]
 8000f66:	7a3b      	ldrb	r3, [r7, #8]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d002      	beq.n	8000f72 <OneWire_Search+0x84>
				{
					search_direction = id_bit;  // Bit write value for search
 8000f6c:	7a7b      	ldrb	r3, [r7, #9]
 8000f6e:	72bb      	strb	r3, [r7, #10]
 8000f70:	e026      	b.n	8000fc0 <OneWire_Search+0xd2>
				}
				else // 00 - 2 devices
				{
					// Table 3. Search Path Direction
					if (id_bit_number < onewire->LastDiscrepancy)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	799b      	ldrb	r3, [r3, #6]
 8000f76:	7bfa      	ldrb	r2, [r7, #15]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d20d      	bcs.n	8000f98 <OneWire_Search+0xaa>
					{
						search_direction = ((onewire->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8000f7c:	7b7b      	ldrb	r3, [r7, #13]
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	7a5a      	ldrb	r2, [r3, #9]
 8000f84:	7afb      	ldrb	r3, [r7, #11]
 8000f86:	4013      	ands	r3, r2
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	bf14      	ite	ne
 8000f8e:	2301      	movne	r3, #1
 8000f90:	2300      	moveq	r3, #0
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	72bb      	strb	r3, [r7, #10]
 8000f96:	e008      	b.n	8000faa <OneWire_Search+0xbc>
					}
					else
					{
						// If bit is equal to last - pick 1
						// If not - then pick 0
						search_direction = (id_bit_number == onewire->LastDiscrepancy);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	799b      	ldrb	r3, [r3, #6]
 8000f9c:	7bfa      	ldrb	r2, [r7, #15]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	bf0c      	ite	eq
 8000fa2:	2301      	moveq	r3, #1
 8000fa4:	2300      	movne	r3, #0
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	72bb      	strb	r3, [r7, #10]
					}

					if (search_direction == 0) // If 0 was picked, write it to LastZero
 8000faa:	7abb      	ldrb	r3, [r7, #10]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d107      	bne.n	8000fc0 <OneWire_Search+0xd2>
					{
						last_zero = id_bit_number;
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	73bb      	strb	r3, [r7, #14]

						if (last_zero < 9) // Check for last discrepancy in family
 8000fb4:	7bbb      	ldrb	r3, [r7, #14]
 8000fb6:	2b08      	cmp	r3, #8
 8000fb8:	d802      	bhi.n	8000fc0 <OneWire_Search+0xd2>
						{
							onewire->LastFamilyDiscrepancy = last_zero;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	7bba      	ldrb	r2, [r7, #14]
 8000fbe:	71da      	strb	r2, [r3, #7]
						}
					}
				}

				if (search_direction == 1)
 8000fc0:	7abb      	ldrb	r3, [r7, #10]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d10c      	bne.n	8000fe0 <OneWire_Search+0xf2>
				{
					onewire->ROM_NO[rom_byte_number] |= rom_byte_mask; // Set the bit in the ROM byte rom_byte_number
 8000fc6:	7b7b      	ldrb	r3, [r7, #13]
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	4413      	add	r3, r2
 8000fcc:	7a59      	ldrb	r1, [r3, #9]
 8000fce:	7b7b      	ldrb	r3, [r7, #13]
 8000fd0:	7afa      	ldrb	r2, [r7, #11]
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	b2d1      	uxtb	r1, r2
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	460a      	mov	r2, r1
 8000fdc:	725a      	strb	r2, [r3, #9]
 8000fde:	e010      	b.n	8001002 <OneWire_Search+0x114>
				}
				else
				{
					onewire->ROM_NO[rom_byte_number] &= ~rom_byte_mask; // Clear the bit in the ROM byte rom_byte_number
 8000fe0:	7b7b      	ldrb	r3, [r7, #13]
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	7a5b      	ldrb	r3, [r3, #9]
 8000fe8:	b25a      	sxtb	r2, r3
 8000fea:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	b25b      	sxtb	r3, r3
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	b25a      	sxtb	r2, r3
 8000ff6:	7b7b      	ldrb	r3, [r7, #13]
 8000ff8:	b2d1      	uxtb	r1, r2
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	460a      	mov	r2, r1
 8001000:	725a      	strb	r2, [r3, #9]
				}

				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 8001002:	7abb      	ldrb	r3, [r7, #10]
 8001004:	4619      	mov	r1, r3
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff feca 	bl	8000da0 <OneWire_WriteBit>

				id_bit_number++; // Next bit search - increase the id
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	3301      	adds	r3, #1
 8001010:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1; // Shoft the mask for next bit
 8001012:	7afb      	ldrb	r3, [r7, #11]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	72fb      	strb	r3, [r7, #11]

				if (rom_byte_mask == 0) // If the mask is 0, it says the whole byte is read
 8001018:	7afb      	ldrb	r3, [r7, #11]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d104      	bne.n	8001028 <OneWire_Search+0x13a>
				{
					rom_byte_number++; // Next byte number
 800101e:	7b7b      	ldrb	r3, [r7, #13]
 8001020:	3301      	adds	r3, #1
 8001022:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1; // Reset the mask - first bit
 8001024:	2301      	movs	r3, #1
 8001026:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while(rom_byte_number < 8);  // Read 8 bytes
 8001028:	7b7b      	ldrb	r3, [r7, #13]
 800102a:	2b07      	cmp	r3, #7
 800102c:	d98a      	bls.n	8000f44 <OneWire_Search+0x56>

		if (!(id_bit_number < 65)) // If all read bits number is below 65 (8 bytes)
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	2b40      	cmp	r3, #64	; 0x40
 8001032:	d90b      	bls.n	800104c <OneWire_Search+0x15e>
		{
			onewire->LastDiscrepancy = last_zero;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7bba      	ldrb	r2, [r7, #14]
 8001038:	719a      	strb	r2, [r3, #6]

			if (onewire->LastDiscrepancy == 0) // If last discrepancy is 0 - last device found
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	799b      	ldrb	r3, [r3, #6]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d102      	bne.n	8001048 <OneWire_Search+0x15a>
			{
				onewire->LastDeviceFlag = 1; // Set the flag
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2201      	movs	r2, #1
 8001046:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1; // Searching successful
 8001048:	2301      	movs	r3, #1
 800104a:	733b      	strb	r3, [r7, #12]
		}
	}

	// If no device is found - reset search data and return 0
	if (!search_result || !onewire->ROM_NO[0])
 800104c:	7b3b      	ldrb	r3, [r7, #12]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <OneWire_Search+0x16c>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	7a5b      	ldrb	r3, [r3, #9]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d10a      	bne.n	8001070 <OneWire_Search+0x182>
	{
		onewire->LastDiscrepancy = 0;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	719a      	strb	r2, [r3, #6]
		onewire->LastDeviceFlag = 0;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	721a      	strb	r2, [r3, #8]
		onewire->LastFamilyDiscrepancy = 0;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8001070:	7b3b      	ldrb	r3, [r7, #12]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <OneWire_First>:

/* Return first device on 1-Wire bus */
uint8_t OneWire_First(OneWire_t* onewire)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
	OneWire_ResetSearch(onewire);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ff21 	bl	8000eca <OneWire_ResetSearch>

	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8001088:	21f0      	movs	r1, #240	; 0xf0
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff ff2f 	bl	8000eee <OneWire_Search>
 8001090:	4603      	mov	r3, r0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <OneWire_Next>:

/* Return next device on 1-Wire bus */
uint8_t OneWire_Next(OneWire_t* onewire)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 80010a2:	21f0      	movs	r1, #240	; 0xf0
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff22 	bl	8000eee <OneWire_Search>
 80010aa:	4603      	mov	r3, r0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <OneWire_SelectWithPointer>:
}


/* Select a device on bus by pointer to ROM address */
void OneWire_SelectWithPointer(OneWire_t* onewire, uint8_t *ROM)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 80010be:	2155      	movs	r1, #85	; 0x55
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff fec3 	bl	8000e4c <OneWire_WriteByte>

	for (i = 0; i < 8; i++)
 80010c6:	2300      	movs	r3, #0
 80010c8:	73fb      	strb	r3, [r7, #15]
 80010ca:	e00a      	b.n	80010e2 <OneWire_SelectWithPointer+0x2e>
	{
		OneWire_WriteByte(onewire, *(ROM + i));
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	4413      	add	r3, r2
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4619      	mov	r1, r3
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff feb8 	bl	8000e4c <OneWire_WriteByte>
	for (i = 0; i < 8; i++)
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	3301      	adds	r3, #1
 80010e0:	73fb      	strb	r3, [r7, #15]
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	2b07      	cmp	r3, #7
 80010e6:	d9f1      	bls.n	80010cc <OneWire_SelectWithPointer+0x18>
	}
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <OneWire_GetFullROM>:

/* Get the ROM of found device */
void OneWire_GetFullROM(OneWire_t* onewire, uint8_t *firstIndex)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b085      	sub	sp, #20
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
 80010fa:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 80010fc:	2300      	movs	r3, #0
 80010fe:	73fb      	strb	r3, [r7, #15]
 8001100:	e00a      	b.n	8001118 <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = onewire->ROM_NO[i];
 8001102:	7bfa      	ldrb	r2, [r7, #15]
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	6839      	ldr	r1, [r7, #0]
 8001108:	440b      	add	r3, r1
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	440a      	add	r2, r1
 800110e:	7a52      	ldrb	r2, [r2, #9]
 8001110:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	3301      	adds	r3, #1
 8001116:	73fb      	strb	r3, [r7, #15]
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	2b07      	cmp	r3, #7
 800111c:	d9f1      	bls.n	8001102 <OneWire_GetFullROM+0x10>
	}
}
 800111e:	bf00      	nop
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr
	...

0800112c <OneWire_Init>:
	return crc;
}

/* 1-Wire initialization */
void OneWire_Init(OneWire_t* onewire, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	4613      	mov	r3, r2
 8001138:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER); // Start the delay timer
 800113a:	4811      	ldr	r0, [pc, #68]	; (8001180 <OneWire_Init+0x54>)
 800113c:	f001 f918 	bl	8002370 <HAL_TIM_Base_Start>

	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	601a      	str	r2, [r3, #0]
	onewire->GPIO_Pin = GPIO_Pin;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	88fa      	ldrh	r2, [r7, #6]
 800114a:	809a      	strh	r2, [r3, #4]

	// 1-Wire bit bang initialization
	OneWire_BusOutputDirection(onewire);
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f7ff fdca 	bl	8000ce6 <OneWire_BusOutputDirection>
	OneWire_OutputHigh(onewire);
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f7ff fdef 	bl	8000d36 <OneWire_OutputHigh>
	HAL_Delay(100);
 8001158:	2064      	movs	r0, #100	; 0x64
 800115a:	f000 f9b3 	bl	80014c4 <HAL_Delay>
	OneWire_OutputLow(onewire);
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f7ff fdda 	bl	8000d18 <OneWire_OutputLow>
	HAL_Delay(100);
 8001164:	2064      	movs	r0, #100	; 0x64
 8001166:	f000 f9ad 	bl	80014c4 <HAL_Delay>
	OneWire_OutputHigh(onewire);
 800116a:	68f8      	ldr	r0, [r7, #12]
 800116c:	f7ff fde3 	bl	8000d36 <OneWire_OutputHigh>
	HAL_Delay(200);
 8001170:	20c8      	movs	r0, #200	; 0xc8
 8001172:	f000 f9a7 	bl	80014c4 <HAL_Delay>
}
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200000dc 	.word	0x200000dc

08001184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800118a:	4b18      	ldr	r3, [pc, #96]	; (80011ec <HAL_MspInit+0x68>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	4a17      	ldr	r2, [pc, #92]	; (80011ec <HAL_MspInit+0x68>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6193      	str	r3, [r2, #24]
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <HAL_MspInit+0x68>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_MspInit+0x68>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	4a11      	ldr	r2, [pc, #68]	; (80011ec <HAL_MspInit+0x68>)
 80011a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ac:	61d3      	str	r3, [r2, #28]
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <HAL_MspInit+0x68>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	210f      	movs	r1, #15
 80011be:	f06f 0001 	mvn.w	r0, #1
 80011c2:	f000 fa58 	bl	8001676 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <HAL_MspInit+0x6c>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <HAL_MspInit+0x6c>)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40010000 	.word	0x40010000

080011f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08e      	sub	sp, #56	; 0x38
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001200:	2300      	movs	r3, #0
 8001202:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001204:	2300      	movs	r3, #0
 8001206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800120a:	4b34      	ldr	r3, [pc, #208]	; (80012dc <HAL_InitTick+0xe8>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	4a33      	ldr	r2, [pc, #204]	; (80012dc <HAL_InitTick+0xe8>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	61d3      	str	r3, [r2, #28]
 8001216:	4b31      	ldr	r3, [pc, #196]	; (80012dc <HAL_InitTick+0xe8>)
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001222:	f107 0210 	add.w	r2, r7, #16
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f001 f801 	bl	8002234 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001232:	6a3b      	ldr	r3, [r7, #32]
 8001234:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001238:	2b00      	cmp	r3, #0
 800123a:	d103      	bne.n	8001244 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800123c:	f000 ffe6 	bl	800220c <HAL_RCC_GetPCLK1Freq>
 8001240:	6378      	str	r0, [r7, #52]	; 0x34
 8001242:	e004      	b.n	800124e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001244:	f000 ffe2 	bl	800220c <HAL_RCC_GetPCLK1Freq>
 8001248:	4603      	mov	r3, r0
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800124e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001250:	4a23      	ldr	r2, [pc, #140]	; (80012e0 <HAL_InitTick+0xec>)
 8001252:	fba2 2303 	umull	r2, r3, r2, r3
 8001256:	0c9b      	lsrs	r3, r3, #18
 8001258:	3b01      	subs	r3, #1
 800125a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800125c:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <HAL_InitTick+0xf0>)
 800125e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001262:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001264:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <HAL_InitTick+0xf0>)
 8001266:	f240 32e7 	movw	r2, #999	; 0x3e7
 800126a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800126c:	4a1d      	ldr	r2, [pc, #116]	; (80012e4 <HAL_InitTick+0xf0>)
 800126e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001270:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001272:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <HAL_InitTick+0xf0>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <HAL_InitTick+0xf0>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <HAL_InitTick+0xf0>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001284:	4817      	ldr	r0, [pc, #92]	; (80012e4 <HAL_InitTick+0xf0>)
 8001286:	f001 f823 	bl	80022d0 <HAL_TIM_Base_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001290:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001294:	2b00      	cmp	r3, #0
 8001296:	d11b      	bne.n	80012d0 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001298:	4812      	ldr	r0, [pc, #72]	; (80012e4 <HAL_InitTick+0xf0>)
 800129a:	f001 f8b3 	bl	8002404 <HAL_TIM_Base_Start_IT>
 800129e:	4603      	mov	r3, r0
 80012a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80012a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d111      	bne.n	80012d0 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012ac:	201c      	movs	r0, #28
 80012ae:	f000 f9fe 	bl	80016ae <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b0f      	cmp	r3, #15
 80012b6:	d808      	bhi.n	80012ca <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80012b8:	2200      	movs	r2, #0
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	201c      	movs	r0, #28
 80012be:	f000 f9da 	bl	8001676 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012c2:	4a09      	ldr	r2, [pc, #36]	; (80012e8 <HAL_InitTick+0xf4>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	e002      	b.n	80012d0 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3738      	adds	r7, #56	; 0x38
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40021000 	.word	0x40021000
 80012e0:	431bde83 	.word	0x431bde83
 80012e4:	20000094 	.word	0x20000094
 80012e8:	20000004 	.word	0x20000004

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <NMI_Handler+0x4>

080012f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <HardFault_Handler+0x4>

080012f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <MemManage_Handler+0x4>

080012fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <UsageFault_Handler+0x4>

0800130a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
	...

08001318 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800131c:	4802      	ldr	r0, [pc, #8]	; (8001328 <TIM2_IRQHandler+0x10>)
 800131e:	f001 f8c3 	bl	80024a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000094 	.word	0x20000094

0800132c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134c:	463b      	mov	r3, r7
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001354:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <MX_TIM1_Init+0x98>)
 8001356:	4a1f      	ldr	r2, [pc, #124]	; (80013d4 <MX_TIM1_Init+0x9c>)
 8001358:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 800135a:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <MX_TIM1_Init+0x98>)
 800135c:	223f      	movs	r2, #63	; 0x3f
 800135e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <MX_TIM1_Init+0x98>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <MX_TIM1_Init+0x98>)
 8001368:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800136c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MX_TIM1_Init+0x98>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <MX_TIM1_Init+0x98>)
 8001376:	2200      	movs	r2, #0
 8001378:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <MX_TIM1_Init+0x98>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001380:	4813      	ldr	r0, [pc, #76]	; (80013d0 <MX_TIM1_Init+0x98>)
 8001382:	f000 ffa5 	bl	80022d0 <HAL_TIM_Base_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800138c:	f7ff fc74 	bl	8000c78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001394:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	4619      	mov	r1, r3
 800139c:	480c      	ldr	r0, [pc, #48]	; (80013d0 <MX_TIM1_Init+0x98>)
 800139e:	f001 f98b 	bl	80026b8 <HAL_TIM_ConfigClockSource>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80013a8:	f7ff fc66 	bl	8000c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ac:	2300      	movs	r3, #0
 80013ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013b4:	463b      	mov	r3, r7
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_TIM1_Init+0x98>)
 80013ba:	f001 fb5d 	bl	8002a78 <HAL_TIMEx_MasterConfigSynchronization>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80013c4:	f7ff fc58 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	200000dc 	.word	0x200000dc
 80013d4:	40012c00 	.word	0x40012c00

080013d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a09      	ldr	r2, [pc, #36]	; (800140c <HAL_TIM_Base_MspInit+0x34>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d10b      	bne.n	8001402 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <HAL_TIM_Base_MspInit+0x38>)
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	4a08      	ldr	r2, [pc, #32]	; (8001410 <HAL_TIM_Base_MspInit+0x38>)
 80013f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013f4:	6193      	str	r3, [r2, #24]
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_TIM_Base_MspInit+0x38>)
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001402:	bf00      	nop
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	40012c00 	.word	0x40012c00
 8001410:	40021000 	.word	0x40021000

08001414 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001414:	480c      	ldr	r0, [pc, #48]	; (8001448 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001416:	490d      	ldr	r1, [pc, #52]	; (800144c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001418:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800141c:	e002      	b.n	8001424 <LoopCopyDataInit>

0800141e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800141e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001422:	3304      	adds	r3, #4

08001424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001428:	d3f9      	bcc.n	800141e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142a:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800142c:	4c0a      	ldr	r4, [pc, #40]	; (8001458 <LoopFillZerobss+0x22>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001430:	e001      	b.n	8001436 <LoopFillZerobss>

08001432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001434:	3204      	adds	r2, #4

08001436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001438:	d3fb      	bcc.n	8001432 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800143a:	f7ff ff77 	bl	800132c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800143e:	f004 f865 	bl	800550c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001442:	f7ff fbb1 	bl	8000ba8 <main>
  bx lr
 8001446:	4770      	bx	lr
  ldr r0, =_sdata
 8001448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800144c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001450:	08005670 	.word	0x08005670
  ldr r2, =_sbss
 8001454:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001458:	20001a70 	.word	0x20001a70

0800145c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800145c:	e7fe      	b.n	800145c <ADC1_2_IRQHandler>
	...

08001460 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <HAL_Init+0x28>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a07      	ldr	r2, [pc, #28]	; (8001488 <HAL_Init+0x28>)
 800146a:	f043 0310 	orr.w	r3, r3, #16
 800146e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001470:	2003      	movs	r0, #3
 8001472:	f000 f8f5 	bl	8001660 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001476:	200f      	movs	r0, #15
 8001478:	f7ff febc 	bl	80011f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800147c:	f7ff fe82 	bl	8001184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40022000 	.word	0x40022000

0800148c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <HAL_IncTick+0x1c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <HAL_IncTick+0x20>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4413      	add	r3, r2
 800149c:	4a03      	ldr	r2, [pc, #12]	; (80014ac <HAL_IncTick+0x20>)
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	20000008 	.word	0x20000008
 80014ac:	20000124 	.word	0x20000124

080014b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return uwTick;
 80014b4:	4b02      	ldr	r3, [pc, #8]	; (80014c0 <HAL_GetTick+0x10>)
 80014b6:	681b      	ldr	r3, [r3, #0]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr
 80014c0:	20000124 	.word	0x20000124

080014c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014cc:	f7ff fff0 	bl	80014b0 <HAL_GetTick>
 80014d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014dc:	d005      	beq.n	80014ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014de:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <HAL_Delay+0x44>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4413      	add	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ea:	bf00      	nop
 80014ec:	f7ff ffe0 	bl	80014b0 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d8f7      	bhi.n	80014ec <HAL_Delay+0x28>
  {
  }
}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000008 	.word	0x20000008

0800150c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <__NVIC_SetPriorityGrouping+0x44>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001528:	4013      	ands	r3, r2
 800152a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001534:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800153c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800153e:	4a04      	ldr	r2, [pc, #16]	; (8001550 <__NVIC_SetPriorityGrouping+0x44>)
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	60d3      	str	r3, [r2, #12]
}
 8001544:	bf00      	nop
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <__NVIC_GetPriorityGrouping+0x18>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	0a1b      	lsrs	r3, r3, #8
 800155e:	f003 0307 	and.w	r3, r3, #7
}
 8001562:	4618      	mov	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	2b00      	cmp	r3, #0
 8001580:	db0b      	blt.n	800159a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	f003 021f 	and.w	r2, r3, #31
 8001588:	4906      	ldr	r1, [pc, #24]	; (80015a4 <__NVIC_EnableIRQ+0x34>)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	095b      	lsrs	r3, r3, #5
 8001590:	2001      	movs	r0, #1
 8001592:	fa00 f202 	lsl.w	r2, r0, r2
 8001596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	e000e100 	.word	0xe000e100

080015a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	6039      	str	r1, [r7, #0]
 80015b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	db0a      	blt.n	80015d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	490c      	ldr	r1, [pc, #48]	; (80015f4 <__NVIC_SetPriority+0x4c>)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	0112      	lsls	r2, r2, #4
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	440b      	add	r3, r1
 80015cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d0:	e00a      	b.n	80015e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4908      	ldr	r1, [pc, #32]	; (80015f8 <__NVIC_SetPriority+0x50>)
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	3b04      	subs	r3, #4
 80015e0:	0112      	lsls	r2, r2, #4
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	440b      	add	r3, r1
 80015e6:	761a      	strb	r2, [r3, #24]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000e100 	.word	0xe000e100
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f1c3 0307 	rsb	r3, r3, #7
 8001616:	2b04      	cmp	r3, #4
 8001618:	bf28      	it	cs
 800161a:	2304      	movcs	r3, #4
 800161c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3304      	adds	r3, #4
 8001622:	2b06      	cmp	r3, #6
 8001624:	d902      	bls.n	800162c <NVIC_EncodePriority+0x30>
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3b03      	subs	r3, #3
 800162a:	e000      	b.n	800162e <NVIC_EncodePriority+0x32>
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	f04f 32ff 	mov.w	r2, #4294967295
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43da      	mvns	r2, r3
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	401a      	ands	r2, r3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001644:	f04f 31ff 	mov.w	r1, #4294967295
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	43d9      	mvns	r1, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	4313      	orrs	r3, r2
         );
}
 8001656:	4618      	mov	r0, r3
 8001658:	3724      	adds	r7, #36	; 0x24
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr

08001660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff ff4f 	bl	800150c <__NVIC_SetPriorityGrouping>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001676:	b580      	push	{r7, lr}
 8001678:	b086      	sub	sp, #24
 800167a:	af00      	add	r7, sp, #0
 800167c:	4603      	mov	r3, r0
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
 8001682:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001688:	f7ff ff64 	bl	8001554 <__NVIC_GetPriorityGrouping>
 800168c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	68b9      	ldr	r1, [r7, #8]
 8001692:	6978      	ldr	r0, [r7, #20]
 8001694:	f7ff ffb2 	bl	80015fc <NVIC_EncodePriority>
 8001698:	4602      	mov	r2, r0
 800169a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169e:	4611      	mov	r1, r2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff81 	bl	80015a8 <__NVIC_SetPriority>
}
 80016a6:	bf00      	nop
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4603      	mov	r3, r0
 80016b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff57 	bl	8001570 <__NVIC_EnableIRQ>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b08b      	sub	sp, #44	; 0x2c
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016d6:	2300      	movs	r3, #0
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016da:	2300      	movs	r3, #0
 80016dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016de:	e169      	b.n	80019b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016e0:	2201      	movs	r2, #1
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	69fa      	ldr	r2, [r7, #28]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	f040 8158 	bne.w	80019ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	4a9a      	ldr	r2, [pc, #616]	; (800196c <HAL_GPIO_Init+0x2a0>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d05e      	beq.n	80017c6 <HAL_GPIO_Init+0xfa>
 8001708:	4a98      	ldr	r2, [pc, #608]	; (800196c <HAL_GPIO_Init+0x2a0>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d875      	bhi.n	80017fa <HAL_GPIO_Init+0x12e>
 800170e:	4a98      	ldr	r2, [pc, #608]	; (8001970 <HAL_GPIO_Init+0x2a4>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d058      	beq.n	80017c6 <HAL_GPIO_Init+0xfa>
 8001714:	4a96      	ldr	r2, [pc, #600]	; (8001970 <HAL_GPIO_Init+0x2a4>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d86f      	bhi.n	80017fa <HAL_GPIO_Init+0x12e>
 800171a:	4a96      	ldr	r2, [pc, #600]	; (8001974 <HAL_GPIO_Init+0x2a8>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d052      	beq.n	80017c6 <HAL_GPIO_Init+0xfa>
 8001720:	4a94      	ldr	r2, [pc, #592]	; (8001974 <HAL_GPIO_Init+0x2a8>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d869      	bhi.n	80017fa <HAL_GPIO_Init+0x12e>
 8001726:	4a94      	ldr	r2, [pc, #592]	; (8001978 <HAL_GPIO_Init+0x2ac>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d04c      	beq.n	80017c6 <HAL_GPIO_Init+0xfa>
 800172c:	4a92      	ldr	r2, [pc, #584]	; (8001978 <HAL_GPIO_Init+0x2ac>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d863      	bhi.n	80017fa <HAL_GPIO_Init+0x12e>
 8001732:	4a92      	ldr	r2, [pc, #584]	; (800197c <HAL_GPIO_Init+0x2b0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d046      	beq.n	80017c6 <HAL_GPIO_Init+0xfa>
 8001738:	4a90      	ldr	r2, [pc, #576]	; (800197c <HAL_GPIO_Init+0x2b0>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d85d      	bhi.n	80017fa <HAL_GPIO_Init+0x12e>
 800173e:	2b12      	cmp	r3, #18
 8001740:	d82a      	bhi.n	8001798 <HAL_GPIO_Init+0xcc>
 8001742:	2b12      	cmp	r3, #18
 8001744:	d859      	bhi.n	80017fa <HAL_GPIO_Init+0x12e>
 8001746:	a201      	add	r2, pc, #4	; (adr r2, 800174c <HAL_GPIO_Init+0x80>)
 8001748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174c:	080017c7 	.word	0x080017c7
 8001750:	080017a1 	.word	0x080017a1
 8001754:	080017b3 	.word	0x080017b3
 8001758:	080017f5 	.word	0x080017f5
 800175c:	080017fb 	.word	0x080017fb
 8001760:	080017fb 	.word	0x080017fb
 8001764:	080017fb 	.word	0x080017fb
 8001768:	080017fb 	.word	0x080017fb
 800176c:	080017fb 	.word	0x080017fb
 8001770:	080017fb 	.word	0x080017fb
 8001774:	080017fb 	.word	0x080017fb
 8001778:	080017fb 	.word	0x080017fb
 800177c:	080017fb 	.word	0x080017fb
 8001780:	080017fb 	.word	0x080017fb
 8001784:	080017fb 	.word	0x080017fb
 8001788:	080017fb 	.word	0x080017fb
 800178c:	080017fb 	.word	0x080017fb
 8001790:	080017a9 	.word	0x080017a9
 8001794:	080017bd 	.word	0x080017bd
 8001798:	4a79      	ldr	r2, [pc, #484]	; (8001980 <HAL_GPIO_Init+0x2b4>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d013      	beq.n	80017c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800179e:	e02c      	b.n	80017fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	623b      	str	r3, [r7, #32]
          break;
 80017a6:	e029      	b.n	80017fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	3304      	adds	r3, #4
 80017ae:	623b      	str	r3, [r7, #32]
          break;
 80017b0:	e024      	b.n	80017fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	3308      	adds	r3, #8
 80017b8:	623b      	str	r3, [r7, #32]
          break;
 80017ba:	e01f      	b.n	80017fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	330c      	adds	r3, #12
 80017c2:	623b      	str	r3, [r7, #32]
          break;
 80017c4:	e01a      	b.n	80017fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d102      	bne.n	80017d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017ce:	2304      	movs	r3, #4
 80017d0:	623b      	str	r3, [r7, #32]
          break;
 80017d2:	e013      	b.n	80017fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d105      	bne.n	80017e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017dc:	2308      	movs	r3, #8
 80017de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	611a      	str	r2, [r3, #16]
          break;
 80017e6:	e009      	b.n	80017fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017e8:	2308      	movs	r3, #8
 80017ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	615a      	str	r2, [r3, #20]
          break;
 80017f2:	e003      	b.n	80017fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017f4:	2300      	movs	r3, #0
 80017f6:	623b      	str	r3, [r7, #32]
          break;
 80017f8:	e000      	b.n	80017fc <HAL_GPIO_Init+0x130>
          break;
 80017fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	2bff      	cmp	r3, #255	; 0xff
 8001800:	d801      	bhi.n	8001806 <HAL_GPIO_Init+0x13a>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	e001      	b.n	800180a <HAL_GPIO_Init+0x13e>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3304      	adds	r3, #4
 800180a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	2bff      	cmp	r3, #255	; 0xff
 8001810:	d802      	bhi.n	8001818 <HAL_GPIO_Init+0x14c>
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	e002      	b.n	800181e <HAL_GPIO_Init+0x152>
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	3b08      	subs	r3, #8
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	210f      	movs	r1, #15
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	fa01 f303 	lsl.w	r3, r1, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	401a      	ands	r2, r3
 8001830:	6a39      	ldr	r1, [r7, #32]
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	fa01 f303 	lsl.w	r3, r1, r3
 8001838:	431a      	orrs	r2, r3
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 80b1 	beq.w	80019ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800184c:	4b4d      	ldr	r3, [pc, #308]	; (8001984 <HAL_GPIO_Init+0x2b8>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	4a4c      	ldr	r2, [pc, #304]	; (8001984 <HAL_GPIO_Init+0x2b8>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6193      	str	r3, [r2, #24]
 8001858:	4b4a      	ldr	r3, [pc, #296]	; (8001984 <HAL_GPIO_Init+0x2b8>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001864:	4a48      	ldr	r2, [pc, #288]	; (8001988 <HAL_GPIO_Init+0x2bc>)
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	089b      	lsrs	r3, r3, #2
 800186a:	3302      	adds	r3, #2
 800186c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001870:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	220f      	movs	r2, #15
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	4013      	ands	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a40      	ldr	r2, [pc, #256]	; (800198c <HAL_GPIO_Init+0x2c0>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d013      	beq.n	80018b8 <HAL_GPIO_Init+0x1ec>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a3f      	ldr	r2, [pc, #252]	; (8001990 <HAL_GPIO_Init+0x2c4>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d00d      	beq.n	80018b4 <HAL_GPIO_Init+0x1e8>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a3e      	ldr	r2, [pc, #248]	; (8001994 <HAL_GPIO_Init+0x2c8>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d007      	beq.n	80018b0 <HAL_GPIO_Init+0x1e4>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a3d      	ldr	r2, [pc, #244]	; (8001998 <HAL_GPIO_Init+0x2cc>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d101      	bne.n	80018ac <HAL_GPIO_Init+0x1e0>
 80018a8:	2303      	movs	r3, #3
 80018aa:	e006      	b.n	80018ba <HAL_GPIO_Init+0x1ee>
 80018ac:	2304      	movs	r3, #4
 80018ae:	e004      	b.n	80018ba <HAL_GPIO_Init+0x1ee>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e002      	b.n	80018ba <HAL_GPIO_Init+0x1ee>
 80018b4:	2301      	movs	r3, #1
 80018b6:	e000      	b.n	80018ba <HAL_GPIO_Init+0x1ee>
 80018b8:	2300      	movs	r3, #0
 80018ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018bc:	f002 0203 	and.w	r2, r2, #3
 80018c0:	0092      	lsls	r2, r2, #2
 80018c2:	4093      	lsls	r3, r2
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018ca:	492f      	ldr	r1, [pc, #188]	; (8001988 <HAL_GPIO_Init+0x2bc>)
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	089b      	lsrs	r3, r3, #2
 80018d0:	3302      	adds	r3, #2
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d006      	beq.n	80018f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018e4:	4b2d      	ldr	r3, [pc, #180]	; (800199c <HAL_GPIO_Init+0x2d0>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	492c      	ldr	r1, [pc, #176]	; (800199c <HAL_GPIO_Init+0x2d0>)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	600b      	str	r3, [r1, #0]
 80018f0:	e006      	b.n	8001900 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018f2:	4b2a      	ldr	r3, [pc, #168]	; (800199c <HAL_GPIO_Init+0x2d0>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	4928      	ldr	r1, [pc, #160]	; (800199c <HAL_GPIO_Init+0x2d0>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d006      	beq.n	800191a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800190c:	4b23      	ldr	r3, [pc, #140]	; (800199c <HAL_GPIO_Init+0x2d0>)
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	4922      	ldr	r1, [pc, #136]	; (800199c <HAL_GPIO_Init+0x2d0>)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	604b      	str	r3, [r1, #4]
 8001918:	e006      	b.n	8001928 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800191a:	4b20      	ldr	r3, [pc, #128]	; (800199c <HAL_GPIO_Init+0x2d0>)
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	43db      	mvns	r3, r3
 8001922:	491e      	ldr	r1, [pc, #120]	; (800199c <HAL_GPIO_Init+0x2d0>)
 8001924:	4013      	ands	r3, r2
 8001926:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d006      	beq.n	8001942 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <HAL_GPIO_Init+0x2d0>)
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	4918      	ldr	r1, [pc, #96]	; (800199c <HAL_GPIO_Init+0x2d0>)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	608b      	str	r3, [r1, #8]
 8001940:	e006      	b.n	8001950 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001942:	4b16      	ldr	r3, [pc, #88]	; (800199c <HAL_GPIO_Init+0x2d0>)
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	43db      	mvns	r3, r3
 800194a:	4914      	ldr	r1, [pc, #80]	; (800199c <HAL_GPIO_Init+0x2d0>)
 800194c:	4013      	ands	r3, r2
 800194e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d021      	beq.n	80019a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800195c:	4b0f      	ldr	r3, [pc, #60]	; (800199c <HAL_GPIO_Init+0x2d0>)
 800195e:	68da      	ldr	r2, [r3, #12]
 8001960:	490e      	ldr	r1, [pc, #56]	; (800199c <HAL_GPIO_Init+0x2d0>)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	4313      	orrs	r3, r2
 8001966:	60cb      	str	r3, [r1, #12]
 8001968:	e021      	b.n	80019ae <HAL_GPIO_Init+0x2e2>
 800196a:	bf00      	nop
 800196c:	10320000 	.word	0x10320000
 8001970:	10310000 	.word	0x10310000
 8001974:	10220000 	.word	0x10220000
 8001978:	10210000 	.word	0x10210000
 800197c:	10120000 	.word	0x10120000
 8001980:	10110000 	.word	0x10110000
 8001984:	40021000 	.word	0x40021000
 8001988:	40010000 	.word	0x40010000
 800198c:	40010800 	.word	0x40010800
 8001990:	40010c00 	.word	0x40010c00
 8001994:	40011000 	.word	0x40011000
 8001998:	40011400 	.word	0x40011400
 800199c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_GPIO_Init+0x304>)
 80019a2:	68da      	ldr	r2, [r3, #12]
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	4909      	ldr	r1, [pc, #36]	; (80019d0 <HAL_GPIO_Init+0x304>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	3301      	adds	r3, #1
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	fa22 f303 	lsr.w	r3, r2, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f47f ae8e 	bne.w	80016e0 <HAL_GPIO_Init+0x14>
  }
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	372c      	adds	r7, #44	; 0x2c
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	40010400 	.word	0x40010400

080019d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	887b      	ldrh	r3, [r7, #2]
 80019e6:	4013      	ands	r3, r2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d002      	beq.n	80019f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019ec:	2301      	movs	r3, #1
 80019ee:	73fb      	strb	r3, [r7, #15]
 80019f0:	e001      	b.n	80019f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019f2:	2300      	movs	r3, #0
 80019f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr

08001a02 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	807b      	strh	r3, [r7, #2]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a12:	787b      	ldrb	r3, [r7, #1]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a18:	887a      	ldrh	r2, [r7, #2]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a1e:	e003      	b.n	8001a28 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a20:	887b      	ldrh	r3, [r7, #2]
 8001a22:	041a      	lsls	r2, r3, #16
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	611a      	str	r2, [r3, #16]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr

08001a32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b085      	sub	sp, #20
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a44:	887a      	ldrh	r2, [r7, #2]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	041a      	lsls	r2, r3, #16
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	43d9      	mvns	r1, r3
 8001a50:	887b      	ldrh	r3, [r7, #2]
 8001a52:	400b      	ands	r3, r1
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	611a      	str	r2, [r3, #16]
}
 8001a5a:	bf00      	nop
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e272      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 8087 	beq.w	8001b92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a84:	4b92      	ldr	r3, [pc, #584]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b04      	cmp	r3, #4
 8001a8e:	d00c      	beq.n	8001aaa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a90:	4b8f      	ldr	r3, [pc, #572]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d112      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x5e>
 8001a9c:	4b8c      	ldr	r3, [pc, #560]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa8:	d10b      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aaa:	4b89      	ldr	r3, [pc, #548]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d06c      	beq.n	8001b90 <HAL_RCC_OscConfig+0x12c>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d168      	bne.n	8001b90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e24c      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aca:	d106      	bne.n	8001ada <HAL_RCC_OscConfig+0x76>
 8001acc:	4b80      	ldr	r3, [pc, #512]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a7f      	ldr	r2, [pc, #508]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	e02e      	b.n	8001b38 <HAL_RCC_OscConfig+0xd4>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10c      	bne.n	8001afc <HAL_RCC_OscConfig+0x98>
 8001ae2:	4b7b      	ldr	r3, [pc, #492]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a7a      	ldr	r2, [pc, #488]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	4b78      	ldr	r3, [pc, #480]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a77      	ldr	r2, [pc, #476]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	e01d      	b.n	8001b38 <HAL_RCC_OscConfig+0xd4>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b04:	d10c      	bne.n	8001b20 <HAL_RCC_OscConfig+0xbc>
 8001b06:	4b72      	ldr	r3, [pc, #456]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a71      	ldr	r2, [pc, #452]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	4b6f      	ldr	r3, [pc, #444]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a6e      	ldr	r2, [pc, #440]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e00b      	b.n	8001b38 <HAL_RCC_OscConfig+0xd4>
 8001b20:	4b6b      	ldr	r3, [pc, #428]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a6a      	ldr	r2, [pc, #424]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	4b68      	ldr	r3, [pc, #416]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a67      	ldr	r2, [pc, #412]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d013      	beq.n	8001b68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7ff fcb6 	bl	80014b0 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b48:	f7ff fcb2 	bl	80014b0 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b64      	cmp	r3, #100	; 0x64
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e200      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	4b5d      	ldr	r3, [pc, #372]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f0      	beq.n	8001b48 <HAL_RCC_OscConfig+0xe4>
 8001b66:	e014      	b.n	8001b92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b68:	f7ff fca2 	bl	80014b0 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b70:	f7ff fc9e 	bl	80014b0 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b64      	cmp	r3, #100	; 0x64
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e1ec      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b82:	4b53      	ldr	r3, [pc, #332]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x10c>
 8001b8e:	e000      	b.n	8001b92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d063      	beq.n	8001c66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b9e:	4b4c      	ldr	r3, [pc, #304]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00b      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001baa:	4b49      	ldr	r3, [pc, #292]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d11c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x18c>
 8001bb6:	4b46      	ldr	r3, [pc, #280]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d116      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc2:	4b43      	ldr	r3, [pc, #268]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d005      	beq.n	8001bda <HAL_RCC_OscConfig+0x176>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d001      	beq.n	8001bda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e1c0      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bda:	4b3d      	ldr	r3, [pc, #244]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4939      	ldr	r1, [pc, #228]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bee:	e03a      	b.n	8001c66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d020      	beq.n	8001c3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf8:	4b36      	ldr	r3, [pc, #216]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7ff fc57 	bl	80014b0 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c06:	f7ff fc53 	bl	80014b0 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e1a1      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c18:	4b2d      	ldr	r3, [pc, #180]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c24:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	4927      	ldr	r1, [pc, #156]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	600b      	str	r3, [r1, #0]
 8001c38:	e015      	b.n	8001c66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3a:	4b26      	ldr	r3, [pc, #152]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7ff fc36 	bl	80014b0 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c48:	f7ff fc32 	bl	80014b0 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e180      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5a:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d03a      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d019      	beq.n	8001cae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c7a:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c80:	f7ff fc16 	bl	80014b0 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c88:	f7ff fc12 	bl	80014b0 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e160      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	f000 faf4 	bl	8002294 <RCC_Delay>
 8001cac:	e01c      	b.n	8001ce8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb4:	f7ff fbfc 	bl	80014b0 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cba:	e00f      	b.n	8001cdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cbc:	f7ff fbf8 	bl	80014b0 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d908      	bls.n	8001cdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e146      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	42420000 	.word	0x42420000
 8001cd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cdc:	4b92      	ldr	r3, [pc, #584]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1e9      	bne.n	8001cbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 80a6 	beq.w	8001e42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfa:	4b8b      	ldr	r3, [pc, #556]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10d      	bne.n	8001d22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	4b88      	ldr	r3, [pc, #544]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	4a87      	ldr	r2, [pc, #540]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d10:	61d3      	str	r3, [r2, #28]
 8001d12:	4b85      	ldr	r3, [pc, #532]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d22:	4b82      	ldr	r3, [pc, #520]	; (8001f2c <HAL_RCC_OscConfig+0x4c8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d118      	bne.n	8001d60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d2e:	4b7f      	ldr	r3, [pc, #508]	; (8001f2c <HAL_RCC_OscConfig+0x4c8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a7e      	ldr	r2, [pc, #504]	; (8001f2c <HAL_RCC_OscConfig+0x4c8>)
 8001d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d3a:	f7ff fbb9 	bl	80014b0 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d42:	f7ff fbb5 	bl	80014b0 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b64      	cmp	r3, #100	; 0x64
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e103      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	4b75      	ldr	r3, [pc, #468]	; (8001f2c <HAL_RCC_OscConfig+0x4c8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d106      	bne.n	8001d76 <HAL_RCC_OscConfig+0x312>
 8001d68:	4b6f      	ldr	r3, [pc, #444]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	4a6e      	ldr	r2, [pc, #440]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6213      	str	r3, [r2, #32]
 8001d74:	e02d      	b.n	8001dd2 <HAL_RCC_OscConfig+0x36e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x334>
 8001d7e:	4b6a      	ldr	r3, [pc, #424]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	4a69      	ldr	r2, [pc, #420]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	f023 0301 	bic.w	r3, r3, #1
 8001d88:	6213      	str	r3, [r2, #32]
 8001d8a:	4b67      	ldr	r3, [pc, #412]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	4a66      	ldr	r2, [pc, #408]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d90:	f023 0304 	bic.w	r3, r3, #4
 8001d94:	6213      	str	r3, [r2, #32]
 8001d96:	e01c      	b.n	8001dd2 <HAL_RCC_OscConfig+0x36e>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b05      	cmp	r3, #5
 8001d9e:	d10c      	bne.n	8001dba <HAL_RCC_OscConfig+0x356>
 8001da0:	4b61      	ldr	r3, [pc, #388]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4a60      	ldr	r2, [pc, #384]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	6213      	str	r3, [r2, #32]
 8001dac:	4b5e      	ldr	r3, [pc, #376]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	4a5d      	ldr	r2, [pc, #372]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6213      	str	r3, [r2, #32]
 8001db8:	e00b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x36e>
 8001dba:	4b5b      	ldr	r3, [pc, #364]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	4a5a      	ldr	r2, [pc, #360]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	f023 0301 	bic.w	r3, r3, #1
 8001dc4:	6213      	str	r3, [r2, #32]
 8001dc6:	4b58      	ldr	r3, [pc, #352]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	4a57      	ldr	r2, [pc, #348]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dcc:	f023 0304 	bic.w	r3, r3, #4
 8001dd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d015      	beq.n	8001e06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dda:	f7ff fb69 	bl	80014b0 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de0:	e00a      	b.n	8001df8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de2:	f7ff fb65 	bl	80014b0 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e0b1      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df8:	4b4b      	ldr	r3, [pc, #300]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0ee      	beq.n	8001de2 <HAL_RCC_OscConfig+0x37e>
 8001e04:	e014      	b.n	8001e30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e06:	f7ff fb53 	bl	80014b0 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e0c:	e00a      	b.n	8001e24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0e:	f7ff fb4f 	bl	80014b0 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e09b      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e24:	4b40      	ldr	r3, [pc, #256]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1ee      	bne.n	8001e0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d105      	bne.n	8001e42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e36:	4b3c      	ldr	r3, [pc, #240]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	4a3b      	ldr	r2, [pc, #236]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8087 	beq.w	8001f5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e4c:	4b36      	ldr	r3, [pc, #216]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d061      	beq.n	8001f1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d146      	bne.n	8001eee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e60:	4b33      	ldr	r3, [pc, #204]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e66:	f7ff fb23 	bl	80014b0 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6e:	f7ff fb1f 	bl	80014b0 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e06d      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e80:	4b29      	ldr	r3, [pc, #164]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f0      	bne.n	8001e6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e94:	d108      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e96:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	4921      	ldr	r1, [pc, #132]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea8:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a19      	ldr	r1, [r3, #32]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	430b      	orrs	r3, r1
 8001eba:	491b      	ldr	r1, [pc, #108]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec0:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec6:	f7ff faf3 	bl	80014b0 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ece:	f7ff faef 	bl	80014b0 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e03d      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_OscConfig+0x46a>
 8001eec:	e035      	b.n	8001f5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eee:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7ff fadc 	bl	80014b0 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efc:	f7ff fad8 	bl	80014b0 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e026      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x498>
 8001f1a:	e01e      	b.n	8001f5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d107      	bne.n	8001f34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e019      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40007000 	.word	0x40007000
 8001f30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_RCC_OscConfig+0x500>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d106      	bne.n	8001f56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d001      	beq.n	8001f5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40021000 	.word	0x40021000

08001f68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e0d0      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b6a      	ldr	r3, [pc, #424]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d910      	bls.n	8001fac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b67      	ldr	r3, [pc, #412]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 0207 	bic.w	r2, r3, #7
 8001f92:	4965      	ldr	r1, [pc, #404]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9a:	4b63      	ldr	r3, [pc, #396]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0b8      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d020      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc4:	4b59      	ldr	r3, [pc, #356]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	4a58      	ldr	r2, [pc, #352]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fdc:	4b53      	ldr	r3, [pc, #332]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	4a52      	ldr	r2, [pc, #328]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fe6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe8:	4b50      	ldr	r3, [pc, #320]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	494d      	ldr	r1, [pc, #308]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d040      	beq.n	8002088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d107      	bne.n	800201e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200e:	4b47      	ldr	r3, [pc, #284]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d115      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e07f      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d107      	bne.n	8002036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002026:	4b41      	ldr	r3, [pc, #260]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d109      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e073      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002036:	4b3d      	ldr	r3, [pc, #244]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e06b      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002046:	4b39      	ldr	r3, [pc, #228]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f023 0203 	bic.w	r2, r3, #3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	4936      	ldr	r1, [pc, #216]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002058:	f7ff fa2a 	bl	80014b0 <HAL_GetTick>
 800205c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205e:	e00a      	b.n	8002076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002060:	f7ff fa26 	bl	80014b0 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	f241 3288 	movw	r2, #5000	; 0x1388
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e053      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002076:	4b2d      	ldr	r3, [pc, #180]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 020c 	and.w	r2, r3, #12
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	429a      	cmp	r2, r3
 8002086:	d1eb      	bne.n	8002060 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002088:	4b27      	ldr	r3, [pc, #156]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d210      	bcs.n	80020b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002096:	4b24      	ldr	r3, [pc, #144]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 0207 	bic.w	r2, r3, #7
 800209e:	4922      	ldr	r1, [pc, #136]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b20      	ldr	r3, [pc, #128]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e032      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4916      	ldr	r1, [pc, #88]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d009      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020e2:	4b12      	ldr	r3, [pc, #72]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	490e      	ldr	r1, [pc, #56]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020f6:	f000 f821 	bl	800213c <HAL_RCC_GetSysClockFreq>
 80020fa:	4602      	mov	r2, r0
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	490a      	ldr	r1, [pc, #40]	; (8002130 <HAL_RCC_ClockConfig+0x1c8>)
 8002108:	5ccb      	ldrb	r3, [r1, r3]
 800210a:	fa22 f303 	lsr.w	r3, r2, r3
 800210e:	4a09      	ldr	r2, [pc, #36]	; (8002134 <HAL_RCC_ClockConfig+0x1cc>)
 8002110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <HAL_RCC_ClockConfig+0x1d0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff f86c 	bl	80011f4 <HAL_InitTick>

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40022000 	.word	0x40022000
 800212c:	40021000 	.word	0x40021000
 8002130:	08005650 	.word	0x08005650
 8002134:	20000000 	.word	0x20000000
 8002138:	20000004 	.word	0x20000004

0800213c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800213c:	b490      	push	{r4, r7}
 800213e:	b08a      	sub	sp, #40	; 0x28
 8002140:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002142:	4b29      	ldr	r3, [pc, #164]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002144:	1d3c      	adds	r4, r7, #4
 8002146:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002148:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800214c:	f240 2301 	movw	r3, #513	; 0x201
 8002150:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	2300      	movs	r3, #0
 8002158:	61bb      	str	r3, [r7, #24]
 800215a:	2300      	movs	r3, #0
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002162:	2300      	movs	r3, #0
 8002164:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002166:	4b21      	ldr	r3, [pc, #132]	; (80021ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b04      	cmp	r3, #4
 8002174:	d002      	beq.n	800217c <HAL_RCC_GetSysClockFreq+0x40>
 8002176:	2b08      	cmp	r3, #8
 8002178:	d003      	beq.n	8002182 <HAL_RCC_GetSysClockFreq+0x46>
 800217a:	e02b      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800217c:	4b1c      	ldr	r3, [pc, #112]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800217e:	623b      	str	r3, [r7, #32]
      break;
 8002180:	e02b      	b.n	80021da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	0c9b      	lsrs	r3, r3, #18
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	3328      	adds	r3, #40	; 0x28
 800218c:	443b      	add	r3, r7
 800218e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002192:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d012      	beq.n	80021c4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800219e:	4b13      	ldr	r3, [pc, #76]	; (80021ec <HAL_RCC_GetSysClockFreq+0xb0>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	0c5b      	lsrs	r3, r3, #17
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	3328      	adds	r3, #40	; 0x28
 80021aa:	443b      	add	r3, r7
 80021ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	4a0e      	ldr	r2, [pc, #56]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021b6:	fb03 f202 	mul.w	r2, r3, r2
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
 80021c2:	e004      	b.n	80021ce <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	4a0b      	ldr	r2, [pc, #44]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021c8:	fb02 f303 	mul.w	r3, r2, r3
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	623b      	str	r3, [r7, #32]
      break;
 80021d2:	e002      	b.n	80021da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021d6:	623b      	str	r3, [r7, #32]
      break;
 80021d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021da:	6a3b      	ldr	r3, [r7, #32]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3728      	adds	r7, #40	; 0x28
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc90      	pop	{r4, r7}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	080055bc 	.word	0x080055bc
 80021ec:	40021000 	.word	0x40021000
 80021f0:	007a1200 	.word	0x007a1200
 80021f4:	003d0900 	.word	0x003d0900

080021f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021fc:	4b02      	ldr	r3, [pc, #8]	; (8002208 <HAL_RCC_GetHCLKFreq+0x10>)
 80021fe:	681b      	ldr	r3, [r3, #0]
}
 8002200:	4618      	mov	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr
 8002208:	20000000 	.word	0x20000000

0800220c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002210:	f7ff fff2 	bl	80021f8 <HAL_RCC_GetHCLKFreq>
 8002214:	4602      	mov	r2, r0
 8002216:	4b05      	ldr	r3, [pc, #20]	; (800222c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	0a1b      	lsrs	r3, r3, #8
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	4903      	ldr	r1, [pc, #12]	; (8002230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002222:	5ccb      	ldrb	r3, [r1, r3]
 8002224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002228:	4618      	mov	r0, r3
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000
 8002230:	08005660 	.word	0x08005660

08002234 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	220f      	movs	r2, #15
 8002242:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <HAL_RCC_GetClockConfig+0x58>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 0203 	and.w	r2, r3, #3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002250:	4b0e      	ldr	r3, [pc, #56]	; (800228c <HAL_RCC_GetClockConfig+0x58>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800225c:	4b0b      	ldr	r3, [pc, #44]	; (800228c <HAL_RCC_GetClockConfig+0x58>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002268:	4b08      	ldr	r3, [pc, #32]	; (800228c <HAL_RCC_GetClockConfig+0x58>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	08db      	lsrs	r3, r3, #3
 800226e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_RCC_GetClockConfig+0x5c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0207 	and.w	r2, r3, #7
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr
 800228c:	40021000 	.word	0x40021000
 8002290:	40022000 	.word	0x40022000

08002294 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <RCC_Delay+0x34>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <RCC_Delay+0x38>)
 80022a2:	fba2 2303 	umull	r2, r3, r2, r3
 80022a6:	0a5b      	lsrs	r3, r3, #9
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	fb02 f303 	mul.w	r3, r2, r3
 80022ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022b0:	bf00      	nop
  }
  while (Delay --);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1e5a      	subs	r2, r3, #1
 80022b6:	60fa      	str	r2, [r7, #12]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1f9      	bne.n	80022b0 <RCC_Delay+0x1c>
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr
 80022c8:	20000000 	.word	0x20000000
 80022cc:	10624dd3 	.word	0x10624dd3

080022d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e041      	b.n	8002366 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d106      	bne.n	80022fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff f86e 	bl	80013d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2202      	movs	r2, #2
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3304      	adds	r3, #4
 800230c:	4619      	mov	r1, r3
 800230e:	4610      	mov	r0, r2
 8002310:	f000 faba 	bl	8002888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b01      	cmp	r3, #1
 8002382:	d001      	beq.n	8002388 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e032      	b.n	80023ee <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a18      	ldr	r2, [pc, #96]	; (80023f8 <HAL_TIM_Base_Start+0x88>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d00e      	beq.n	80023b8 <HAL_TIM_Base_Start+0x48>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a2:	d009      	beq.n	80023b8 <HAL_TIM_Base_Start+0x48>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a14      	ldr	r2, [pc, #80]	; (80023fc <HAL_TIM_Base_Start+0x8c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d004      	beq.n	80023b8 <HAL_TIM_Base_Start+0x48>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a13      	ldr	r2, [pc, #76]	; (8002400 <HAL_TIM_Base_Start+0x90>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d111      	bne.n	80023dc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2b06      	cmp	r3, #6
 80023c8:	d010      	beq.n	80023ec <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f042 0201 	orr.w	r2, r2, #1
 80023d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023da:	e007      	b.n	80023ec <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr
 80023f8:	40012c00 	.word	0x40012c00
 80023fc:	40000400 	.word	0x40000400
 8002400:	40000800 	.word	0x40000800

08002404 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b01      	cmp	r3, #1
 8002416:	d001      	beq.n	800241c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e03a      	b.n	8002492 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2202      	movs	r2, #2
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0201 	orr.w	r2, r2, #1
 8002432:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a18      	ldr	r2, [pc, #96]	; (800249c <HAL_TIM_Base_Start_IT+0x98>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d00e      	beq.n	800245c <HAL_TIM_Base_Start_IT+0x58>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002446:	d009      	beq.n	800245c <HAL_TIM_Base_Start_IT+0x58>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a14      	ldr	r2, [pc, #80]	; (80024a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d004      	beq.n	800245c <HAL_TIM_Base_Start_IT+0x58>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a13      	ldr	r2, [pc, #76]	; (80024a4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d111      	bne.n	8002480 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b06      	cmp	r3, #6
 800246c:	d010      	beq.n	8002490 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f042 0201 	orr.w	r2, r2, #1
 800247c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800247e:	e007      	b.n	8002490 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0201 	orr.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr
 800249c:	40012c00 	.word	0x40012c00
 80024a0:	40000400 	.word	0x40000400
 80024a4:	40000800 	.word	0x40000800

080024a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d122      	bne.n	8002504 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d11b      	bne.n	8002504 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f06f 0202 	mvn.w	r2, #2
 80024d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f9b1 	bl	8002852 <HAL_TIM_IC_CaptureCallback>
 80024f0:	e005      	b.n	80024fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f9a4 	bl	8002840 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f9b3 	bl	8002864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	2b04      	cmp	r3, #4
 8002510:	d122      	bne.n	8002558 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b04      	cmp	r3, #4
 800251e:	d11b      	bne.n	8002558 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f06f 0204 	mvn.w	r2, #4
 8002528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2202      	movs	r2, #2
 800252e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f987 	bl	8002852 <HAL_TIM_IC_CaptureCallback>
 8002544:	e005      	b.n	8002552 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f97a 	bl	8002840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 f989 	bl	8002864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b08      	cmp	r3, #8
 8002564:	d122      	bne.n	80025ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b08      	cmp	r3, #8
 8002572:	d11b      	bne.n	80025ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f06f 0208 	mvn.w	r2, #8
 800257c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2204      	movs	r2, #4
 8002582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f95d 	bl	8002852 <HAL_TIM_IC_CaptureCallback>
 8002598:	e005      	b.n	80025a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f950 	bl	8002840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f95f 	bl	8002864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	2b10      	cmp	r3, #16
 80025b8:	d122      	bne.n	8002600 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f003 0310 	and.w	r3, r3, #16
 80025c4:	2b10      	cmp	r3, #16
 80025c6:	d11b      	bne.n	8002600 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f06f 0210 	mvn.w	r2, #16
 80025d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2208      	movs	r2, #8
 80025d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f933 	bl	8002852 <HAL_TIM_IC_CaptureCallback>
 80025ec:	e005      	b.n	80025fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f926 	bl	8002840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f935 	bl	8002864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b01      	cmp	r3, #1
 800260c:	d10e      	bne.n	800262c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b01      	cmp	r3, #1
 800261a:	d107      	bne.n	800262c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f06f 0201 	mvn.w	r2, #1
 8002624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7fe fb17 	bl	8000c5a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002636:	2b80      	cmp	r3, #128	; 0x80
 8002638:	d10e      	bne.n	8002658 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002644:	2b80      	cmp	r3, #128	; 0x80
 8002646:	d107      	bne.n	8002658 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 fa77 	bl	8002b46 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002662:	2b40      	cmp	r3, #64	; 0x40
 8002664:	d10e      	bne.n	8002684 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002670:	2b40      	cmp	r3, #64	; 0x40
 8002672:	d107      	bne.n	8002684 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800267c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f8f9 	bl	8002876 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	f003 0320 	and.w	r3, r3, #32
 800268e:	2b20      	cmp	r3, #32
 8002690:	d10e      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f003 0320 	and.w	r3, r3, #32
 800269c:	2b20      	cmp	r3, #32
 800269e:	d107      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f06f 0220 	mvn.w	r2, #32
 80026a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 fa42 	bl	8002b34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026b0:	bf00      	nop
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <HAL_TIM_ConfigClockSource+0x18>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e0b3      	b.n	8002838 <HAL_TIM_ConfigClockSource+0x180>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002708:	d03e      	beq.n	8002788 <HAL_TIM_ConfigClockSource+0xd0>
 800270a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800270e:	f200 8087 	bhi.w	8002820 <HAL_TIM_ConfigClockSource+0x168>
 8002712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002716:	f000 8085 	beq.w	8002824 <HAL_TIM_ConfigClockSource+0x16c>
 800271a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800271e:	d87f      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x168>
 8002720:	2b70      	cmp	r3, #112	; 0x70
 8002722:	d01a      	beq.n	800275a <HAL_TIM_ConfigClockSource+0xa2>
 8002724:	2b70      	cmp	r3, #112	; 0x70
 8002726:	d87b      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x168>
 8002728:	2b60      	cmp	r3, #96	; 0x60
 800272a:	d050      	beq.n	80027ce <HAL_TIM_ConfigClockSource+0x116>
 800272c:	2b60      	cmp	r3, #96	; 0x60
 800272e:	d877      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x168>
 8002730:	2b50      	cmp	r3, #80	; 0x50
 8002732:	d03c      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0xf6>
 8002734:	2b50      	cmp	r3, #80	; 0x50
 8002736:	d873      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x168>
 8002738:	2b40      	cmp	r3, #64	; 0x40
 800273a:	d058      	beq.n	80027ee <HAL_TIM_ConfigClockSource+0x136>
 800273c:	2b40      	cmp	r3, #64	; 0x40
 800273e:	d86f      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x168>
 8002740:	2b30      	cmp	r3, #48	; 0x30
 8002742:	d064      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x156>
 8002744:	2b30      	cmp	r3, #48	; 0x30
 8002746:	d86b      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x168>
 8002748:	2b20      	cmp	r3, #32
 800274a:	d060      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x156>
 800274c:	2b20      	cmp	r3, #32
 800274e:	d867      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x168>
 8002750:	2b00      	cmp	r3, #0
 8002752:	d05c      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x156>
 8002754:	2b10      	cmp	r3, #16
 8002756:	d05a      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002758:	e062      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	6899      	ldr	r1, [r3, #8]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f000 f966 	bl	8002a3a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800277c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	609a      	str	r2, [r3, #8]
      break;
 8002786:	e04e      	b.n	8002826 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6818      	ldr	r0, [r3, #0]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	6899      	ldr	r1, [r3, #8]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f000 f94f 	bl	8002a3a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027aa:	609a      	str	r2, [r3, #8]
      break;
 80027ac:	e03b      	b.n	8002826 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	6859      	ldr	r1, [r3, #4]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	461a      	mov	r2, r3
 80027bc:	f000 f8c6 	bl	800294c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2150      	movs	r1, #80	; 0x50
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 f91d 	bl	8002a06 <TIM_ITRx_SetConfig>
      break;
 80027cc:	e02b      	b.n	8002826 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	6859      	ldr	r1, [r3, #4]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	461a      	mov	r2, r3
 80027dc:	f000 f8e4 	bl	80029a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2160      	movs	r1, #96	; 0x60
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f90d 	bl	8002a06 <TIM_ITRx_SetConfig>
      break;
 80027ec:	e01b      	b.n	8002826 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6818      	ldr	r0, [r3, #0]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	6859      	ldr	r1, [r3, #4]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	461a      	mov	r2, r3
 80027fc:	f000 f8a6 	bl	800294c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2140      	movs	r1, #64	; 0x40
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f8fd 	bl	8002a06 <TIM_ITRx_SetConfig>
      break;
 800280c:	e00b      	b.n	8002826 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4619      	mov	r1, r3
 8002818:	4610      	mov	r0, r2
 800281a:	f000 f8f4 	bl	8002a06 <TIM_ITRx_SetConfig>
        break;
 800281e:	e002      	b.n	8002826 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002820:	bf00      	nop
 8002822:	e000      	b.n	8002826 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002824:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr

08002852 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr

08002876 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a29      	ldr	r2, [pc, #164]	; (8002940 <TIM_Base_SetConfig+0xb8>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d00b      	beq.n	80028b8 <TIM_Base_SetConfig+0x30>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a6:	d007      	beq.n	80028b8 <TIM_Base_SetConfig+0x30>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a26      	ldr	r2, [pc, #152]	; (8002944 <TIM_Base_SetConfig+0xbc>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d003      	beq.n	80028b8 <TIM_Base_SetConfig+0x30>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a25      	ldr	r2, [pc, #148]	; (8002948 <TIM_Base_SetConfig+0xc0>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d108      	bne.n	80028ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a1c      	ldr	r2, [pc, #112]	; (8002940 <TIM_Base_SetConfig+0xb8>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d00b      	beq.n	80028ea <TIM_Base_SetConfig+0x62>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d8:	d007      	beq.n	80028ea <TIM_Base_SetConfig+0x62>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a19      	ldr	r2, [pc, #100]	; (8002944 <TIM_Base_SetConfig+0xbc>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d003      	beq.n	80028ea <TIM_Base_SetConfig+0x62>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a18      	ldr	r2, [pc, #96]	; (8002948 <TIM_Base_SetConfig+0xc0>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d108      	bne.n	80028fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	4313      	orrs	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a07      	ldr	r2, [pc, #28]	; (8002940 <TIM_Base_SetConfig+0xb8>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d103      	bne.n	8002930 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	615a      	str	r2, [r3, #20]
}
 8002936:	bf00      	nop
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr
 8002940:	40012c00 	.word	0x40012c00
 8002944:	40000400 	.word	0x40000400
 8002948:	40000800 	.word	0x40000800

0800294c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	f023 0201 	bic.w	r2, r3, #1
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4313      	orrs	r3, r2
 8002980:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f023 030a 	bic.w	r3, r3, #10
 8002988:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	4313      	orrs	r3, r2
 8002990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	621a      	str	r2, [r3, #32]
}
 800299e:	bf00      	nop
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	f023 0210 	bic.w	r2, r3, #16
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	031b      	lsls	r3, r3, #12
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	4313      	orrs	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	621a      	str	r2, [r3, #32]
}
 80029fc:	bf00      	nop
 80029fe:	371c      	adds	r7, #28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr

08002a06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b085      	sub	sp, #20
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f043 0307 	orr.w	r3, r3, #7
 8002a28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	609a      	str	r2, [r3, #8]
}
 8002a30:	bf00      	nop
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b087      	sub	sp, #28
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	60f8      	str	r0, [r7, #12]
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	607a      	str	r2, [r7, #4]
 8002a46:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a54:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	021a      	lsls	r2, r3, #8
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	609a      	str	r2, [r3, #8]
}
 8002a6e:	bf00      	nop
 8002a70:	371c      	adds	r7, #28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d101      	bne.n	8002a90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e046      	b.n	8002b1e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a16      	ldr	r2, [pc, #88]	; (8002b28 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d00e      	beq.n	8002af2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002adc:	d009      	beq.n	8002af2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a12      	ldr	r2, [pc, #72]	; (8002b2c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d004      	beq.n	8002af2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a10      	ldr	r2, [pc, #64]	; (8002b30 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d10c      	bne.n	8002b0c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002af8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr
 8002b28:	40012c00 	.word	0x40012c00
 8002b2c:	40000400 	.word	0x40000400
 8002b30:	40000800 	.word	0x40000800

08002b34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b5e:	f3ef 8305 	mrs	r3, IPSR
 8002b62:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b64:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10f      	bne.n	8002b8a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b6a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b6e:	607b      	str	r3, [r7, #4]
  return(result);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <osKernelInitialize+0x32>
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <osKernelInitialize+0x60>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d109      	bne.n	8002b92 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002b7e:	f3ef 8311 	mrs	r3, BASEPRI
 8002b82:	603b      	str	r3, [r7, #0]
  return(result);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002b8a:	f06f 0305 	mvn.w	r3, #5
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	e00c      	b.n	8002bac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002b92:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <osKernelInitialize+0x60>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d105      	bne.n	8002ba6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002b9a:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <osKernelInitialize+0x60>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	e002      	b.n	8002bac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8002baa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002bac:	68fb      	ldr	r3, [r7, #12]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr
 8002bb8:	20000128 	.word	0x20000128

08002bbc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bc2:	f3ef 8305 	mrs	r3, IPSR
 8002bc6:	60bb      	str	r3, [r7, #8]
  return(result);
 8002bc8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10f      	bne.n	8002bee <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bce:	f3ef 8310 	mrs	r3, PRIMASK
 8002bd2:	607b      	str	r3, [r7, #4]
  return(result);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d109      	bne.n	8002bee <osKernelStart+0x32>
 8002bda:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <osKernelStart+0x64>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d109      	bne.n	8002bf6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002be2:	f3ef 8311 	mrs	r3, BASEPRI
 8002be6:	603b      	str	r3, [r7, #0]
  return(result);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8002bee:	f06f 0305 	mvn.w	r3, #5
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	e00e      	b.n	8002c14 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002bf6:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <osKernelStart+0x64>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d107      	bne.n	8002c0e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002bfe:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <osKernelStart+0x64>)
 8002c00:	2202      	movs	r2, #2
 8002c02:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002c04:	f001 f878 	bl	8003cf8 <vTaskStartScheduler>
      stat = osOK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	e002      	b.n	8002c14 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c12:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002c14:	68fb      	ldr	r3, [r7, #12]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000128 	.word	0x20000128

08002c24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b092      	sub	sp, #72	; 0x48
 8002c28:	af04      	add	r7, sp, #16
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c34:	f3ef 8305 	mrs	r3, IPSR
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f040 8094 	bne.w	8002d6a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c42:	f3ef 8310 	mrs	r3, PRIMASK
 8002c46:	623b      	str	r3, [r7, #32]
  return(result);
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f040 808d 	bne.w	8002d6a <osThreadNew+0x146>
 8002c50:	4b48      	ldr	r3, [pc, #288]	; (8002d74 <osThreadNew+0x150>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d106      	bne.n	8002c66 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002c58:	f3ef 8311 	mrs	r3, BASEPRI
 8002c5c:	61fb      	str	r3, [r7, #28]
  return(result);
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f040 8082 	bne.w	8002d6a <osThreadNew+0x146>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d07e      	beq.n	8002d6a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002c6c:	2380      	movs	r3, #128	; 0x80
 8002c6e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002c70:	2318      	movs	r3, #24
 8002c72:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002c74:	2300      	movs	r3, #0
 8002c76:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002c78:	f107 031b 	add.w	r3, r7, #27
 8002c7c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c82:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d045      	beq.n	8002d16 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <osThreadNew+0x74>
        name = attr->name;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <osThreadNew+0x9a>
 8002cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cae:	2b38      	cmp	r3, #56	; 0x38
 8002cb0:	d805      	bhi.n	8002cbe <osThreadNew+0x9a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <osThreadNew+0x9e>
        return (NULL);
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	e054      	b.n	8002d6c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	089b      	lsrs	r3, r3, #2
 8002cd0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00e      	beq.n	8002cf8 <osThreadNew+0xd4>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	2b5b      	cmp	r3, #91	; 0x5b
 8002ce0:	d90a      	bls.n	8002cf8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d006      	beq.n	8002cf8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <osThreadNew+0xd4>
        mem = 1;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cf6:	e010      	b.n	8002d1a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10c      	bne.n	8002d1a <osThreadNew+0xf6>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d108      	bne.n	8002d1a <osThreadNew+0xf6>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d104      	bne.n	8002d1a <osThreadNew+0xf6>
          mem = 0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d14:	e001      	b.n	8002d1a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d110      	bne.n	8002d42 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d28:	9202      	str	r2, [sp, #8]
 8002d2a:	9301      	str	r3, [sp, #4]
 8002d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d34:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 fe12 	bl	8003960 <xTaskCreateStatic>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	617b      	str	r3, [r7, #20]
 8002d40:	e013      	b.n	8002d6a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d110      	bne.n	8002d6a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	f107 0314 	add.w	r3, r7, #20
 8002d50:	9301      	str	r3, [sp, #4]
 8002d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 fe5c 	bl	8003a18 <xTaskCreate>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d001      	beq.n	8002d6a <osThreadNew+0x146>
          hTask = NULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002d6a:	697b      	ldr	r3, [r7, #20]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3738      	adds	r7, #56	; 0x38
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20000128 	.word	0x20000128

08002d78 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d80:	f3ef 8305 	mrs	r3, IPSR
 8002d84:	613b      	str	r3, [r7, #16]
  return(result);
 8002d86:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10f      	bne.n	8002dac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d8c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d90:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d109      	bne.n	8002dac <osDelay+0x34>
 8002d98:	4b0d      	ldr	r3, [pc, #52]	; (8002dd0 <osDelay+0x58>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d109      	bne.n	8002db4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002da0:	f3ef 8311 	mrs	r3, BASEPRI
 8002da4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <osDelay+0x3c>
    stat = osErrorISR;
 8002dac:	f06f 0305 	mvn.w	r3, #5
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	e007      	b.n	8002dc4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 ff66 	bl	8003c90 <vTaskDelay>
    }
  }

  return (stat);
 8002dc4:	697b      	ldr	r3, [r7, #20]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20000128 	.word	0x20000128

08002dd4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4a06      	ldr	r2, [pc, #24]	; (8002dfc <vApplicationGetIdleTaskMemory+0x28>)
 8002de4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	4a05      	ldr	r2, [pc, #20]	; (8002e00 <vApplicationGetIdleTaskMemory+0x2c>)
 8002dea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2280      	movs	r2, #128	; 0x80
 8002df0:	601a      	str	r2, [r3, #0]
}
 8002df2:	bf00      	nop
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr
 8002dfc:	2000012c 	.word	0x2000012c
 8002e00:	20000188 	.word	0x20000188

08002e04 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	4a07      	ldr	r2, [pc, #28]	; (8002e30 <vApplicationGetTimerTaskMemory+0x2c>)
 8002e14:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	4a06      	ldr	r2, [pc, #24]	; (8002e34 <vApplicationGetTimerTaskMemory+0x30>)
 8002e1a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e22:	601a      	str	r2, [r3, #0]
}
 8002e24:	bf00      	nop
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	20000388 	.word	0x20000388
 8002e34:	200003e4 	.word	0x200003e4

08002e38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f103 0208 	add.w	r2, r3, #8
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f103 0208 	add.w	r2, r3, #8
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f103 0208 	add.w	r2, r3, #8
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr

08002e76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr

08002e8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b085      	sub	sp, #20
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
 8002e96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	601a      	str	r2, [r3, #0]
}
 8002eca:	bf00      	nop
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr

08002ed4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eea:	d103      	bne.n	8002ef4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	e00c      	b.n	8002f0e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3308      	adds	r3, #8
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	e002      	b.n	8002f02 <vListInsert+0x2e>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d2f6      	bcs.n	8002efc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	601a      	str	r2, [r3, #0]
}
 8002f3a:	bf00      	nop
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr

08002f44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6892      	ldr	r2, [r2, #8]
 8002f5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6852      	ldr	r2, [r2, #4]
 8002f64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d103      	bne.n	8002f78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	1e5a      	subs	r2, r3, #1
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr
	...

08002f98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10a      	bne.n	8002fc2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb0:	f383 8811 	msr	BASEPRI, r3
 8002fb4:	f3bf 8f6f 	isb	sy
 8002fb8:	f3bf 8f4f 	dsb	sy
 8002fbc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002fbe:	bf00      	nop
 8002fc0:	e7fe      	b.n	8002fc0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002fc2:	f001 ffcb 	bl	8004f5c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fce:	68f9      	ldr	r1, [r7, #12]
 8002fd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fd2:	fb01 f303 	mul.w	r3, r1, r3
 8002fd6:	441a      	add	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	68f9      	ldr	r1, [r7, #12]
 8002ff6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ff8:	fb01 f303 	mul.w	r3, r1, r3
 8002ffc:	441a      	add	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	22ff      	movs	r2, #255	; 0xff
 8003006:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	22ff      	movs	r2, #255	; 0xff
 800300e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d114      	bne.n	8003042 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d01a      	beq.n	8003056 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	3310      	adds	r3, #16
 8003024:	4618      	mov	r0, r3
 8003026:	f001 f8f1 	bl	800420c <xTaskRemoveFromEventList>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d012      	beq.n	8003056 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003030:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <xQueueGenericReset+0xcc>)
 8003032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	f3bf 8f4f 	dsb	sy
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	e009      	b.n	8003056 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	3310      	adds	r3, #16
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff fef6 	bl	8002e38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	3324      	adds	r3, #36	; 0x24
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff fef1 	bl	8002e38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003056:	f001 ffb1 	bl	8004fbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800305a:	2301      	movs	r3, #1
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	e000ed04 	.word	0xe000ed04

08003068 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003068:	b580      	push	{r7, lr}
 800306a:	b08e      	sub	sp, #56	; 0x38
 800306c:	af02      	add	r7, sp, #8
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
 8003074:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10a      	bne.n	8003092 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800307c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003080:	f383 8811 	msr	BASEPRI, r3
 8003084:	f3bf 8f6f 	isb	sy
 8003088:	f3bf 8f4f 	dsb	sy
 800308c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800308e:	bf00      	nop
 8003090:	e7fe      	b.n	8003090 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10a      	bne.n	80030ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309c:	f383 8811 	msr	BASEPRI, r3
 80030a0:	f3bf 8f6f 	isb	sy
 80030a4:	f3bf 8f4f 	dsb	sy
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80030aa:	bf00      	nop
 80030ac:	e7fe      	b.n	80030ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <xQueueGenericCreateStatic+0x52>
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <xQueueGenericCreateStatic+0x56>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <xQueueGenericCreateStatic+0x58>
 80030be:	2300      	movs	r3, #0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10a      	bne.n	80030da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80030c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c8:	f383 8811 	msr	BASEPRI, r3
 80030cc:	f3bf 8f6f 	isb	sy
 80030d0:	f3bf 8f4f 	dsb	sy
 80030d4:	623b      	str	r3, [r7, #32]
}
 80030d6:	bf00      	nop
 80030d8:	e7fe      	b.n	80030d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d102      	bne.n	80030e6 <xQueueGenericCreateStatic+0x7e>
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <xQueueGenericCreateStatic+0x82>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <xQueueGenericCreateStatic+0x84>
 80030ea:	2300      	movs	r3, #0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10a      	bne.n	8003106 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80030f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f4:	f383 8811 	msr	BASEPRI, r3
 80030f8:	f3bf 8f6f 	isb	sy
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	61fb      	str	r3, [r7, #28]
}
 8003102:	bf00      	nop
 8003104:	e7fe      	b.n	8003104 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003106:	2350      	movs	r3, #80	; 0x50
 8003108:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2b50      	cmp	r3, #80	; 0x50
 800310e:	d00a      	beq.n	8003126 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003114:	f383 8811 	msr	BASEPRI, r3
 8003118:	f3bf 8f6f 	isb	sy
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	61bb      	str	r3, [r7, #24]
}
 8003122:	bf00      	nop
 8003124:	e7fe      	b.n	8003124 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800312a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00d      	beq.n	800314c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003138:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800313c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	4613      	mov	r3, r2
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68b9      	ldr	r1, [r7, #8]
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f805 	bl	8003156 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800314c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800314e:	4618      	mov	r0, r3
 8003150:	3730      	adds	r7, #48	; 0x30
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b084      	sub	sp, #16
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	607a      	str	r2, [r7, #4]
 8003162:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d103      	bne.n	8003172 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	e002      	b.n	8003178 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003184:	2101      	movs	r1, #1
 8003186:	69b8      	ldr	r0, [r7, #24]
 8003188:	f7ff ff06 	bl	8002f98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	78fa      	ldrb	r2, [r7, #3]
 8003190:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003194:	bf00      	nop
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08e      	sub	sp, #56	; 0x38
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80031aa:	2300      	movs	r3, #0
 80031ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80031b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10a      	bne.n	80031ce <xQueueGenericSend+0x32>
	__asm volatile
 80031b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031bc:	f383 8811 	msr	BASEPRI, r3
 80031c0:	f3bf 8f6f 	isb	sy
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80031ca:	bf00      	nop
 80031cc:	e7fe      	b.n	80031cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d103      	bne.n	80031dc <xQueueGenericSend+0x40>
 80031d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <xQueueGenericSend+0x44>
 80031dc:	2301      	movs	r3, #1
 80031de:	e000      	b.n	80031e2 <xQueueGenericSend+0x46>
 80031e0:	2300      	movs	r3, #0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10a      	bne.n	80031fc <xQueueGenericSend+0x60>
	__asm volatile
 80031e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ea:	f383 8811 	msr	BASEPRI, r3
 80031ee:	f3bf 8f6f 	isb	sy
 80031f2:	f3bf 8f4f 	dsb	sy
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031f8:	bf00      	nop
 80031fa:	e7fe      	b.n	80031fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d103      	bne.n	800320a <xQueueGenericSend+0x6e>
 8003202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <xQueueGenericSend+0x72>
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <xQueueGenericSend+0x74>
 800320e:	2300      	movs	r3, #0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10a      	bne.n	800322a <xQueueGenericSend+0x8e>
	__asm volatile
 8003214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003218:	f383 8811 	msr	BASEPRI, r3
 800321c:	f3bf 8f6f 	isb	sy
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	623b      	str	r3, [r7, #32]
}
 8003226:	bf00      	nop
 8003228:	e7fe      	b.n	8003228 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800322a:	f001 f9b1 	bl	8004590 <xTaskGetSchedulerState>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d102      	bne.n	800323a <xQueueGenericSend+0x9e>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <xQueueGenericSend+0xa2>
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <xQueueGenericSend+0xa4>
 800323e:	2300      	movs	r3, #0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10a      	bne.n	800325a <xQueueGenericSend+0xbe>
	__asm volatile
 8003244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003248:	f383 8811 	msr	BASEPRI, r3
 800324c:	f3bf 8f6f 	isb	sy
 8003250:	f3bf 8f4f 	dsb	sy
 8003254:	61fb      	str	r3, [r7, #28]
}
 8003256:	bf00      	nop
 8003258:	e7fe      	b.n	8003258 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800325a:	f001 fe7f 	bl	8004f5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800325e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003266:	429a      	cmp	r2, r3
 8003268:	d302      	bcc.n	8003270 <xQueueGenericSend+0xd4>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d129      	bne.n	80032c4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	68b9      	ldr	r1, [r7, #8]
 8003274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003276:	f000 fa07 	bl	8003688 <prvCopyDataToQueue>
 800327a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800327c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	2b00      	cmp	r3, #0
 8003282:	d010      	beq.n	80032a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003286:	3324      	adds	r3, #36	; 0x24
 8003288:	4618      	mov	r0, r3
 800328a:	f000 ffbf 	bl	800420c <xTaskRemoveFromEventList>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d013      	beq.n	80032bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003294:	4b3f      	ldr	r3, [pc, #252]	; (8003394 <xQueueGenericSend+0x1f8>)
 8003296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	f3bf 8f4f 	dsb	sy
 80032a0:	f3bf 8f6f 	isb	sy
 80032a4:	e00a      	b.n	80032bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80032a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d007      	beq.n	80032bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80032ac:	4b39      	ldr	r3, [pc, #228]	; (8003394 <xQueueGenericSend+0x1f8>)
 80032ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80032bc:	f001 fe7e 	bl	8004fbc <vPortExitCritical>
				return pdPASS;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e063      	b.n	800338c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d103      	bne.n	80032d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032ca:	f001 fe77 	bl	8004fbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	e05c      	b.n	800338c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d106      	bne.n	80032e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032d8:	f107 0314 	add.w	r3, r7, #20
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 fff9 	bl	80042d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032e2:	2301      	movs	r3, #1
 80032e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032e6:	f001 fe69 	bl	8004fbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032ea:	f000 fd6b 	bl	8003dc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032ee:	f001 fe35 	bl	8004f5c <vPortEnterCritical>
 80032f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032f8:	b25b      	sxtb	r3, r3
 80032fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fe:	d103      	bne.n	8003308 <xQueueGenericSend+0x16c>
 8003300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800330e:	b25b      	sxtb	r3, r3
 8003310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003314:	d103      	bne.n	800331e <xQueueGenericSend+0x182>
 8003316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800331e:	f001 fe4d 	bl	8004fbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003322:	1d3a      	adds	r2, r7, #4
 8003324:	f107 0314 	add.w	r3, r7, #20
 8003328:	4611      	mov	r1, r2
 800332a:	4618      	mov	r0, r3
 800332c:	f000 ffe8 	bl	8004300 <xTaskCheckForTimeOut>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d124      	bne.n	8003380 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003336:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003338:	f000 fa9e 	bl	8003878 <prvIsQueueFull>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d018      	beq.n	8003374 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003344:	3310      	adds	r3, #16
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	4611      	mov	r1, r2
 800334a:	4618      	mov	r0, r3
 800334c:	f000 ff0e 	bl	800416c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003352:	f000 fa29 	bl	80037a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003356:	f000 fd43 	bl	8003de0 <xTaskResumeAll>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	f47f af7c 	bne.w	800325a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003362:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <xQueueGenericSend+0x1f8>)
 8003364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	f3bf 8f6f 	isb	sy
 8003372:	e772      	b.n	800325a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003376:	f000 fa17 	bl	80037a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800337a:	f000 fd31 	bl	8003de0 <xTaskResumeAll>
 800337e:	e76c      	b.n	800325a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003382:	f000 fa11 	bl	80037a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003386:	f000 fd2b 	bl	8003de0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800338a:	2300      	movs	r3, #0
		}
	}
}
 800338c:	4618      	mov	r0, r3
 800338e:	3738      	adds	r7, #56	; 0x38
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	e000ed04 	.word	0xe000ed04

08003398 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08e      	sub	sp, #56	; 0x38
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
 80033a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80033aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10a      	bne.n	80033c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80033b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b4:	f383 8811 	msr	BASEPRI, r3
 80033b8:	f3bf 8f6f 	isb	sy
 80033bc:	f3bf 8f4f 	dsb	sy
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80033c2:	bf00      	nop
 80033c4:	e7fe      	b.n	80033c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d103      	bne.n	80033d4 <xQueueGenericSendFromISR+0x3c>
 80033cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <xQueueGenericSendFromISR+0x40>
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <xQueueGenericSendFromISR+0x42>
 80033d8:	2300      	movs	r3, #0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10a      	bne.n	80033f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80033de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e2:	f383 8811 	msr	BASEPRI, r3
 80033e6:	f3bf 8f6f 	isb	sy
 80033ea:	f3bf 8f4f 	dsb	sy
 80033ee:	623b      	str	r3, [r7, #32]
}
 80033f0:	bf00      	nop
 80033f2:	e7fe      	b.n	80033f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d103      	bne.n	8003402 <xQueueGenericSendFromISR+0x6a>
 80033fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d101      	bne.n	8003406 <xQueueGenericSendFromISR+0x6e>
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <xQueueGenericSendFromISR+0x70>
 8003406:	2300      	movs	r3, #0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10a      	bne.n	8003422 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800340c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003410:	f383 8811 	msr	BASEPRI, r3
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	f3bf 8f4f 	dsb	sy
 800341c:	61fb      	str	r3, [r7, #28]
}
 800341e:	bf00      	nop
 8003420:	e7fe      	b.n	8003420 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003422:	f001 fe5d 	bl	80050e0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003426:	f3ef 8211 	mrs	r2, BASEPRI
 800342a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342e:	f383 8811 	msr	BASEPRI, r3
 8003432:	f3bf 8f6f 	isb	sy
 8003436:	f3bf 8f4f 	dsb	sy
 800343a:	61ba      	str	r2, [r7, #24]
 800343c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800343e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003440:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344a:	429a      	cmp	r2, r3
 800344c:	d302      	bcc.n	8003454 <xQueueGenericSendFromISR+0xbc>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2b02      	cmp	r3, #2
 8003452:	d12c      	bne.n	80034ae <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003456:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800345a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	68b9      	ldr	r1, [r7, #8]
 8003462:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003464:	f000 f910 	bl	8003688 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003468:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800346c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003470:	d112      	bne.n	8003498 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	2b00      	cmp	r3, #0
 8003478:	d016      	beq.n	80034a8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800347a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347c:	3324      	adds	r3, #36	; 0x24
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fec4 	bl	800420c <xTaskRemoveFromEventList>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00e      	beq.n	80034a8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00b      	beq.n	80034a8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	e007      	b.n	80034a8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003498:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800349c:	3301      	adds	r3, #1
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	b25a      	sxtb	r2, r3
 80034a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80034a8:	2301      	movs	r3, #1
 80034aa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80034ac:	e001      	b.n	80034b2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80034ae:	2300      	movs	r3, #0
 80034b0:	637b      	str	r3, [r7, #52]	; 0x34
 80034b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80034bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80034be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3738      	adds	r7, #56	; 0x38
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08c      	sub	sp, #48	; 0x30
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80034d4:	2300      	movs	r3, #0
 80034d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10a      	bne.n	80034f8 <xQueueReceive+0x30>
	__asm volatile
 80034e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e6:	f383 8811 	msr	BASEPRI, r3
 80034ea:	f3bf 8f6f 	isb	sy
 80034ee:	f3bf 8f4f 	dsb	sy
 80034f2:	623b      	str	r3, [r7, #32]
}
 80034f4:	bf00      	nop
 80034f6:	e7fe      	b.n	80034f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d103      	bne.n	8003506 <xQueueReceive+0x3e>
 80034fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <xQueueReceive+0x42>
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <xQueueReceive+0x44>
 800350a:	2300      	movs	r3, #0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10a      	bne.n	8003526 <xQueueReceive+0x5e>
	__asm volatile
 8003510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	61fb      	str	r3, [r7, #28]
}
 8003522:	bf00      	nop
 8003524:	e7fe      	b.n	8003524 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003526:	f001 f833 	bl	8004590 <xTaskGetSchedulerState>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <xQueueReceive+0x6e>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <xQueueReceive+0x72>
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <xQueueReceive+0x74>
 800353a:	2300      	movs	r3, #0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10a      	bne.n	8003556 <xQueueReceive+0x8e>
	__asm volatile
 8003540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003544:	f383 8811 	msr	BASEPRI, r3
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	61bb      	str	r3, [r7, #24]
}
 8003552:	bf00      	nop
 8003554:	e7fe      	b.n	8003554 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003556:	f001 fd01 	bl	8004f5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800355a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	2b00      	cmp	r3, #0
 8003564:	d01f      	beq.n	80035a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003566:	68b9      	ldr	r1, [r7, #8]
 8003568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800356a:	f000 f8f7 	bl	800375c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	1e5a      	subs	r2, r3, #1
 8003572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003574:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00f      	beq.n	800359e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800357e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003580:	3310      	adds	r3, #16
 8003582:	4618      	mov	r0, r3
 8003584:	f000 fe42 	bl	800420c <xTaskRemoveFromEventList>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d007      	beq.n	800359e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800358e:	4b3d      	ldr	r3, [pc, #244]	; (8003684 <xQueueReceive+0x1bc>)
 8003590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800359e:	f001 fd0d 	bl	8004fbc <vPortExitCritical>
				return pdPASS;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e069      	b.n	800367a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d103      	bne.n	80035b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80035ac:	f001 fd06 	bl	8004fbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80035b0:	2300      	movs	r3, #0
 80035b2:	e062      	b.n	800367a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d106      	bne.n	80035c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035ba:	f107 0310 	add.w	r3, r7, #16
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fe88 	bl	80042d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035c4:	2301      	movs	r3, #1
 80035c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035c8:	f001 fcf8 	bl	8004fbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035cc:	f000 fbfa 	bl	8003dc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035d0:	f001 fcc4 	bl	8004f5c <vPortEnterCritical>
 80035d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035da:	b25b      	sxtb	r3, r3
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e0:	d103      	bne.n	80035ea <xQueueReceive+0x122>
 80035e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035f0:	b25b      	sxtb	r3, r3
 80035f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f6:	d103      	bne.n	8003600 <xQueueReceive+0x138>
 80035f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003600:	f001 fcdc 	bl	8004fbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003604:	1d3a      	adds	r2, r7, #4
 8003606:	f107 0310 	add.w	r3, r7, #16
 800360a:	4611      	mov	r1, r2
 800360c:	4618      	mov	r0, r3
 800360e:	f000 fe77 	bl	8004300 <xTaskCheckForTimeOut>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d123      	bne.n	8003660 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800361a:	f000 f917 	bl	800384c <prvIsQueueEmpty>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d017      	beq.n	8003654 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003626:	3324      	adds	r3, #36	; 0x24
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	4611      	mov	r1, r2
 800362c:	4618      	mov	r0, r3
 800362e:	f000 fd9d 	bl	800416c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003634:	f000 f8b8 	bl	80037a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003638:	f000 fbd2 	bl	8003de0 <xTaskResumeAll>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d189      	bne.n	8003556 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003642:	4b10      	ldr	r3, [pc, #64]	; (8003684 <xQueueReceive+0x1bc>)
 8003644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	f3bf 8f4f 	dsb	sy
 800364e:	f3bf 8f6f 	isb	sy
 8003652:	e780      	b.n	8003556 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003656:	f000 f8a7 	bl	80037a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800365a:	f000 fbc1 	bl	8003de0 <xTaskResumeAll>
 800365e:	e77a      	b.n	8003556 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003662:	f000 f8a1 	bl	80037a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003666:	f000 fbbb 	bl	8003de0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800366a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800366c:	f000 f8ee 	bl	800384c <prvIsQueueEmpty>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	f43f af6f 	beq.w	8003556 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003678:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800367a:	4618      	mov	r0, r3
 800367c:	3730      	adds	r7, #48	; 0x30
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	e000ed04 	.word	0xe000ed04

08003688 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10d      	bne.n	80036c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d14d      	bne.n	800374a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 ff8a 	bl	80045cc <xTaskPriorityDisinherit>
 80036b8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	605a      	str	r2, [r3, #4]
 80036c0:	e043      	b.n	800374a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d119      	bne.n	80036fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6898      	ldr	r0, [r3, #8]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	461a      	mov	r2, r3
 80036d2:	68b9      	ldr	r1, [r7, #8]
 80036d4:	f001 ff3e 	bl	8005554 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	441a      	add	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d32b      	bcc.n	800374a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	609a      	str	r2, [r3, #8]
 80036fa:	e026      	b.n	800374a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	68d8      	ldr	r0, [r3, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	461a      	mov	r2, r3
 8003706:	68b9      	ldr	r1, [r7, #8]
 8003708:	f001 ff24 	bl	8005554 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003714:	425b      	negs	r3, r3
 8003716:	441a      	add	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d207      	bcs.n	8003738 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	425b      	negs	r3, r3
 8003732:	441a      	add	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d105      	bne.n	800374a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	3b01      	subs	r3, #1
 8003748:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003752:	697b      	ldr	r3, [r7, #20]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3718      	adds	r7, #24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	2b00      	cmp	r3, #0
 800376c:	d018      	beq.n	80037a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	441a      	add	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	429a      	cmp	r2, r3
 8003786:	d303      	bcc.n	8003790 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68d9      	ldr	r1, [r3, #12]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	461a      	mov	r2, r3
 800379a:	6838      	ldr	r0, [r7, #0]
 800379c:	f001 feda 	bl	8005554 <memcpy>
	}
}
 80037a0:	bf00      	nop
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80037b0:	f001 fbd4 	bl	8004f5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037bc:	e011      	b.n	80037e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d012      	beq.n	80037ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	3324      	adds	r3, #36	; 0x24
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 fd1e 	bl	800420c <xTaskRemoveFromEventList>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80037d6:	f000 fdf5 	bl	80043c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80037da:	7bfb      	ldrb	r3, [r7, #15]
 80037dc:	3b01      	subs	r3, #1
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	dce9      	bgt.n	80037be <prvUnlockQueue+0x16>
 80037ea:	e000      	b.n	80037ee <prvUnlockQueue+0x46>
					break;
 80037ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	22ff      	movs	r2, #255	; 0xff
 80037f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80037f6:	f001 fbe1 	bl	8004fbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037fa:	f001 fbaf 	bl	8004f5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003804:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003806:	e011      	b.n	800382c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d012      	beq.n	8003836 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3310      	adds	r3, #16
 8003814:	4618      	mov	r0, r3
 8003816:	f000 fcf9 	bl	800420c <xTaskRemoveFromEventList>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003820:	f000 fdd0 	bl	80043c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003824:	7bbb      	ldrb	r3, [r7, #14]
 8003826:	3b01      	subs	r3, #1
 8003828:	b2db      	uxtb	r3, r3
 800382a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800382c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003830:	2b00      	cmp	r3, #0
 8003832:	dce9      	bgt.n	8003808 <prvUnlockQueue+0x60>
 8003834:	e000      	b.n	8003838 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003836:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	22ff      	movs	r2, #255	; 0xff
 800383c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003840:	f001 fbbc 	bl	8004fbc <vPortExitCritical>
}
 8003844:	bf00      	nop
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003854:	f001 fb82 	bl	8004f5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	2b00      	cmp	r3, #0
 800385e:	d102      	bne.n	8003866 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003860:	2301      	movs	r3, #1
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	e001      	b.n	800386a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800386a:	f001 fba7 	bl	8004fbc <vPortExitCritical>

	return xReturn;
 800386e:	68fb      	ldr	r3, [r7, #12]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003880:	f001 fb6c 	bl	8004f5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388c:	429a      	cmp	r2, r3
 800388e:	d102      	bne.n	8003896 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003890:	2301      	movs	r3, #1
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	e001      	b.n	800389a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800389a:	f001 fb8f 	bl	8004fbc <vPortExitCritical>

	return xReturn;
 800389e:	68fb      	ldr	r3, [r7, #12]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038b2:	2300      	movs	r3, #0
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	e014      	b.n	80038e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80038b8:	4a0e      	ldr	r2, [pc, #56]	; (80038f4 <vQueueAddToRegistry+0x4c>)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10b      	bne.n	80038dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80038c4:	490b      	ldr	r1, [pc, #44]	; (80038f4 <vQueueAddToRegistry+0x4c>)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80038ce:	4a09      	ldr	r2, [pc, #36]	; (80038f4 <vQueueAddToRegistry+0x4c>)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4413      	add	r3, r2
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80038da:	e006      	b.n	80038ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	3301      	adds	r3, #1
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2b07      	cmp	r3, #7
 80038e6:	d9e7      	bls.n	80038b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80038e8:	bf00      	nop
 80038ea:	bf00      	nop
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr
 80038f4:	200007e4 	.word	0x200007e4

080038f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003908:	f001 fb28 	bl	8004f5c <vPortEnterCritical>
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003912:	b25b      	sxtb	r3, r3
 8003914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003918:	d103      	bne.n	8003922 <vQueueWaitForMessageRestricted+0x2a>
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003928:	b25b      	sxtb	r3, r3
 800392a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392e:	d103      	bne.n	8003938 <vQueueWaitForMessageRestricted+0x40>
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003938:	f001 fb40 	bl	8004fbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003940:	2b00      	cmp	r3, #0
 8003942:	d106      	bne.n	8003952 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	3324      	adds	r3, #36	; 0x24
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	68b9      	ldr	r1, [r7, #8]
 800394c:	4618      	mov	r0, r3
 800394e:	f000 fc31 	bl	80041b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003952:	6978      	ldr	r0, [r7, #20]
 8003954:	f7ff ff28 	bl	80037a8 <prvUnlockQueue>
	}
 8003958:	bf00      	nop
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08e      	sub	sp, #56	; 0x38
 8003964:	af04      	add	r7, sp, #16
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
 800396c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800396e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10a      	bne.n	800398a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003978:	f383 8811 	msr	BASEPRI, r3
 800397c:	f3bf 8f6f 	isb	sy
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	623b      	str	r3, [r7, #32]
}
 8003986:	bf00      	nop
 8003988:	e7fe      	b.n	8003988 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800398a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10a      	bne.n	80039a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8003990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003994:	f383 8811 	msr	BASEPRI, r3
 8003998:	f3bf 8f6f 	isb	sy
 800399c:	f3bf 8f4f 	dsb	sy
 80039a0:	61fb      	str	r3, [r7, #28]
}
 80039a2:	bf00      	nop
 80039a4:	e7fe      	b.n	80039a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80039a6:	235c      	movs	r3, #92	; 0x5c
 80039a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	2b5c      	cmp	r3, #92	; 0x5c
 80039ae:	d00a      	beq.n	80039c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80039b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b4:	f383 8811 	msr	BASEPRI, r3
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	61bb      	str	r3, [r7, #24]
}
 80039c2:	bf00      	nop
 80039c4:	e7fe      	b.n	80039c4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d01e      	beq.n	8003a0a <xTaskCreateStatic+0xaa>
 80039cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d01b      	beq.n	8003a0a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039da:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039e4:	2300      	movs	r3, #0
 80039e6:	9303      	str	r3, [sp, #12]
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	9302      	str	r3, [sp, #8]
 80039ec:	f107 0314 	add.w	r3, r7, #20
 80039f0:	9301      	str	r3, [sp, #4]
 80039f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	68b9      	ldr	r1, [r7, #8]
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 f850 	bl	8003aa2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a04:	f000 f8d4 	bl	8003bb0 <prvAddNewTaskToReadyList>
 8003a08:	e001      	b.n	8003a0e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a0e:	697b      	ldr	r3, [r7, #20]
	}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3728      	adds	r7, #40	; 0x28
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08c      	sub	sp, #48	; 0x30
 8003a1c:	af04      	add	r7, sp, #16
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	4613      	mov	r3, r2
 8003a26:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a28:	88fb      	ldrh	r3, [r7, #6]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f001 fb95 	bl	800515c <pvPortMalloc>
 8003a32:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00e      	beq.n	8003a58 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003a3a:	205c      	movs	r0, #92	; 0x5c
 8003a3c:	f001 fb8e 	bl	800515c <pvPortMalloc>
 8003a40:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	631a      	str	r2, [r3, #48]	; 0x30
 8003a4e:	e005      	b.n	8003a5c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a50:	6978      	ldr	r0, [r7, #20]
 8003a52:	f001 fc47 	bl	80052e4 <vPortFree>
 8003a56:	e001      	b.n	8003a5c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d017      	beq.n	8003a92 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a6a:	88fa      	ldrh	r2, [r7, #6]
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	9303      	str	r3, [sp, #12]
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	9302      	str	r3, [sp, #8]
 8003a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a76:	9301      	str	r3, [sp, #4]
 8003a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	68b9      	ldr	r1, [r7, #8]
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 f80e 	bl	8003aa2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a86:	69f8      	ldr	r0, [r7, #28]
 8003a88:	f000 f892 	bl	8003bb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	61bb      	str	r3, [r7, #24]
 8003a90:	e002      	b.n	8003a98 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a92:	f04f 33ff 	mov.w	r3, #4294967295
 8003a96:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a98:	69bb      	ldr	r3, [r7, #24]
	}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3720      	adds	r7, #32
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b088      	sub	sp, #32
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	60f8      	str	r0, [r7, #12]
 8003aaa:	60b9      	str	r1, [r7, #8]
 8003aac:	607a      	str	r2, [r7, #4]
 8003aae:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	461a      	mov	r2, r3
 8003aba:	21a5      	movs	r1, #165	; 0xa5
 8003abc:	f001 fd58 	bl	8005570 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003aca:	3b01      	subs	r3, #1
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	f023 0307 	bic.w	r3, r3, #7
 8003ad8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00a      	beq.n	8003afa <prvInitialiseNewTask+0x58>
	__asm volatile
 8003ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae8:	f383 8811 	msr	BASEPRI, r3
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	617b      	str	r3, [r7, #20]
}
 8003af6:	bf00      	nop
 8003af8:	e7fe      	b.n	8003af8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003afa:	2300      	movs	r3, #0
 8003afc:	61fb      	str	r3, [r7, #28]
 8003afe:	e012      	b.n	8003b26 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	4413      	add	r3, r2
 8003b06:	7819      	ldrb	r1, [r3, #0]
 8003b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	3334      	adds	r3, #52	; 0x34
 8003b10:	460a      	mov	r2, r1
 8003b12:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	4413      	add	r3, r2
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d006      	beq.n	8003b2e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	3301      	adds	r3, #1
 8003b24:	61fb      	str	r3, [r7, #28]
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	2b0f      	cmp	r3, #15
 8003b2a:	d9e9      	bls.n	8003b00 <prvInitialiseNewTask+0x5e>
 8003b2c:	e000      	b.n	8003b30 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003b2e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3a:	2b37      	cmp	r3, #55	; 0x37
 8003b3c:	d901      	bls.n	8003b42 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b3e:	2337      	movs	r3, #55	; 0x37
 8003b40:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b46:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b4c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b50:	2200      	movs	r2, #0
 8003b52:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b56:	3304      	adds	r3, #4
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff f98c 	bl	8002e76 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b60:	3318      	adds	r3, #24
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff f987 	bl	8002e76 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b6c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b70:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b76:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b7c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b80:	2200      	movs	r2, #0
 8003b82:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	68f9      	ldr	r1, [r7, #12]
 8003b90:	69b8      	ldr	r0, [r7, #24]
 8003b92:	f001 f8ef 	bl	8004d74 <pxPortInitialiseStack>
 8003b96:	4602      	mov	r2, r0
 8003b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d002      	beq.n	8003ba8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ba6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ba8:	bf00      	nop
 8003baa:	3720      	adds	r7, #32
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003bb8:	f001 f9d0 	bl	8004f5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bbc:	4b2d      	ldr	r3, [pc, #180]	; (8003c74 <prvAddNewTaskToReadyList+0xc4>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	4a2c      	ldr	r2, [pc, #176]	; (8003c74 <prvAddNewTaskToReadyList+0xc4>)
 8003bc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bc6:	4b2c      	ldr	r3, [pc, #176]	; (8003c78 <prvAddNewTaskToReadyList+0xc8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d109      	bne.n	8003be2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003bce:	4a2a      	ldr	r2, [pc, #168]	; (8003c78 <prvAddNewTaskToReadyList+0xc8>)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003bd4:	4b27      	ldr	r3, [pc, #156]	; (8003c74 <prvAddNewTaskToReadyList+0xc4>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d110      	bne.n	8003bfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003bdc:	f000 fc16 	bl	800440c <prvInitialiseTaskLists>
 8003be0:	e00d      	b.n	8003bfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003be2:	4b26      	ldr	r3, [pc, #152]	; (8003c7c <prvAddNewTaskToReadyList+0xcc>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d109      	bne.n	8003bfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bea:	4b23      	ldr	r3, [pc, #140]	; (8003c78 <prvAddNewTaskToReadyList+0xc8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d802      	bhi.n	8003bfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bf8:	4a1f      	ldr	r2, [pc, #124]	; (8003c78 <prvAddNewTaskToReadyList+0xc8>)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bfe:	4b20      	ldr	r3, [pc, #128]	; (8003c80 <prvAddNewTaskToReadyList+0xd0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3301      	adds	r3, #1
 8003c04:	4a1e      	ldr	r2, [pc, #120]	; (8003c80 <prvAddNewTaskToReadyList+0xd0>)
 8003c06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c08:	4b1d      	ldr	r3, [pc, #116]	; (8003c80 <prvAddNewTaskToReadyList+0xd0>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c14:	4b1b      	ldr	r3, [pc, #108]	; (8003c84 <prvAddNewTaskToReadyList+0xd4>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d903      	bls.n	8003c24 <prvAddNewTaskToReadyList+0x74>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c20:	4a18      	ldr	r2, [pc, #96]	; (8003c84 <prvAddNewTaskToReadyList+0xd4>)
 8003c22:	6013      	str	r3, [r2, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c28:	4613      	mov	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4a15      	ldr	r2, [pc, #84]	; (8003c88 <prvAddNewTaskToReadyList+0xd8>)
 8003c32:	441a      	add	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3304      	adds	r3, #4
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4610      	mov	r0, r2
 8003c3c:	f7ff f927 	bl	8002e8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c40:	f001 f9bc 	bl	8004fbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c44:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <prvAddNewTaskToReadyList+0xcc>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00e      	beq.n	8003c6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c4c:	4b0a      	ldr	r3, [pc, #40]	; (8003c78 <prvAddNewTaskToReadyList+0xc8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d207      	bcs.n	8003c6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c5a:	4b0c      	ldr	r3, [pc, #48]	; (8003c8c <prvAddNewTaskToReadyList+0xdc>)
 8003c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c6a:	bf00      	nop
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20000cf8 	.word	0x20000cf8
 8003c78:	20000824 	.word	0x20000824
 8003c7c:	20000d04 	.word	0x20000d04
 8003c80:	20000d14 	.word	0x20000d14
 8003c84:	20000d00 	.word	0x20000d00
 8003c88:	20000828 	.word	0x20000828
 8003c8c:	e000ed04 	.word	0xe000ed04

08003c90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d017      	beq.n	8003cd2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ca2:	4b13      	ldr	r3, [pc, #76]	; (8003cf0 <vTaskDelay+0x60>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <vTaskDelay+0x30>
	__asm volatile
 8003caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cae:	f383 8811 	msr	BASEPRI, r3
 8003cb2:	f3bf 8f6f 	isb	sy
 8003cb6:	f3bf 8f4f 	dsb	sy
 8003cba:	60bb      	str	r3, [r7, #8]
}
 8003cbc:	bf00      	nop
 8003cbe:	e7fe      	b.n	8003cbe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003cc0:	f000 f880 	bl	8003dc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 fcee 	bl	80046a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ccc:	f000 f888 	bl	8003de0 <xTaskResumeAll>
 8003cd0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d107      	bne.n	8003ce8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003cd8:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <vTaskDelay+0x64>)
 8003cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ce8:	bf00      	nop
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20000d20 	.word	0x20000d20
 8003cf4:	e000ed04 	.word	0xe000ed04

08003cf8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b08a      	sub	sp, #40	; 0x28
 8003cfc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d06:	463a      	mov	r2, r7
 8003d08:	1d39      	adds	r1, r7, #4
 8003d0a:	f107 0308 	add.w	r3, r7, #8
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff f860 	bl	8002dd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d14:	6839      	ldr	r1, [r7, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	9202      	str	r2, [sp, #8]
 8003d1c:	9301      	str	r3, [sp, #4]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	2300      	movs	r3, #0
 8003d24:	460a      	mov	r2, r1
 8003d26:	4921      	ldr	r1, [pc, #132]	; (8003dac <vTaskStartScheduler+0xb4>)
 8003d28:	4821      	ldr	r0, [pc, #132]	; (8003db0 <vTaskStartScheduler+0xb8>)
 8003d2a:	f7ff fe19 	bl	8003960 <xTaskCreateStatic>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	4a20      	ldr	r2, [pc, #128]	; (8003db4 <vTaskStartScheduler+0xbc>)
 8003d32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d34:	4b1f      	ldr	r3, [pc, #124]	; (8003db4 <vTaskStartScheduler+0xbc>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d002      	beq.n	8003d42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	e001      	b.n	8003d46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d102      	bne.n	8003d52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d4c:	f000 fd00 	bl	8004750 <xTimerCreateTimerTask>
 8003d50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d116      	bne.n	8003d86 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5c:	f383 8811 	msr	BASEPRI, r3
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	613b      	str	r3, [r7, #16]
}
 8003d6a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d6c:	4b12      	ldr	r3, [pc, #72]	; (8003db8 <vTaskStartScheduler+0xc0>)
 8003d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d74:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <vTaskStartScheduler+0xc4>)
 8003d76:	2201      	movs	r2, #1
 8003d78:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003d7a:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <vTaskStartScheduler+0xc8>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d80:	f001 f87a 	bl	8004e78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d84:	e00e      	b.n	8003da4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8c:	d10a      	bne.n	8003da4 <vTaskStartScheduler+0xac>
	__asm volatile
 8003d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d92:	f383 8811 	msr	BASEPRI, r3
 8003d96:	f3bf 8f6f 	isb	sy
 8003d9a:	f3bf 8f4f 	dsb	sy
 8003d9e:	60fb      	str	r3, [r7, #12]
}
 8003da0:	bf00      	nop
 8003da2:	e7fe      	b.n	8003da2 <vTaskStartScheduler+0xaa>
}
 8003da4:	bf00      	nop
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	080055cc 	.word	0x080055cc
 8003db0:	080043dd 	.word	0x080043dd
 8003db4:	20000d1c 	.word	0x20000d1c
 8003db8:	20000d18 	.word	0x20000d18
 8003dbc:	20000d04 	.word	0x20000d04
 8003dc0:	20000cfc 	.word	0x20000cfc

08003dc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003dc8:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <vTaskSuspendAll+0x18>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	4a03      	ldr	r2, [pc, #12]	; (8003ddc <vTaskSuspendAll+0x18>)
 8003dd0:	6013      	str	r3, [r2, #0]
}
 8003dd2:	bf00      	nop
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bc80      	pop	{r7}
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	20000d20 	.word	0x20000d20

08003de0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003dea:	2300      	movs	r3, #0
 8003dec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003dee:	4b42      	ldr	r3, [pc, #264]	; (8003ef8 <xTaskResumeAll+0x118>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10a      	bne.n	8003e0c <xTaskResumeAll+0x2c>
	__asm volatile
 8003df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	603b      	str	r3, [r7, #0]
}
 8003e08:	bf00      	nop
 8003e0a:	e7fe      	b.n	8003e0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e0c:	f001 f8a6 	bl	8004f5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e10:	4b39      	ldr	r3, [pc, #228]	; (8003ef8 <xTaskResumeAll+0x118>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3b01      	subs	r3, #1
 8003e16:	4a38      	ldr	r2, [pc, #224]	; (8003ef8 <xTaskResumeAll+0x118>)
 8003e18:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e1a:	4b37      	ldr	r3, [pc, #220]	; (8003ef8 <xTaskResumeAll+0x118>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d162      	bne.n	8003ee8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e22:	4b36      	ldr	r3, [pc, #216]	; (8003efc <xTaskResumeAll+0x11c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d05e      	beq.n	8003ee8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e2a:	e02f      	b.n	8003e8c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003e2c:	4b34      	ldr	r3, [pc, #208]	; (8003f00 <xTaskResumeAll+0x120>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	3318      	adds	r3, #24
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff f883 	bl	8002f44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	3304      	adds	r3, #4
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff f87e 	bl	8002f44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4c:	4b2d      	ldr	r3, [pc, #180]	; (8003f04 <xTaskResumeAll+0x124>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d903      	bls.n	8003e5c <xTaskResumeAll+0x7c>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	4a2a      	ldr	r2, [pc, #168]	; (8003f04 <xTaskResumeAll+0x124>)
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e60:	4613      	mov	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4a27      	ldr	r2, [pc, #156]	; (8003f08 <xTaskResumeAll+0x128>)
 8003e6a:	441a      	add	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	3304      	adds	r3, #4
 8003e70:	4619      	mov	r1, r3
 8003e72:	4610      	mov	r0, r2
 8003e74:	f7ff f80b 	bl	8002e8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7c:	4b23      	ldr	r3, [pc, #140]	; (8003f0c <xTaskResumeAll+0x12c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d302      	bcc.n	8003e8c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003e86:	4b22      	ldr	r3, [pc, #136]	; (8003f10 <xTaskResumeAll+0x130>)
 8003e88:	2201      	movs	r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e8c:	4b1c      	ldr	r3, [pc, #112]	; (8003f00 <xTaskResumeAll+0x120>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1cb      	bne.n	8003e2c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e9a:	f000 fb55 	bl	8004548 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e9e:	4b1d      	ldr	r3, [pc, #116]	; (8003f14 <xTaskResumeAll+0x134>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d010      	beq.n	8003ecc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003eaa:	f000 f845 	bl	8003f38 <xTaskIncrementTick>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003eb4:	4b16      	ldr	r3, [pc, #88]	; (8003f10 <xTaskResumeAll+0x130>)
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f1      	bne.n	8003eaa <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003ec6:	4b13      	ldr	r3, [pc, #76]	; (8003f14 <xTaskResumeAll+0x134>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ecc:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <xTaskResumeAll+0x130>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d009      	beq.n	8003ee8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ed8:	4b0f      	ldr	r3, [pc, #60]	; (8003f18 <xTaskResumeAll+0x138>)
 8003eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ee8:	f001 f868 	bl	8004fbc <vPortExitCritical>

	return xAlreadyYielded;
 8003eec:	68bb      	ldr	r3, [r7, #8]
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	20000d20 	.word	0x20000d20
 8003efc:	20000cf8 	.word	0x20000cf8
 8003f00:	20000cb8 	.word	0x20000cb8
 8003f04:	20000d00 	.word	0x20000d00
 8003f08:	20000828 	.word	0x20000828
 8003f0c:	20000824 	.word	0x20000824
 8003f10:	20000d0c 	.word	0x20000d0c
 8003f14:	20000d08 	.word	0x20000d08
 8003f18:	e000ed04 	.word	0xe000ed04

08003f1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f22:	4b04      	ldr	r3, [pc, #16]	; (8003f34 <xTaskGetTickCount+0x18>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f28:	687b      	ldr	r3, [r7, #4]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bc80      	pop	{r7}
 8003f32:	4770      	bx	lr
 8003f34:	20000cfc 	.word	0x20000cfc

08003f38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f42:	4b51      	ldr	r3, [pc, #324]	; (8004088 <xTaskIncrementTick+0x150>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f040 808e 	bne.w	8004068 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f4c:	4b4f      	ldr	r3, [pc, #316]	; (800408c <xTaskIncrementTick+0x154>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3301      	adds	r3, #1
 8003f52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f54:	4a4d      	ldr	r2, [pc, #308]	; (800408c <xTaskIncrementTick+0x154>)
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d120      	bne.n	8003fa2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f60:	4b4b      	ldr	r3, [pc, #300]	; (8004090 <xTaskIncrementTick+0x158>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <xTaskIncrementTick+0x48>
	__asm volatile
 8003f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6e:	f383 8811 	msr	BASEPRI, r3
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	603b      	str	r3, [r7, #0]
}
 8003f7c:	bf00      	nop
 8003f7e:	e7fe      	b.n	8003f7e <xTaskIncrementTick+0x46>
 8003f80:	4b43      	ldr	r3, [pc, #268]	; (8004090 <xTaskIncrementTick+0x158>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	4b43      	ldr	r3, [pc, #268]	; (8004094 <xTaskIncrementTick+0x15c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a41      	ldr	r2, [pc, #260]	; (8004090 <xTaskIncrementTick+0x158>)
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	4a41      	ldr	r2, [pc, #260]	; (8004094 <xTaskIncrementTick+0x15c>)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6013      	str	r3, [r2, #0]
 8003f94:	4b40      	ldr	r3, [pc, #256]	; (8004098 <xTaskIncrementTick+0x160>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	4a3f      	ldr	r2, [pc, #252]	; (8004098 <xTaskIncrementTick+0x160>)
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	f000 fad3 	bl	8004548 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003fa2:	4b3e      	ldr	r3, [pc, #248]	; (800409c <xTaskIncrementTick+0x164>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d34e      	bcc.n	800404a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fac:	4b38      	ldr	r3, [pc, #224]	; (8004090 <xTaskIncrementTick+0x158>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <xTaskIncrementTick+0x82>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <xTaskIncrementTick+0x84>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d004      	beq.n	8003fca <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fc0:	4b36      	ldr	r3, [pc, #216]	; (800409c <xTaskIncrementTick+0x164>)
 8003fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc6:	601a      	str	r2, [r3, #0]
					break;
 8003fc8:	e03f      	b.n	800404a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fca:	4b31      	ldr	r3, [pc, #196]	; (8004090 <xTaskIncrementTick+0x158>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d203      	bcs.n	8003fea <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fe2:	4a2e      	ldr	r2, [pc, #184]	; (800409c <xTaskIncrementTick+0x164>)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6013      	str	r3, [r2, #0]
						break;
 8003fe8:	e02f      	b.n	800404a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	3304      	adds	r3, #4
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fe ffa8 	bl	8002f44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d004      	beq.n	8004006 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	3318      	adds	r3, #24
 8004000:	4618      	mov	r0, r3
 8004002:	f7fe ff9f 	bl	8002f44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800400a:	4b25      	ldr	r3, [pc, #148]	; (80040a0 <xTaskIncrementTick+0x168>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	429a      	cmp	r2, r3
 8004010:	d903      	bls.n	800401a <xTaskIncrementTick+0xe2>
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004016:	4a22      	ldr	r2, [pc, #136]	; (80040a0 <xTaskIncrementTick+0x168>)
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800401e:	4613      	mov	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4a1f      	ldr	r2, [pc, #124]	; (80040a4 <xTaskIncrementTick+0x16c>)
 8004028:	441a      	add	r2, r3
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	3304      	adds	r3, #4
 800402e:	4619      	mov	r1, r3
 8004030:	4610      	mov	r0, r2
 8004032:	f7fe ff2c 	bl	8002e8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800403a:	4b1b      	ldr	r3, [pc, #108]	; (80040a8 <xTaskIncrementTick+0x170>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004040:	429a      	cmp	r2, r3
 8004042:	d3b3      	bcc.n	8003fac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004044:	2301      	movs	r3, #1
 8004046:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004048:	e7b0      	b.n	8003fac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800404a:	4b17      	ldr	r3, [pc, #92]	; (80040a8 <xTaskIncrementTick+0x170>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004050:	4914      	ldr	r1, [pc, #80]	; (80040a4 <xTaskIncrementTick+0x16c>)
 8004052:	4613      	mov	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4413      	add	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	440b      	add	r3, r1
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d907      	bls.n	8004072 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004062:	2301      	movs	r3, #1
 8004064:	617b      	str	r3, [r7, #20]
 8004066:	e004      	b.n	8004072 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004068:	4b10      	ldr	r3, [pc, #64]	; (80040ac <xTaskIncrementTick+0x174>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3301      	adds	r3, #1
 800406e:	4a0f      	ldr	r2, [pc, #60]	; (80040ac <xTaskIncrementTick+0x174>)
 8004070:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004072:	4b0f      	ldr	r3, [pc, #60]	; (80040b0 <xTaskIncrementTick+0x178>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800407a:	2301      	movs	r3, #1
 800407c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800407e:	697b      	ldr	r3, [r7, #20]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	20000d20 	.word	0x20000d20
 800408c:	20000cfc 	.word	0x20000cfc
 8004090:	20000cb0 	.word	0x20000cb0
 8004094:	20000cb4 	.word	0x20000cb4
 8004098:	20000d10 	.word	0x20000d10
 800409c:	20000d18 	.word	0x20000d18
 80040a0:	20000d00 	.word	0x20000d00
 80040a4:	20000828 	.word	0x20000828
 80040a8:	20000824 	.word	0x20000824
 80040ac:	20000d08 	.word	0x20000d08
 80040b0:	20000d0c 	.word	0x20000d0c

080040b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040ba:	4b27      	ldr	r3, [pc, #156]	; (8004158 <vTaskSwitchContext+0xa4>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040c2:	4b26      	ldr	r3, [pc, #152]	; (800415c <vTaskSwitchContext+0xa8>)
 80040c4:	2201      	movs	r2, #1
 80040c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040c8:	e041      	b.n	800414e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80040ca:	4b24      	ldr	r3, [pc, #144]	; (800415c <vTaskSwitchContext+0xa8>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80040d0:	4b23      	ldr	r3, [pc, #140]	; (8004160 <vTaskSwitchContext+0xac>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	e010      	b.n	80040fa <vTaskSwitchContext+0x46>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10a      	bne.n	80040f4 <vTaskSwitchContext+0x40>
	__asm volatile
 80040de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	607b      	str	r3, [r7, #4]
}
 80040f0:	bf00      	nop
 80040f2:	e7fe      	b.n	80040f2 <vTaskSwitchContext+0x3e>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	3b01      	subs	r3, #1
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	491a      	ldr	r1, [pc, #104]	; (8004164 <vTaskSwitchContext+0xb0>)
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	4613      	mov	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4413      	add	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	440b      	add	r3, r1
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0e4      	beq.n	80040d8 <vTaskSwitchContext+0x24>
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	4613      	mov	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4413      	add	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4a12      	ldr	r2, [pc, #72]	; (8004164 <vTaskSwitchContext+0xb0>)
 800411a:	4413      	add	r3, r2
 800411c:	60bb      	str	r3, [r7, #8]
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	605a      	str	r2, [r3, #4]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	3308      	adds	r3, #8
 8004130:	429a      	cmp	r2, r3
 8004132:	d104      	bne.n	800413e <vTaskSwitchContext+0x8a>
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	605a      	str	r2, [r3, #4]
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4a08      	ldr	r2, [pc, #32]	; (8004168 <vTaskSwitchContext+0xb4>)
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	4a05      	ldr	r2, [pc, #20]	; (8004160 <vTaskSwitchContext+0xac>)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6013      	str	r3, [r2, #0]
}
 800414e:	bf00      	nop
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	bc80      	pop	{r7}
 8004156:	4770      	bx	lr
 8004158:	20000d20 	.word	0x20000d20
 800415c:	20000d0c 	.word	0x20000d0c
 8004160:	20000d00 	.word	0x20000d00
 8004164:	20000828 	.word	0x20000828
 8004168:	20000824 	.word	0x20000824

0800416c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10a      	bne.n	8004192 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800417c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004180:	f383 8811 	msr	BASEPRI, r3
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	60fb      	str	r3, [r7, #12]
}
 800418e:	bf00      	nop
 8004190:	e7fe      	b.n	8004190 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004192:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <vTaskPlaceOnEventList+0x44>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3318      	adds	r3, #24
 8004198:	4619      	mov	r1, r3
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7fe fe9a 	bl	8002ed4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041a0:	2101      	movs	r1, #1
 80041a2:	6838      	ldr	r0, [r7, #0]
 80041a4:	f000 fa80 	bl	80046a8 <prvAddCurrentTaskToDelayedList>
}
 80041a8:	bf00      	nop
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	20000824 	.word	0x20000824

080041b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10a      	bne.n	80041dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80041c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ca:	f383 8811 	msr	BASEPRI, r3
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	f3bf 8f4f 	dsb	sy
 80041d6:	617b      	str	r3, [r7, #20]
}
 80041d8:	bf00      	nop
 80041da:	e7fe      	b.n	80041da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041dc:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <vTaskPlaceOnEventListRestricted+0x54>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3318      	adds	r3, #24
 80041e2:	4619      	mov	r1, r3
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f7fe fe52 	bl	8002e8e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80041f0:	f04f 33ff 	mov.w	r3, #4294967295
 80041f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	68b8      	ldr	r0, [r7, #8]
 80041fa:	f000 fa55 	bl	80046a8 <prvAddCurrentTaskToDelayedList>
	}
 80041fe:	bf00      	nop
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	20000824 	.word	0x20000824

0800420c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10a      	bne.n	8004238 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004226:	f383 8811 	msr	BASEPRI, r3
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	60fb      	str	r3, [r7, #12]
}
 8004234:	bf00      	nop
 8004236:	e7fe      	b.n	8004236 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	3318      	adds	r3, #24
 800423c:	4618      	mov	r0, r3
 800423e:	f7fe fe81 	bl	8002f44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004242:	4b1e      	ldr	r3, [pc, #120]	; (80042bc <xTaskRemoveFromEventList+0xb0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d11d      	bne.n	8004286 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	3304      	adds	r3, #4
 800424e:	4618      	mov	r0, r3
 8004250:	f7fe fe78 	bl	8002f44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004258:	4b19      	ldr	r3, [pc, #100]	; (80042c0 <xTaskRemoveFromEventList+0xb4>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	429a      	cmp	r2, r3
 800425e:	d903      	bls.n	8004268 <xTaskRemoveFromEventList+0x5c>
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004264:	4a16      	ldr	r2, [pc, #88]	; (80042c0 <xTaskRemoveFromEventList+0xb4>)
 8004266:	6013      	str	r3, [r2, #0]
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800426c:	4613      	mov	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4a13      	ldr	r2, [pc, #76]	; (80042c4 <xTaskRemoveFromEventList+0xb8>)
 8004276:	441a      	add	r2, r3
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	3304      	adds	r3, #4
 800427c:	4619      	mov	r1, r3
 800427e:	4610      	mov	r0, r2
 8004280:	f7fe fe05 	bl	8002e8e <vListInsertEnd>
 8004284:	e005      	b.n	8004292 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	3318      	adds	r3, #24
 800428a:	4619      	mov	r1, r3
 800428c:	480e      	ldr	r0, [pc, #56]	; (80042c8 <xTaskRemoveFromEventList+0xbc>)
 800428e:	f7fe fdfe 	bl	8002e8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004296:	4b0d      	ldr	r3, [pc, #52]	; (80042cc <xTaskRemoveFromEventList+0xc0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	429a      	cmp	r2, r3
 800429e:	d905      	bls.n	80042ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80042a0:	2301      	movs	r3, #1
 80042a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80042a4:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <xTaskRemoveFromEventList+0xc4>)
 80042a6:	2201      	movs	r2, #1
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	e001      	b.n	80042b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80042ac:	2300      	movs	r3, #0
 80042ae:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80042b0:	697b      	ldr	r3, [r7, #20]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	20000d20 	.word	0x20000d20
 80042c0:	20000d00 	.word	0x20000d00
 80042c4:	20000828 	.word	0x20000828
 80042c8:	20000cb8 	.word	0x20000cb8
 80042cc:	20000824 	.word	0x20000824
 80042d0:	20000d0c 	.word	0x20000d0c

080042d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042dc:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <vTaskInternalSetTimeOutState+0x24>)
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80042e4:	4b05      	ldr	r3, [pc, #20]	; (80042fc <vTaskInternalSetTimeOutState+0x28>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	605a      	str	r2, [r3, #4]
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bc80      	pop	{r7}
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	20000d10 	.word	0x20000d10
 80042fc:	20000cfc 	.word	0x20000cfc

08004300 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b088      	sub	sp, #32
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10a      	bne.n	8004326 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	613b      	str	r3, [r7, #16]
}
 8004322:	bf00      	nop
 8004324:	e7fe      	b.n	8004324 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10a      	bne.n	8004342 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800432c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004330:	f383 8811 	msr	BASEPRI, r3
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	60fb      	str	r3, [r7, #12]
}
 800433e:	bf00      	nop
 8004340:	e7fe      	b.n	8004340 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004342:	f000 fe0b 	bl	8004f5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004346:	4b1d      	ldr	r3, [pc, #116]	; (80043bc <xTaskCheckForTimeOut+0xbc>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435e:	d102      	bne.n	8004366 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004360:	2300      	movs	r3, #0
 8004362:	61fb      	str	r3, [r7, #28]
 8004364:	e023      	b.n	80043ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	4b15      	ldr	r3, [pc, #84]	; (80043c0 <xTaskCheckForTimeOut+0xc0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	429a      	cmp	r2, r3
 8004370:	d007      	beq.n	8004382 <xTaskCheckForTimeOut+0x82>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	429a      	cmp	r2, r3
 800437a:	d302      	bcc.n	8004382 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800437c:	2301      	movs	r3, #1
 800437e:	61fb      	str	r3, [r7, #28]
 8004380:	e015      	b.n	80043ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	429a      	cmp	r2, r3
 800438a:	d20b      	bcs.n	80043a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	1ad2      	subs	r2, r2, r3
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7ff ff9b 	bl	80042d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800439e:	2300      	movs	r3, #0
 80043a0:	61fb      	str	r3, [r7, #28]
 80043a2:	e004      	b.n	80043ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80043aa:	2301      	movs	r3, #1
 80043ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80043ae:	f000 fe05 	bl	8004fbc <vPortExitCritical>

	return xReturn;
 80043b2:	69fb      	ldr	r3, [r7, #28]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3720      	adds	r7, #32
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	20000cfc 	.word	0x20000cfc
 80043c0:	20000d10 	.word	0x20000d10

080043c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80043c8:	4b03      	ldr	r3, [pc, #12]	; (80043d8 <vTaskMissedYield+0x14>)
 80043ca:	2201      	movs	r2, #1
 80043cc:	601a      	str	r2, [r3, #0]
}
 80043ce:	bf00      	nop
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bc80      	pop	{r7}
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	20000d0c 	.word	0x20000d0c

080043dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043e4:	f000 f852 	bl	800448c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043e8:	4b06      	ldr	r3, [pc, #24]	; (8004404 <prvIdleTask+0x28>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d9f9      	bls.n	80043e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80043f0:	4b05      	ldr	r3, [pc, #20]	; (8004408 <prvIdleTask+0x2c>)
 80043f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004400:	e7f0      	b.n	80043e4 <prvIdleTask+0x8>
 8004402:	bf00      	nop
 8004404:	20000828 	.word	0x20000828
 8004408:	e000ed04 	.word	0xe000ed04

0800440c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004412:	2300      	movs	r3, #0
 8004414:	607b      	str	r3, [r7, #4]
 8004416:	e00c      	b.n	8004432 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	4613      	mov	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4a12      	ldr	r2, [pc, #72]	; (800446c <prvInitialiseTaskLists+0x60>)
 8004424:	4413      	add	r3, r2
 8004426:	4618      	mov	r0, r3
 8004428:	f7fe fd06 	bl	8002e38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3301      	adds	r3, #1
 8004430:	607b      	str	r3, [r7, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b37      	cmp	r3, #55	; 0x37
 8004436:	d9ef      	bls.n	8004418 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004438:	480d      	ldr	r0, [pc, #52]	; (8004470 <prvInitialiseTaskLists+0x64>)
 800443a:	f7fe fcfd 	bl	8002e38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800443e:	480d      	ldr	r0, [pc, #52]	; (8004474 <prvInitialiseTaskLists+0x68>)
 8004440:	f7fe fcfa 	bl	8002e38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004444:	480c      	ldr	r0, [pc, #48]	; (8004478 <prvInitialiseTaskLists+0x6c>)
 8004446:	f7fe fcf7 	bl	8002e38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800444a:	480c      	ldr	r0, [pc, #48]	; (800447c <prvInitialiseTaskLists+0x70>)
 800444c:	f7fe fcf4 	bl	8002e38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004450:	480b      	ldr	r0, [pc, #44]	; (8004480 <prvInitialiseTaskLists+0x74>)
 8004452:	f7fe fcf1 	bl	8002e38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004456:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <prvInitialiseTaskLists+0x78>)
 8004458:	4a05      	ldr	r2, [pc, #20]	; (8004470 <prvInitialiseTaskLists+0x64>)
 800445a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800445c:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <prvInitialiseTaskLists+0x7c>)
 800445e:	4a05      	ldr	r2, [pc, #20]	; (8004474 <prvInitialiseTaskLists+0x68>)
 8004460:	601a      	str	r2, [r3, #0]
}
 8004462:	bf00      	nop
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	20000828 	.word	0x20000828
 8004470:	20000c88 	.word	0x20000c88
 8004474:	20000c9c 	.word	0x20000c9c
 8004478:	20000cb8 	.word	0x20000cb8
 800447c:	20000ccc 	.word	0x20000ccc
 8004480:	20000ce4 	.word	0x20000ce4
 8004484:	20000cb0 	.word	0x20000cb0
 8004488:	20000cb4 	.word	0x20000cb4

0800448c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004492:	e019      	b.n	80044c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004494:	f000 fd62 	bl	8004f5c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004498:	4b10      	ldr	r3, [pc, #64]	; (80044dc <prvCheckTasksWaitingTermination+0x50>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3304      	adds	r3, #4
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fe fd4d 	bl	8002f44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044aa:	4b0d      	ldr	r3, [pc, #52]	; (80044e0 <prvCheckTasksWaitingTermination+0x54>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	4a0b      	ldr	r2, [pc, #44]	; (80044e0 <prvCheckTasksWaitingTermination+0x54>)
 80044b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044b4:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <prvCheckTasksWaitingTermination+0x58>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3b01      	subs	r3, #1
 80044ba:	4a0a      	ldr	r2, [pc, #40]	; (80044e4 <prvCheckTasksWaitingTermination+0x58>)
 80044bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80044be:	f000 fd7d 	bl	8004fbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f810 	bl	80044e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044c8:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <prvCheckTasksWaitingTermination+0x58>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1e1      	bne.n	8004494 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044d0:	bf00      	nop
 80044d2:	bf00      	nop
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20000ccc 	.word	0x20000ccc
 80044e0:	20000cf8 	.word	0x20000cf8
 80044e4:	20000ce0 	.word	0x20000ce0

080044e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d108      	bne.n	800450c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fef0 	bl	80052e4 <vPortFree>
				vPortFree( pxTCB );
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 feed 	bl	80052e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800450a:	e018      	b.n	800453e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004512:	2b01      	cmp	r3, #1
 8004514:	d103      	bne.n	800451e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fee4 	bl	80052e4 <vPortFree>
	}
 800451c:	e00f      	b.n	800453e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004524:	2b02      	cmp	r3, #2
 8004526:	d00a      	beq.n	800453e <prvDeleteTCB+0x56>
	__asm volatile
 8004528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452c:	f383 8811 	msr	BASEPRI, r3
 8004530:	f3bf 8f6f 	isb	sy
 8004534:	f3bf 8f4f 	dsb	sy
 8004538:	60fb      	str	r3, [r7, #12]
}
 800453a:	bf00      	nop
 800453c:	e7fe      	b.n	800453c <prvDeleteTCB+0x54>
	}
 800453e:	bf00      	nop
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800454e:	4b0e      	ldr	r3, [pc, #56]	; (8004588 <prvResetNextTaskUnblockTime+0x40>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <prvResetNextTaskUnblockTime+0x14>
 8004558:	2301      	movs	r3, #1
 800455a:	e000      	b.n	800455e <prvResetNextTaskUnblockTime+0x16>
 800455c:	2300      	movs	r3, #0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d004      	beq.n	800456c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004562:	4b0a      	ldr	r3, [pc, #40]	; (800458c <prvResetNextTaskUnblockTime+0x44>)
 8004564:	f04f 32ff 	mov.w	r2, #4294967295
 8004568:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800456a:	e008      	b.n	800457e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800456c:	4b06      	ldr	r3, [pc, #24]	; (8004588 <prvResetNextTaskUnblockTime+0x40>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	4a04      	ldr	r2, [pc, #16]	; (800458c <prvResetNextTaskUnblockTime+0x44>)
 800457c:	6013      	str	r3, [r2, #0]
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr
 8004588:	20000cb0 	.word	0x20000cb0
 800458c:	20000d18 	.word	0x20000d18

08004590 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004596:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <xTaskGetSchedulerState+0x34>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d102      	bne.n	80045a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800459e:	2301      	movs	r3, #1
 80045a0:	607b      	str	r3, [r7, #4]
 80045a2:	e008      	b.n	80045b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045a4:	4b08      	ldr	r3, [pc, #32]	; (80045c8 <xTaskGetSchedulerState+0x38>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d102      	bne.n	80045b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80045ac:	2302      	movs	r3, #2
 80045ae:	607b      	str	r3, [r7, #4]
 80045b0:	e001      	b.n	80045b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80045b2:	2300      	movs	r3, #0
 80045b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80045b6:	687b      	ldr	r3, [r7, #4]
	}
 80045b8:	4618      	mov	r0, r3
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	bc80      	pop	{r7}
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	20000d04 	.word	0x20000d04
 80045c8:	20000d20 	.word	0x20000d20

080045cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045d8:	2300      	movs	r3, #0
 80045da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d056      	beq.n	8004690 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80045e2:	4b2e      	ldr	r3, [pc, #184]	; (800469c <xTaskPriorityDisinherit+0xd0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d00a      	beq.n	8004602 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80045ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	60fb      	str	r3, [r7, #12]
}
 80045fe:	bf00      	nop
 8004600:	e7fe      	b.n	8004600 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10a      	bne.n	8004620 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	60bb      	str	r3, [r7, #8]
}
 800461c:	bf00      	nop
 800461e:	e7fe      	b.n	800461e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004624:	1e5a      	subs	r2, r3, #1
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004632:	429a      	cmp	r2, r3
 8004634:	d02c      	beq.n	8004690 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800463a:	2b00      	cmp	r3, #0
 800463c:	d128      	bne.n	8004690 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	3304      	adds	r3, #4
 8004642:	4618      	mov	r0, r3
 8004644:	f7fe fc7e 	bl	8002f44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004660:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <xTaskPriorityDisinherit+0xd4>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d903      	bls.n	8004670 <xTaskPriorityDisinherit+0xa4>
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466c:	4a0c      	ldr	r2, [pc, #48]	; (80046a0 <xTaskPriorityDisinherit+0xd4>)
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004674:	4613      	mov	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4a09      	ldr	r2, [pc, #36]	; (80046a4 <xTaskPriorityDisinherit+0xd8>)
 800467e:	441a      	add	r2, r3
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	3304      	adds	r3, #4
 8004684:	4619      	mov	r1, r3
 8004686:	4610      	mov	r0, r2
 8004688:	f7fe fc01 	bl	8002e8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800468c:	2301      	movs	r3, #1
 800468e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004690:	697b      	ldr	r3, [r7, #20]
	}
 8004692:	4618      	mov	r0, r3
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	20000824 	.word	0x20000824
 80046a0:	20000d00 	.word	0x20000d00
 80046a4:	20000828 	.word	0x20000828

080046a8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046b2:	4b21      	ldr	r3, [pc, #132]	; (8004738 <prvAddCurrentTaskToDelayedList+0x90>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046b8:	4b20      	ldr	r3, [pc, #128]	; (800473c <prvAddCurrentTaskToDelayedList+0x94>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	3304      	adds	r3, #4
 80046be:	4618      	mov	r0, r3
 80046c0:	f7fe fc40 	bl	8002f44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ca:	d10a      	bne.n	80046e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d007      	beq.n	80046e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046d2:	4b1a      	ldr	r3, [pc, #104]	; (800473c <prvAddCurrentTaskToDelayedList+0x94>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	3304      	adds	r3, #4
 80046d8:	4619      	mov	r1, r3
 80046da:	4819      	ldr	r0, [pc, #100]	; (8004740 <prvAddCurrentTaskToDelayedList+0x98>)
 80046dc:	f7fe fbd7 	bl	8002e8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046e0:	e026      	b.n	8004730 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4413      	add	r3, r2
 80046e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046ea:	4b14      	ldr	r3, [pc, #80]	; (800473c <prvAddCurrentTaskToDelayedList+0x94>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d209      	bcs.n	800470e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046fa:	4b12      	ldr	r3, [pc, #72]	; (8004744 <prvAddCurrentTaskToDelayedList+0x9c>)
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	4b0f      	ldr	r3, [pc, #60]	; (800473c <prvAddCurrentTaskToDelayedList+0x94>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	3304      	adds	r3, #4
 8004704:	4619      	mov	r1, r3
 8004706:	4610      	mov	r0, r2
 8004708:	f7fe fbe4 	bl	8002ed4 <vListInsert>
}
 800470c:	e010      	b.n	8004730 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800470e:	4b0e      	ldr	r3, [pc, #56]	; (8004748 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	4b0a      	ldr	r3, [pc, #40]	; (800473c <prvAddCurrentTaskToDelayedList+0x94>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3304      	adds	r3, #4
 8004718:	4619      	mov	r1, r3
 800471a:	4610      	mov	r0, r2
 800471c:	f7fe fbda 	bl	8002ed4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004720:	4b0a      	ldr	r3, [pc, #40]	; (800474c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	429a      	cmp	r2, r3
 8004728:	d202      	bcs.n	8004730 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800472a:	4a08      	ldr	r2, [pc, #32]	; (800474c <prvAddCurrentTaskToDelayedList+0xa4>)
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	6013      	str	r3, [r2, #0]
}
 8004730:	bf00      	nop
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	20000cfc 	.word	0x20000cfc
 800473c:	20000824 	.word	0x20000824
 8004740:	20000ce4 	.word	0x20000ce4
 8004744:	20000cb4 	.word	0x20000cb4
 8004748:	20000cb0 	.word	0x20000cb0
 800474c:	20000d18 	.word	0x20000d18

08004750 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b08a      	sub	sp, #40	; 0x28
 8004754:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004756:	2300      	movs	r3, #0
 8004758:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800475a:	f000 facb 	bl	8004cf4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800475e:	4b1c      	ldr	r3, [pc, #112]	; (80047d0 <xTimerCreateTimerTask+0x80>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d021      	beq.n	80047aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800476a:	2300      	movs	r3, #0
 800476c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800476e:	1d3a      	adds	r2, r7, #4
 8004770:	f107 0108 	add.w	r1, r7, #8
 8004774:	f107 030c 	add.w	r3, r7, #12
 8004778:	4618      	mov	r0, r3
 800477a:	f7fe fb43 	bl	8002e04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800477e:	6879      	ldr	r1, [r7, #4]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	9202      	str	r2, [sp, #8]
 8004786:	9301      	str	r3, [sp, #4]
 8004788:	2302      	movs	r3, #2
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	2300      	movs	r3, #0
 800478e:	460a      	mov	r2, r1
 8004790:	4910      	ldr	r1, [pc, #64]	; (80047d4 <xTimerCreateTimerTask+0x84>)
 8004792:	4811      	ldr	r0, [pc, #68]	; (80047d8 <xTimerCreateTimerTask+0x88>)
 8004794:	f7ff f8e4 	bl	8003960 <xTaskCreateStatic>
 8004798:	4603      	mov	r3, r0
 800479a:	4a10      	ldr	r2, [pc, #64]	; (80047dc <xTimerCreateTimerTask+0x8c>)
 800479c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800479e:	4b0f      	ldr	r3, [pc, #60]	; (80047dc <xTimerCreateTimerTask+0x8c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80047a6:	2301      	movs	r3, #1
 80047a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10a      	bne.n	80047c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	613b      	str	r3, [r7, #16]
}
 80047c2:	bf00      	nop
 80047c4:	e7fe      	b.n	80047c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80047c6:	697b      	ldr	r3, [r7, #20]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	20000d54 	.word	0x20000d54
 80047d4:	080055d4 	.word	0x080055d4
 80047d8:	080048fd 	.word	0x080048fd
 80047dc:	20000d58 	.word	0x20000d58

080047e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b08a      	sub	sp, #40	; 0x28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80047ee:	2300      	movs	r3, #0
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10a      	bne.n	800480e <xTimerGenericCommand+0x2e>
	__asm volatile
 80047f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fc:	f383 8811 	msr	BASEPRI, r3
 8004800:	f3bf 8f6f 	isb	sy
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	623b      	str	r3, [r7, #32]
}
 800480a:	bf00      	nop
 800480c:	e7fe      	b.n	800480c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800480e:	4b1a      	ldr	r3, [pc, #104]	; (8004878 <xTimerGenericCommand+0x98>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d02a      	beq.n	800486c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2b05      	cmp	r3, #5
 8004826:	dc18      	bgt.n	800485a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004828:	f7ff feb2 	bl	8004590 <xTaskGetSchedulerState>
 800482c:	4603      	mov	r3, r0
 800482e:	2b02      	cmp	r3, #2
 8004830:	d109      	bne.n	8004846 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004832:	4b11      	ldr	r3, [pc, #68]	; (8004878 <xTimerGenericCommand+0x98>)
 8004834:	6818      	ldr	r0, [r3, #0]
 8004836:	f107 0110 	add.w	r1, r7, #16
 800483a:	2300      	movs	r3, #0
 800483c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800483e:	f7fe fcad 	bl	800319c <xQueueGenericSend>
 8004842:	6278      	str	r0, [r7, #36]	; 0x24
 8004844:	e012      	b.n	800486c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004846:	4b0c      	ldr	r3, [pc, #48]	; (8004878 <xTimerGenericCommand+0x98>)
 8004848:	6818      	ldr	r0, [r3, #0]
 800484a:	f107 0110 	add.w	r1, r7, #16
 800484e:	2300      	movs	r3, #0
 8004850:	2200      	movs	r2, #0
 8004852:	f7fe fca3 	bl	800319c <xQueueGenericSend>
 8004856:	6278      	str	r0, [r7, #36]	; 0x24
 8004858:	e008      	b.n	800486c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800485a:	4b07      	ldr	r3, [pc, #28]	; (8004878 <xTimerGenericCommand+0x98>)
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	f107 0110 	add.w	r1, r7, #16
 8004862:	2300      	movs	r3, #0
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	f7fe fd97 	bl	8003398 <xQueueGenericSendFromISR>
 800486a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800486e:	4618      	mov	r0, r3
 8004870:	3728      	adds	r7, #40	; 0x28
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	20000d54 	.word	0x20000d54

0800487c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b088      	sub	sp, #32
 8004880:	af02      	add	r7, sp, #8
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004886:	4b1c      	ldr	r3, [pc, #112]	; (80048f8 <prvProcessExpiredTimer+0x7c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	3304      	adds	r3, #4
 8004894:	4618      	mov	r0, r3
 8004896:	f7fe fb55 	bl	8002f44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d122      	bne.n	80048e8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	699a      	ldr	r2, [r3, #24]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	18d1      	adds	r1, r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	6978      	ldr	r0, [r7, #20]
 80048b0:	f000 f8c8 	bl	8004a44 <prvInsertTimerInActiveList>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d016      	beq.n	80048e8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048ba:	2300      	movs	r3, #0
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	2300      	movs	r3, #0
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	2100      	movs	r1, #0
 80048c4:	6978      	ldr	r0, [r7, #20]
 80048c6:	f7ff ff8b 	bl	80047e0 <xTimerGenericCommand>
 80048ca:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10a      	bne.n	80048e8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	60fb      	str	r3, [r7, #12]
}
 80048e4:	bf00      	nop
 80048e6:	e7fe      	b.n	80048e6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	6978      	ldr	r0, [r7, #20]
 80048ee:	4798      	blx	r3
}
 80048f0:	bf00      	nop
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	20000d4c 	.word	0x20000d4c

080048fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004904:	f107 0308 	add.w	r3, r7, #8
 8004908:	4618      	mov	r0, r3
 800490a:	f000 f857 	bl	80049bc <prvGetNextExpireTime>
 800490e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	4619      	mov	r1, r3
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 f803 	bl	8004920 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800491a:	f000 f8d5 	bl	8004ac8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800491e:	e7f1      	b.n	8004904 <prvTimerTask+0x8>

08004920 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800492a:	f7ff fa4b 	bl	8003dc4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800492e:	f107 0308 	add.w	r3, r7, #8
 8004932:	4618      	mov	r0, r3
 8004934:	f000 f866 	bl	8004a04 <prvSampleTimeNow>
 8004938:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d130      	bne.n	80049a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10a      	bne.n	800495c <prvProcessTimerOrBlockTask+0x3c>
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	429a      	cmp	r2, r3
 800494c:	d806      	bhi.n	800495c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800494e:	f7ff fa47 	bl	8003de0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004952:	68f9      	ldr	r1, [r7, #12]
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7ff ff91 	bl	800487c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800495a:	e024      	b.n	80049a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d008      	beq.n	8004974 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004962:	4b13      	ldr	r3, [pc, #76]	; (80049b0 <prvProcessTimerOrBlockTask+0x90>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	bf0c      	ite	eq
 800496c:	2301      	moveq	r3, #1
 800496e:	2300      	movne	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004974:	4b0f      	ldr	r3, [pc, #60]	; (80049b4 <prvProcessTimerOrBlockTask+0x94>)
 8004976:	6818      	ldr	r0, [r3, #0]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	4619      	mov	r1, r3
 8004982:	f7fe ffb9 	bl	80038f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004986:	f7ff fa2b 	bl	8003de0 <xTaskResumeAll>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10a      	bne.n	80049a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004990:	4b09      	ldr	r3, [pc, #36]	; (80049b8 <prvProcessTimerOrBlockTask+0x98>)
 8004992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	f3bf 8f6f 	isb	sy
}
 80049a0:	e001      	b.n	80049a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80049a2:	f7ff fa1d 	bl	8003de0 <xTaskResumeAll>
}
 80049a6:	bf00      	nop
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	20000d50 	.word	0x20000d50
 80049b4:	20000d54 	.word	0x20000d54
 80049b8:	e000ed04 	.word	0xe000ed04

080049bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80049c4:	4b0e      	ldr	r3, [pc, #56]	; (8004a00 <prvGetNextExpireTime+0x44>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	bf0c      	ite	eq
 80049ce:	2301      	moveq	r3, #1
 80049d0:	2300      	movne	r3, #0
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	461a      	mov	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d105      	bne.n	80049ee <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049e2:	4b07      	ldr	r3, [pc, #28]	; (8004a00 <prvGetNextExpireTime+0x44>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	60fb      	str	r3, [r7, #12]
 80049ec:	e001      	b.n	80049f2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80049f2:	68fb      	ldr	r3, [r7, #12]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc80      	pop	{r7}
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	20000d4c 	.word	0x20000d4c

08004a04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a0c:	f7ff fa86 	bl	8003f1c <xTaskGetTickCount>
 8004a10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a12:	4b0b      	ldr	r3, [pc, #44]	; (8004a40 <prvSampleTimeNow+0x3c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d205      	bcs.n	8004a28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a1c:	f000 f908 	bl	8004c30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	e002      	b.n	8004a2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a2e:	4a04      	ldr	r2, [pc, #16]	; (8004a40 <prvSampleTimeNow+0x3c>)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a34:	68fb      	ldr	r3, [r7, #12]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	20000d5c 	.word	0x20000d5c

08004a44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
 8004a50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004a52:	2300      	movs	r3, #0
 8004a54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d812      	bhi.n	8004a90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	1ad2      	subs	r2, r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d302      	bcc.n	8004a7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	e01b      	b.n	8004ab6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a7e:	4b10      	ldr	r3, [pc, #64]	; (8004ac0 <prvInsertTimerInActiveList+0x7c>)
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	3304      	adds	r3, #4
 8004a86:	4619      	mov	r1, r3
 8004a88:	4610      	mov	r0, r2
 8004a8a:	f7fe fa23 	bl	8002ed4 <vListInsert>
 8004a8e:	e012      	b.n	8004ab6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d206      	bcs.n	8004aa6 <prvInsertTimerInActiveList+0x62>
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d302      	bcc.n	8004aa6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	617b      	str	r3, [r7, #20]
 8004aa4:	e007      	b.n	8004ab6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004aa6:	4b07      	ldr	r3, [pc, #28]	; (8004ac4 <prvInsertTimerInActiveList+0x80>)
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	3304      	adds	r3, #4
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	f7fe fa0f 	bl	8002ed4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004ab6:	697b      	ldr	r3, [r7, #20]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3718      	adds	r7, #24
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	20000d50 	.word	0x20000d50
 8004ac4:	20000d4c 	.word	0x20000d4c

08004ac8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08e      	sub	sp, #56	; 0x38
 8004acc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ace:	e09d      	b.n	8004c0c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	da18      	bge.n	8004b08 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004ad6:	1d3b      	adds	r3, r7, #4
 8004ad8:	3304      	adds	r3, #4
 8004ada:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10a      	bne.n	8004af8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	61fb      	str	r3, [r7, #28]
}
 8004af4:	bf00      	nop
 8004af6:	e7fe      	b.n	8004af6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004afe:	6850      	ldr	r0, [r2, #4]
 8004b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b02:	6892      	ldr	r2, [r2, #8]
 8004b04:	4611      	mov	r1, r2
 8004b06:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	db7d      	blt.n	8004c0a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d004      	beq.n	8004b24 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fe fa10 	bl	8002f44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b24:	463b      	mov	r3, r7
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7ff ff6c 	bl	8004a04 <prvSampleTimeNow>
 8004b2c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b09      	cmp	r3, #9
 8004b32:	d86b      	bhi.n	8004c0c <prvProcessReceivedCommands+0x144>
 8004b34:	a201      	add	r2, pc, #4	; (adr r2, 8004b3c <prvProcessReceivedCommands+0x74>)
 8004b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3a:	bf00      	nop
 8004b3c:	08004b65 	.word	0x08004b65
 8004b40:	08004b65 	.word	0x08004b65
 8004b44:	08004b65 	.word	0x08004b65
 8004b48:	08004c0d 	.word	0x08004c0d
 8004b4c:	08004bc1 	.word	0x08004bc1
 8004b50:	08004bf9 	.word	0x08004bf9
 8004b54:	08004b65 	.word	0x08004b65
 8004b58:	08004b65 	.word	0x08004b65
 8004b5c:	08004c0d 	.word	0x08004c0d
 8004b60:	08004bc1 	.word	0x08004bc1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	18d1      	adds	r1, r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b72:	f7ff ff67 	bl	8004a44 <prvInsertTimerInActiveList>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d047      	beq.n	8004c0c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b82:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d13f      	bne.n	8004c0c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	441a      	add	r2, r3
 8004b94:	2300      	movs	r3, #0
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	2300      	movs	r3, #0
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b9e:	f7ff fe1f 	bl	80047e0 <xTimerGenericCommand>
 8004ba2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d130      	bne.n	8004c0c <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	61bb      	str	r3, [r7, #24]
}
 8004bbc:	bf00      	nop
 8004bbe:	e7fe      	b.n	8004bbe <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10a      	bne.n	8004be4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	617b      	str	r3, [r7, #20]
}
 8004be0:	bf00      	nop
 8004be2:	e7fe      	b.n	8004be2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be6:	699a      	ldr	r2, [r3, #24]
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	18d1      	adds	r1, r2, r3
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bf2:	f7ff ff27 	bl	8004a44 <prvInsertTimerInActiveList>
					break;
 8004bf6:	e009      	b.n	8004c0c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d104      	bne.n	8004c0c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004c02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c04:	f000 fb6e 	bl	80052e4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004c08:	e000      	b.n	8004c0c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004c0a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c0c:	4b07      	ldr	r3, [pc, #28]	; (8004c2c <prvProcessReceivedCommands+0x164>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	1d39      	adds	r1, r7, #4
 8004c12:	2200      	movs	r2, #0
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fe fc57 	bl	80034c8 <xQueueReceive>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f47f af57 	bne.w	8004ad0 <prvProcessReceivedCommands+0x8>
	}
}
 8004c22:	bf00      	nop
 8004c24:	bf00      	nop
 8004c26:	3730      	adds	r7, #48	; 0x30
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	20000d54 	.word	0x20000d54

08004c30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b088      	sub	sp, #32
 8004c34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c36:	e045      	b.n	8004cc4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c38:	4b2c      	ldr	r3, [pc, #176]	; (8004cec <prvSwitchTimerLists+0xbc>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c42:	4b2a      	ldr	r3, [pc, #168]	; (8004cec <prvSwitchTimerLists+0xbc>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	3304      	adds	r3, #4
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7fe f977 	bl	8002f44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d12e      	bne.n	8004cc4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d90e      	bls.n	8004c96 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c84:	4b19      	ldr	r3, [pc, #100]	; (8004cec <prvSwitchTimerLists+0xbc>)
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	3304      	adds	r3, #4
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4610      	mov	r0, r2
 8004c90:	f7fe f920 	bl	8002ed4 <vListInsert>
 8004c94:	e016      	b.n	8004cc4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c96:	2300      	movs	r3, #0
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f7ff fd9d 	bl	80047e0 <xTimerGenericCommand>
 8004ca6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10a      	bne.n	8004cc4 <prvSwitchTimerLists+0x94>
	__asm volatile
 8004cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb2:	f383 8811 	msr	BASEPRI, r3
 8004cb6:	f3bf 8f6f 	isb	sy
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	603b      	str	r3, [r7, #0]
}
 8004cc0:	bf00      	nop
 8004cc2:	e7fe      	b.n	8004cc2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004cc4:	4b09      	ldr	r3, [pc, #36]	; (8004cec <prvSwitchTimerLists+0xbc>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1b4      	bne.n	8004c38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004cce:	4b07      	ldr	r3, [pc, #28]	; (8004cec <prvSwitchTimerLists+0xbc>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004cd4:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <prvSwitchTimerLists+0xc0>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a04      	ldr	r2, [pc, #16]	; (8004cec <prvSwitchTimerLists+0xbc>)
 8004cda:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004cdc:	4a04      	ldr	r2, [pc, #16]	; (8004cf0 <prvSwitchTimerLists+0xc0>)
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	6013      	str	r3, [r2, #0]
}
 8004ce2:	bf00      	nop
 8004ce4:	3718      	adds	r7, #24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20000d4c 	.word	0x20000d4c
 8004cf0:	20000d50 	.word	0x20000d50

08004cf4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004cfa:	f000 f92f 	bl	8004f5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004cfe:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <prvCheckForValidListAndQueue+0x60>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d120      	bne.n	8004d48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004d06:	4814      	ldr	r0, [pc, #80]	; (8004d58 <prvCheckForValidListAndQueue+0x64>)
 8004d08:	f7fe f896 	bl	8002e38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d0c:	4813      	ldr	r0, [pc, #76]	; (8004d5c <prvCheckForValidListAndQueue+0x68>)
 8004d0e:	f7fe f893 	bl	8002e38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d12:	4b13      	ldr	r3, [pc, #76]	; (8004d60 <prvCheckForValidListAndQueue+0x6c>)
 8004d14:	4a10      	ldr	r2, [pc, #64]	; (8004d58 <prvCheckForValidListAndQueue+0x64>)
 8004d16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d18:	4b12      	ldr	r3, [pc, #72]	; (8004d64 <prvCheckForValidListAndQueue+0x70>)
 8004d1a:	4a10      	ldr	r2, [pc, #64]	; (8004d5c <prvCheckForValidListAndQueue+0x68>)
 8004d1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d1e:	2300      	movs	r3, #0
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	4b11      	ldr	r3, [pc, #68]	; (8004d68 <prvCheckForValidListAndQueue+0x74>)
 8004d24:	4a11      	ldr	r2, [pc, #68]	; (8004d6c <prvCheckForValidListAndQueue+0x78>)
 8004d26:	2110      	movs	r1, #16
 8004d28:	200a      	movs	r0, #10
 8004d2a:	f7fe f99d 	bl	8003068 <xQueueGenericCreateStatic>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	4a08      	ldr	r2, [pc, #32]	; (8004d54 <prvCheckForValidListAndQueue+0x60>)
 8004d32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004d34:	4b07      	ldr	r3, [pc, #28]	; (8004d54 <prvCheckForValidListAndQueue+0x60>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d005      	beq.n	8004d48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d3c:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <prvCheckForValidListAndQueue+0x60>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	490b      	ldr	r1, [pc, #44]	; (8004d70 <prvCheckForValidListAndQueue+0x7c>)
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fe fdb0 	bl	80038a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d48:	f000 f938 	bl	8004fbc <vPortExitCritical>
}
 8004d4c:	bf00      	nop
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	20000d54 	.word	0x20000d54
 8004d58:	20000d24 	.word	0x20000d24
 8004d5c:	20000d38 	.word	0x20000d38
 8004d60:	20000d4c 	.word	0x20000d4c
 8004d64:	20000d50 	.word	0x20000d50
 8004d68:	20000e00 	.word	0x20000e00
 8004d6c:	20000d60 	.word	0x20000d60
 8004d70:	080055dc 	.word	0x080055dc

08004d74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	3b04      	subs	r3, #4
 8004d84:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	3b04      	subs	r3, #4
 8004d92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	f023 0201 	bic.w	r2, r3, #1
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	3b04      	subs	r3, #4
 8004da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004da4:	4a08      	ldr	r2, [pc, #32]	; (8004dc8 <pxPortInitialiseStack+0x54>)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	3b14      	subs	r3, #20
 8004dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	3b20      	subs	r3, #32
 8004dba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr
 8004dc8:	08004dcd 	.word	0x08004dcd

08004dcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004dd6:	4b12      	ldr	r3, [pc, #72]	; (8004e20 <prvTaskExitError+0x54>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dde:	d00a      	beq.n	8004df6 <prvTaskExitError+0x2a>
	__asm volatile
 8004de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	60fb      	str	r3, [r7, #12]
}
 8004df2:	bf00      	nop
 8004df4:	e7fe      	b.n	8004df4 <prvTaskExitError+0x28>
	__asm volatile
 8004df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfa:	f383 8811 	msr	BASEPRI, r3
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	f3bf 8f4f 	dsb	sy
 8004e06:	60bb      	str	r3, [r7, #8]
}
 8004e08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e0a:	bf00      	nop
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0fc      	beq.n	8004e0c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e12:	bf00      	nop
 8004e14:	bf00      	nop
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bc80      	pop	{r7}
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	2000000c 	.word	0x2000000c
	...

08004e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e30:	4b07      	ldr	r3, [pc, #28]	; (8004e50 <pxCurrentTCBConst2>)
 8004e32:	6819      	ldr	r1, [r3, #0]
 8004e34:	6808      	ldr	r0, [r1, #0]
 8004e36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004e3a:	f380 8809 	msr	PSP, r0
 8004e3e:	f3bf 8f6f 	isb	sy
 8004e42:	f04f 0000 	mov.w	r0, #0
 8004e46:	f380 8811 	msr	BASEPRI, r0
 8004e4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004e4e:	4770      	bx	lr

08004e50 <pxCurrentTCBConst2>:
 8004e50:	20000824 	.word	0x20000824
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004e54:	bf00      	nop
 8004e56:	bf00      	nop

08004e58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004e58:	4806      	ldr	r0, [pc, #24]	; (8004e74 <prvPortStartFirstTask+0x1c>)
 8004e5a:	6800      	ldr	r0, [r0, #0]
 8004e5c:	6800      	ldr	r0, [r0, #0]
 8004e5e:	f380 8808 	msr	MSP, r0
 8004e62:	b662      	cpsie	i
 8004e64:	b661      	cpsie	f
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	df00      	svc	0
 8004e70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e72:	bf00      	nop
 8004e74:	e000ed08 	.word	0xe000ed08

08004e78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e7e:	4b32      	ldr	r3, [pc, #200]	; (8004f48 <xPortStartScheduler+0xd0>)
 8004e80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	22ff      	movs	r2, #255	; 0xff
 8004e8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e98:	78fb      	ldrb	r3, [r7, #3]
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	4b2a      	ldr	r3, [pc, #168]	; (8004f4c <xPortStartScheduler+0xd4>)
 8004ea4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ea6:	4b2a      	ldr	r3, [pc, #168]	; (8004f50 <xPortStartScheduler+0xd8>)
 8004ea8:	2207      	movs	r2, #7
 8004eaa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004eac:	e009      	b.n	8004ec2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004eae:	4b28      	ldr	r3, [pc, #160]	; (8004f50 <xPortStartScheduler+0xd8>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	4a26      	ldr	r2, [pc, #152]	; (8004f50 <xPortStartScheduler+0xd8>)
 8004eb6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004eb8:	78fb      	ldrb	r3, [r7, #3]
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ec2:	78fb      	ldrb	r3, [r7, #3]
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eca:	2b80      	cmp	r3, #128	; 0x80
 8004ecc:	d0ef      	beq.n	8004eae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ece:	4b20      	ldr	r3, [pc, #128]	; (8004f50 <xPortStartScheduler+0xd8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f1c3 0307 	rsb	r3, r3, #7
 8004ed6:	2b04      	cmp	r3, #4
 8004ed8:	d00a      	beq.n	8004ef0 <xPortStartScheduler+0x78>
	__asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	60bb      	str	r3, [r7, #8]
}
 8004eec:	bf00      	nop
 8004eee:	e7fe      	b.n	8004eee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ef0:	4b17      	ldr	r3, [pc, #92]	; (8004f50 <xPortStartScheduler+0xd8>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	021b      	lsls	r3, r3, #8
 8004ef6:	4a16      	ldr	r2, [pc, #88]	; (8004f50 <xPortStartScheduler+0xd8>)
 8004ef8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004efa:	4b15      	ldr	r3, [pc, #84]	; (8004f50 <xPortStartScheduler+0xd8>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f02:	4a13      	ldr	r2, [pc, #76]	; (8004f50 <xPortStartScheduler+0xd8>)
 8004f04:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f0e:	4b11      	ldr	r3, [pc, #68]	; (8004f54 <xPortStartScheduler+0xdc>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a10      	ldr	r2, [pc, #64]	; (8004f54 <xPortStartScheduler+0xdc>)
 8004f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f1a:	4b0e      	ldr	r3, [pc, #56]	; (8004f54 <xPortStartScheduler+0xdc>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a0d      	ldr	r2, [pc, #52]	; (8004f54 <xPortStartScheduler+0xdc>)
 8004f20:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004f24:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f26:	f000 f8b9 	bl	800509c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f2a:	4b0b      	ldr	r3, [pc, #44]	; (8004f58 <xPortStartScheduler+0xe0>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f30:	f7ff ff92 	bl	8004e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f34:	f7ff f8be 	bl	80040b4 <vTaskSwitchContext>
	prvTaskExitError();
 8004f38:	f7ff ff48 	bl	8004dcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	e000e400 	.word	0xe000e400
 8004f4c:	20000e50 	.word	0x20000e50
 8004f50:	20000e54 	.word	0x20000e54
 8004f54:	e000ed20 	.word	0xe000ed20
 8004f58:	2000000c 	.word	0x2000000c

08004f5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
	__asm volatile
 8004f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	607b      	str	r3, [r7, #4]
}
 8004f74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f76:	4b0f      	ldr	r3, [pc, #60]	; (8004fb4 <vPortEnterCritical+0x58>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	4a0d      	ldr	r2, [pc, #52]	; (8004fb4 <vPortEnterCritical+0x58>)
 8004f7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f80:	4b0c      	ldr	r3, [pc, #48]	; (8004fb4 <vPortEnterCritical+0x58>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d10f      	bne.n	8004fa8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f88:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <vPortEnterCritical+0x5c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00a      	beq.n	8004fa8 <vPortEnterCritical+0x4c>
	__asm volatile
 8004f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	603b      	str	r3, [r7, #0]
}
 8004fa4:	bf00      	nop
 8004fa6:	e7fe      	b.n	8004fa6 <vPortEnterCritical+0x4a>
	}
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bc80      	pop	{r7}
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	2000000c 	.word	0x2000000c
 8004fb8:	e000ed04 	.word	0xe000ed04

08004fbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004fc2:	4b11      	ldr	r3, [pc, #68]	; (8005008 <vPortExitCritical+0x4c>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10a      	bne.n	8004fe0 <vPortExitCritical+0x24>
	__asm volatile
 8004fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fce:	f383 8811 	msr	BASEPRI, r3
 8004fd2:	f3bf 8f6f 	isb	sy
 8004fd6:	f3bf 8f4f 	dsb	sy
 8004fda:	607b      	str	r3, [r7, #4]
}
 8004fdc:	bf00      	nop
 8004fde:	e7fe      	b.n	8004fde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004fe0:	4b09      	ldr	r3, [pc, #36]	; (8005008 <vPortExitCritical+0x4c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	4a08      	ldr	r2, [pc, #32]	; (8005008 <vPortExitCritical+0x4c>)
 8004fe8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004fea:	4b07      	ldr	r3, [pc, #28]	; (8005008 <vPortExitCritical+0x4c>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d105      	bne.n	8004ffe <vPortExitCritical+0x42>
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	f383 8811 	msr	BASEPRI, r3
}
 8004ffc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	bc80      	pop	{r7}
 8005006:	4770      	bx	lr
 8005008:	2000000c 	.word	0x2000000c
 800500c:	00000000 	.word	0x00000000

08005010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005010:	f3ef 8009 	mrs	r0, PSP
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	4b0d      	ldr	r3, [pc, #52]	; (8005050 <pxCurrentTCBConst>)
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005020:	6010      	str	r0, [r2, #0]
 8005022:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005026:	f04f 0050 	mov.w	r0, #80	; 0x50
 800502a:	f380 8811 	msr	BASEPRI, r0
 800502e:	f7ff f841 	bl	80040b4 <vTaskSwitchContext>
 8005032:	f04f 0000 	mov.w	r0, #0
 8005036:	f380 8811 	msr	BASEPRI, r0
 800503a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800503e:	6819      	ldr	r1, [r3, #0]
 8005040:	6808      	ldr	r0, [r1, #0]
 8005042:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005046:	f380 8809 	msr	PSP, r0
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	4770      	bx	lr

08005050 <pxCurrentTCBConst>:
 8005050:	20000824 	.word	0x20000824
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005054:	bf00      	nop
 8005056:	bf00      	nop

08005058 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
	__asm volatile
 800505e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	607b      	str	r3, [r7, #4]
}
 8005070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005072:	f7fe ff61 	bl	8003f38 <xTaskIncrementTick>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800507c:	4b06      	ldr	r3, [pc, #24]	; (8005098 <SysTick_Handler+0x40>)
 800507e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	2300      	movs	r3, #0
 8005086:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	f383 8811 	msr	BASEPRI, r3
}
 800508e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005090:	bf00      	nop
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	e000ed04 	.word	0xe000ed04

0800509c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800509c:	b480      	push	{r7}
 800509e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050a0:	4b0a      	ldr	r3, [pc, #40]	; (80050cc <vPortSetupTimerInterrupt+0x30>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050a6:	4b0a      	ldr	r3, [pc, #40]	; (80050d0 <vPortSetupTimerInterrupt+0x34>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050ac:	4b09      	ldr	r3, [pc, #36]	; (80050d4 <vPortSetupTimerInterrupt+0x38>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a09      	ldr	r2, [pc, #36]	; (80050d8 <vPortSetupTimerInterrupt+0x3c>)
 80050b2:	fba2 2303 	umull	r2, r3, r2, r3
 80050b6:	099b      	lsrs	r3, r3, #6
 80050b8:	4a08      	ldr	r2, [pc, #32]	; (80050dc <vPortSetupTimerInterrupt+0x40>)
 80050ba:	3b01      	subs	r3, #1
 80050bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80050be:	4b03      	ldr	r3, [pc, #12]	; (80050cc <vPortSetupTimerInterrupt+0x30>)
 80050c0:	2207      	movs	r2, #7
 80050c2:	601a      	str	r2, [r3, #0]
}
 80050c4:	bf00      	nop
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bc80      	pop	{r7}
 80050ca:	4770      	bx	lr
 80050cc:	e000e010 	.word	0xe000e010
 80050d0:	e000e018 	.word	0xe000e018
 80050d4:	20000000 	.word	0x20000000
 80050d8:	10624dd3 	.word	0x10624dd3
 80050dc:	e000e014 	.word	0xe000e014

080050e0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80050e6:	f3ef 8305 	mrs	r3, IPSR
 80050ea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2b0f      	cmp	r3, #15
 80050f0:	d914      	bls.n	800511c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80050f2:	4a16      	ldr	r2, [pc, #88]	; (800514c <vPortValidateInterruptPriority+0x6c>)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4413      	add	r3, r2
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80050fc:	4b14      	ldr	r3, [pc, #80]	; (8005150 <vPortValidateInterruptPriority+0x70>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	7afa      	ldrb	r2, [r7, #11]
 8005102:	429a      	cmp	r2, r3
 8005104:	d20a      	bcs.n	800511c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	607b      	str	r3, [r7, #4]
}
 8005118:	bf00      	nop
 800511a:	e7fe      	b.n	800511a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800511c:	4b0d      	ldr	r3, [pc, #52]	; (8005154 <vPortValidateInterruptPriority+0x74>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005124:	4b0c      	ldr	r3, [pc, #48]	; (8005158 <vPortValidateInterruptPriority+0x78>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	429a      	cmp	r2, r3
 800512a:	d90a      	bls.n	8005142 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800512c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	603b      	str	r3, [r7, #0]
}
 800513e:	bf00      	nop
 8005140:	e7fe      	b.n	8005140 <vPortValidateInterruptPriority+0x60>
	}
 8005142:	bf00      	nop
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	bc80      	pop	{r7}
 800514a:	4770      	bx	lr
 800514c:	e000e3f0 	.word	0xe000e3f0
 8005150:	20000e50 	.word	0x20000e50
 8005154:	e000ed0c 	.word	0xe000ed0c
 8005158:	20000e54 	.word	0x20000e54

0800515c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b08a      	sub	sp, #40	; 0x28
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005164:	2300      	movs	r3, #0
 8005166:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005168:	f7fe fe2c 	bl	8003dc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800516c:	4b58      	ldr	r3, [pc, #352]	; (80052d0 <pvPortMalloc+0x174>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005174:	f000 f910 	bl	8005398 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005178:	4b56      	ldr	r3, [pc, #344]	; (80052d4 <pvPortMalloc+0x178>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4013      	ands	r3, r2
 8005180:	2b00      	cmp	r3, #0
 8005182:	f040 808e 	bne.w	80052a2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d01d      	beq.n	80051c8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800518c:	2208      	movs	r2, #8
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4413      	add	r3, r2
 8005192:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f003 0307 	and.w	r3, r3, #7
 800519a:	2b00      	cmp	r3, #0
 800519c:	d014      	beq.n	80051c8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f023 0307 	bic.w	r3, r3, #7
 80051a4:	3308      	adds	r3, #8
 80051a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f003 0307 	and.w	r3, r3, #7
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <pvPortMalloc+0x6c>
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	617b      	str	r3, [r7, #20]
}
 80051c4:	bf00      	nop
 80051c6:	e7fe      	b.n	80051c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d069      	beq.n	80052a2 <pvPortMalloc+0x146>
 80051ce:	4b42      	ldr	r3, [pc, #264]	; (80052d8 <pvPortMalloc+0x17c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d864      	bhi.n	80052a2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80051d8:	4b40      	ldr	r3, [pc, #256]	; (80052dc <pvPortMalloc+0x180>)
 80051da:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80051dc:	4b3f      	ldr	r3, [pc, #252]	; (80052dc <pvPortMalloc+0x180>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051e2:	e004      	b.n	80051ee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d903      	bls.n	8005200 <pvPortMalloc+0xa4>
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1f1      	bne.n	80051e4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005200:	4b33      	ldr	r3, [pc, #204]	; (80052d0 <pvPortMalloc+0x174>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005206:	429a      	cmp	r2, r3
 8005208:	d04b      	beq.n	80052a2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2208      	movs	r2, #8
 8005210:	4413      	add	r3, r2
 8005212:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	1ad2      	subs	r2, r2, r3
 8005224:	2308      	movs	r3, #8
 8005226:	005b      	lsls	r3, r3, #1
 8005228:	429a      	cmp	r2, r3
 800522a:	d91f      	bls.n	800526c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800522c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4413      	add	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	f003 0307 	and.w	r3, r3, #7
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00a      	beq.n	8005254 <pvPortMalloc+0xf8>
	__asm volatile
 800523e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	613b      	str	r3, [r7, #16]
}
 8005250:	bf00      	nop
 8005252:	e7fe      	b.n	8005252 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	1ad2      	subs	r2, r2, r3
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005266:	69b8      	ldr	r0, [r7, #24]
 8005268:	f000 f8f8 	bl	800545c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800526c:	4b1a      	ldr	r3, [pc, #104]	; (80052d8 <pvPortMalloc+0x17c>)
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	4a18      	ldr	r2, [pc, #96]	; (80052d8 <pvPortMalloc+0x17c>)
 8005278:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800527a:	4b17      	ldr	r3, [pc, #92]	; (80052d8 <pvPortMalloc+0x17c>)
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	4b18      	ldr	r3, [pc, #96]	; (80052e0 <pvPortMalloc+0x184>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	429a      	cmp	r2, r3
 8005284:	d203      	bcs.n	800528e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005286:	4b14      	ldr	r3, [pc, #80]	; (80052d8 <pvPortMalloc+0x17c>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a15      	ldr	r2, [pc, #84]	; (80052e0 <pvPortMalloc+0x184>)
 800528c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	4b10      	ldr	r3, [pc, #64]	; (80052d4 <pvPortMalloc+0x178>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	431a      	orrs	r2, r3
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	2200      	movs	r2, #0
 80052a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052a2:	f7fe fd9d 	bl	8003de0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00a      	beq.n	80052c6 <pvPortMalloc+0x16a>
	__asm volatile
 80052b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b4:	f383 8811 	msr	BASEPRI, r3
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	60fb      	str	r3, [r7, #12]
}
 80052c2:	bf00      	nop
 80052c4:	e7fe      	b.n	80052c4 <pvPortMalloc+0x168>
	return pvReturn;
 80052c6:	69fb      	ldr	r3, [r7, #28]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3728      	adds	r7, #40	; 0x28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	20001a60 	.word	0x20001a60
 80052d4:	20001a6c 	.word	0x20001a6c
 80052d8:	20001a64 	.word	0x20001a64
 80052dc:	20001a58 	.word	0x20001a58
 80052e0:	20001a68 	.word	0x20001a68

080052e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d048      	beq.n	8005388 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80052f6:	2308      	movs	r3, #8
 80052f8:	425b      	negs	r3, r3
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	4413      	add	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	4b21      	ldr	r3, [pc, #132]	; (8005390 <vPortFree+0xac>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4013      	ands	r3, r2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10a      	bne.n	8005328 <vPortFree+0x44>
	__asm volatile
 8005312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005316:	f383 8811 	msr	BASEPRI, r3
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	f3bf 8f4f 	dsb	sy
 8005322:	60fb      	str	r3, [r7, #12]
}
 8005324:	bf00      	nop
 8005326:	e7fe      	b.n	8005326 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00a      	beq.n	8005346 <vPortFree+0x62>
	__asm volatile
 8005330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	60bb      	str	r3, [r7, #8]
}
 8005342:	bf00      	nop
 8005344:	e7fe      	b.n	8005344 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	4b11      	ldr	r3, [pc, #68]	; (8005390 <vPortFree+0xac>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4013      	ands	r3, r2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d019      	beq.n	8005388 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d115      	bne.n	8005388 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	4b0b      	ldr	r3, [pc, #44]	; (8005390 <vPortFree+0xac>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	43db      	mvns	r3, r3
 8005366:	401a      	ands	r2, r3
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800536c:	f7fe fd2a 	bl	8003dc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	4b07      	ldr	r3, [pc, #28]	; (8005394 <vPortFree+0xb0>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4413      	add	r3, r2
 800537a:	4a06      	ldr	r2, [pc, #24]	; (8005394 <vPortFree+0xb0>)
 800537c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800537e:	6938      	ldr	r0, [r7, #16]
 8005380:	f000 f86c 	bl	800545c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005384:	f7fe fd2c 	bl	8003de0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005388:	bf00      	nop
 800538a:	3718      	adds	r7, #24
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	20001a6c 	.word	0x20001a6c
 8005394:	20001a64 	.word	0x20001a64

08005398 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800539e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80053a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80053a4:	4b27      	ldr	r3, [pc, #156]	; (8005444 <prvHeapInit+0xac>)
 80053a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f003 0307 	and.w	r3, r3, #7
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00c      	beq.n	80053cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	3307      	adds	r3, #7
 80053b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0307 	bic.w	r3, r3, #7
 80053be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	4a1f      	ldr	r2, [pc, #124]	; (8005444 <prvHeapInit+0xac>)
 80053c8:	4413      	add	r3, r2
 80053ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053d0:	4a1d      	ldr	r2, [pc, #116]	; (8005448 <prvHeapInit+0xb0>)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80053d6:	4b1c      	ldr	r3, [pc, #112]	; (8005448 <prvHeapInit+0xb0>)
 80053d8:	2200      	movs	r2, #0
 80053da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	4413      	add	r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80053e4:	2208      	movs	r2, #8
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	1a9b      	subs	r3, r3, r2
 80053ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 0307 	bic.w	r3, r3, #7
 80053f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4a15      	ldr	r2, [pc, #84]	; (800544c <prvHeapInit+0xb4>)
 80053f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80053fa:	4b14      	ldr	r3, [pc, #80]	; (800544c <prvHeapInit+0xb4>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2200      	movs	r2, #0
 8005400:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005402:	4b12      	ldr	r3, [pc, #72]	; (800544c <prvHeapInit+0xb4>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	1ad2      	subs	r2, r2, r3
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005418:	4b0c      	ldr	r3, [pc, #48]	; (800544c <prvHeapInit+0xb4>)
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	4a0a      	ldr	r2, [pc, #40]	; (8005450 <prvHeapInit+0xb8>)
 8005426:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	4a09      	ldr	r2, [pc, #36]	; (8005454 <prvHeapInit+0xbc>)
 800542e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005430:	4b09      	ldr	r3, [pc, #36]	; (8005458 <prvHeapInit+0xc0>)
 8005432:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005436:	601a      	str	r2, [r3, #0]
}
 8005438:	bf00      	nop
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	bc80      	pop	{r7}
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	20000e58 	.word	0x20000e58
 8005448:	20001a58 	.word	0x20001a58
 800544c:	20001a60 	.word	0x20001a60
 8005450:	20001a68 	.word	0x20001a68
 8005454:	20001a64 	.word	0x20001a64
 8005458:	20001a6c 	.word	0x20001a6c

0800545c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005464:	4b27      	ldr	r3, [pc, #156]	; (8005504 <prvInsertBlockIntoFreeList+0xa8>)
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	e002      	b.n	8005470 <prvInsertBlockIntoFreeList+0x14>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	429a      	cmp	r2, r3
 8005478:	d8f7      	bhi.n	800546a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	4413      	add	r3, r2
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	429a      	cmp	r2, r3
 800548a:	d108      	bne.n	800549e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	441a      	add	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	441a      	add	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d118      	bne.n	80054e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	4b14      	ldr	r3, [pc, #80]	; (8005508 <prvInsertBlockIntoFreeList+0xac>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d00d      	beq.n	80054da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	441a      	add	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	e008      	b.n	80054ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80054da:	4b0b      	ldr	r3, [pc, #44]	; (8005508 <prvInsertBlockIntoFreeList+0xac>)
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	e003      	b.n	80054ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d002      	beq.n	80054fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054fa:	bf00      	nop
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	bc80      	pop	{r7}
 8005502:	4770      	bx	lr
 8005504:	20001a58 	.word	0x20001a58
 8005508:	20001a60 	.word	0x20001a60

0800550c <__libc_init_array>:
 800550c:	b570      	push	{r4, r5, r6, lr}
 800550e:	2600      	movs	r6, #0
 8005510:	4d0c      	ldr	r5, [pc, #48]	; (8005544 <__libc_init_array+0x38>)
 8005512:	4c0d      	ldr	r4, [pc, #52]	; (8005548 <__libc_init_array+0x3c>)
 8005514:	1b64      	subs	r4, r4, r5
 8005516:	10a4      	asrs	r4, r4, #2
 8005518:	42a6      	cmp	r6, r4
 800551a:	d109      	bne.n	8005530 <__libc_init_array+0x24>
 800551c:	f000 f830 	bl	8005580 <_init>
 8005520:	2600      	movs	r6, #0
 8005522:	4d0a      	ldr	r5, [pc, #40]	; (800554c <__libc_init_array+0x40>)
 8005524:	4c0a      	ldr	r4, [pc, #40]	; (8005550 <__libc_init_array+0x44>)
 8005526:	1b64      	subs	r4, r4, r5
 8005528:	10a4      	asrs	r4, r4, #2
 800552a:	42a6      	cmp	r6, r4
 800552c:	d105      	bne.n	800553a <__libc_init_array+0x2e>
 800552e:	bd70      	pop	{r4, r5, r6, pc}
 8005530:	f855 3b04 	ldr.w	r3, [r5], #4
 8005534:	4798      	blx	r3
 8005536:	3601      	adds	r6, #1
 8005538:	e7ee      	b.n	8005518 <__libc_init_array+0xc>
 800553a:	f855 3b04 	ldr.w	r3, [r5], #4
 800553e:	4798      	blx	r3
 8005540:	3601      	adds	r6, #1
 8005542:	e7f2      	b.n	800552a <__libc_init_array+0x1e>
 8005544:	08005668 	.word	0x08005668
 8005548:	08005668 	.word	0x08005668
 800554c:	08005668 	.word	0x08005668
 8005550:	0800566c 	.word	0x0800566c

08005554 <memcpy>:
 8005554:	440a      	add	r2, r1
 8005556:	4291      	cmp	r1, r2
 8005558:	f100 33ff 	add.w	r3, r0, #4294967295
 800555c:	d100      	bne.n	8005560 <memcpy+0xc>
 800555e:	4770      	bx	lr
 8005560:	b510      	push	{r4, lr}
 8005562:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005566:	4291      	cmp	r1, r2
 8005568:	f803 4f01 	strb.w	r4, [r3, #1]!
 800556c:	d1f9      	bne.n	8005562 <memcpy+0xe>
 800556e:	bd10      	pop	{r4, pc}

08005570 <memset>:
 8005570:	4603      	mov	r3, r0
 8005572:	4402      	add	r2, r0
 8005574:	4293      	cmp	r3, r2
 8005576:	d100      	bne.n	800557a <memset+0xa>
 8005578:	4770      	bx	lr
 800557a:	f803 1b01 	strb.w	r1, [r3], #1
 800557e:	e7f9      	b.n	8005574 <memset+0x4>

08005580 <_init>:
 8005580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005582:	bf00      	nop
 8005584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005586:	bc08      	pop	{r3}
 8005588:	469e      	mov	lr, r3
 800558a:	4770      	bx	lr

0800558c <_fini>:
 800558c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558e:	bf00      	nop
 8005590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005592:	bc08      	pop	{r3}
 8005594:	469e      	mov	lr, r3
 8005596:	4770      	bx	lr
