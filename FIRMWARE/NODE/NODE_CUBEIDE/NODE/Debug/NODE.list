
NODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000849c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  080085b0  080085b0  000185b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008910  08008910  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08008910  08008910  00018910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008918  08008918  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008918  08008918  00018918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800891c  0800891c  0001891c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010f0  20000080  080089a0  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001170  080089a0  00021170  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001521a  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ef8  00000000  00000000  000352c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  000391c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001460  00000000  00000000  0003a7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c742  00000000  00000000  0003bc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001885a  00000000  00000000  0005837a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b9cb  00000000  00000000  00070bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010c59f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a8c  00000000  00000000  0010c5f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0011307c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  001130a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08008594 	.word	0x08008594

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08008594 	.word	0x08008594

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_uldivmod>:
 8000b28:	b953      	cbnz	r3, 8000b40 <__aeabi_uldivmod+0x18>
 8000b2a:	b94a      	cbnz	r2, 8000b40 <__aeabi_uldivmod+0x18>
 8000b2c:	2900      	cmp	r1, #0
 8000b2e:	bf08      	it	eq
 8000b30:	2800      	cmpeq	r0, #0
 8000b32:	bf1c      	itt	ne
 8000b34:	f04f 31ff 	movne.w	r1, #4294967295
 8000b38:	f04f 30ff 	movne.w	r0, #4294967295
 8000b3c:	f000 b976 	b.w	8000e2c <__aeabi_idiv0>
 8000b40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b48:	f000 f806 	bl	8000b58 <__udivmoddi4>
 8000b4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b54:	b004      	add	sp, #16
 8000b56:	4770      	bx	lr

08000b58 <__udivmoddi4>:
 8000b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b5c:	9e08      	ldr	r6, [sp, #32]
 8000b5e:	460d      	mov	r5, r1
 8000b60:	4604      	mov	r4, r0
 8000b62:	4688      	mov	r8, r1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d14d      	bne.n	8000c04 <__udivmoddi4+0xac>
 8000b68:	428a      	cmp	r2, r1
 8000b6a:	4694      	mov	ip, r2
 8000b6c:	d968      	bls.n	8000c40 <__udivmoddi4+0xe8>
 8000b6e:	fab2 f282 	clz	r2, r2
 8000b72:	b152      	cbz	r2, 8000b8a <__udivmoddi4+0x32>
 8000b74:	fa01 f302 	lsl.w	r3, r1, r2
 8000b78:	f1c2 0120 	rsb	r1, r2, #32
 8000b7c:	fa20 f101 	lsr.w	r1, r0, r1
 8000b80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b84:	ea41 0803 	orr.w	r8, r1, r3
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000b8e:	fbb8 f7f1 	udiv	r7, r8, r1
 8000b92:	fa1f fe8c 	uxth.w	lr, ip
 8000b96:	fb01 8817 	mls	r8, r1, r7, r8
 8000b9a:	fb07 f00e 	mul.w	r0, r7, lr
 8000b9e:	0c23      	lsrs	r3, r4, #16
 8000ba0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ba4:	4298      	cmp	r0, r3
 8000ba6:	d90a      	bls.n	8000bbe <__udivmoddi4+0x66>
 8000ba8:	eb1c 0303 	adds.w	r3, ip, r3
 8000bac:	f107 35ff 	add.w	r5, r7, #4294967295
 8000bb0:	f080 811e 	bcs.w	8000df0 <__udivmoddi4+0x298>
 8000bb4:	4298      	cmp	r0, r3
 8000bb6:	f240 811b 	bls.w	8000df0 <__udivmoddi4+0x298>
 8000bba:	3f02      	subs	r7, #2
 8000bbc:	4463      	add	r3, ip
 8000bbe:	1a1b      	subs	r3, r3, r0
 8000bc0:	fbb3 f0f1 	udiv	r0, r3, r1
 8000bc4:	fb01 3310 	mls	r3, r1, r0, r3
 8000bc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bcc:	b2a4      	uxth	r4, r4
 8000bce:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x94>
 8000bd6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bde:	f080 8109 	bcs.w	8000df4 <__udivmoddi4+0x29c>
 8000be2:	45a6      	cmp	lr, r4
 8000be4:	f240 8106 	bls.w	8000df4 <__udivmoddi4+0x29c>
 8000be8:	4464      	add	r4, ip
 8000bea:	3802      	subs	r0, #2
 8000bec:	2100      	movs	r1, #0
 8000bee:	eba4 040e 	sub.w	r4, r4, lr
 8000bf2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bf6:	b11e      	cbz	r6, 8000c00 <__udivmoddi4+0xa8>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	40d4      	lsrs	r4, r2
 8000bfc:	e9c6 4300 	strd	r4, r3, [r6]
 8000c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c04:	428b      	cmp	r3, r1
 8000c06:	d908      	bls.n	8000c1a <__udivmoddi4+0xc2>
 8000c08:	2e00      	cmp	r6, #0
 8000c0a:	f000 80ee 	beq.w	8000dea <__udivmoddi4+0x292>
 8000c0e:	2100      	movs	r1, #0
 8000c10:	e9c6 0500 	strd	r0, r5, [r6]
 8000c14:	4608      	mov	r0, r1
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f183 	clz	r1, r3
 8000c1e:	2900      	cmp	r1, #0
 8000c20:	d14a      	bne.n	8000cb8 <__udivmoddi4+0x160>
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0xd4>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80fc 	bhi.w	8000e24 <__udivmoddi4+0x2cc>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb65 0303 	sbc.w	r3, r5, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	4698      	mov	r8, r3
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d0e2      	beq.n	8000c00 <__udivmoddi4+0xa8>
 8000c3a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c3e:	e7df      	b.n	8000c00 <__udivmoddi4+0xa8>
 8000c40:	b902      	cbnz	r2, 8000c44 <__udivmoddi4+0xec>
 8000c42:	deff      	udf	#255	; 0xff
 8000c44:	fab2 f282 	clz	r2, r2
 8000c48:	2a00      	cmp	r2, #0
 8000c4a:	f040 8091 	bne.w	8000d70 <__udivmoddi4+0x218>
 8000c4e:	eba1 000c 	sub.w	r0, r1, ip
 8000c52:	2101      	movs	r1, #1
 8000c54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c58:	fa1f fe8c 	uxth.w	lr, ip
 8000c5c:	fbb0 f3f7 	udiv	r3, r0, r7
 8000c60:	fb07 0013 	mls	r0, r7, r3, r0
 8000c64:	0c25      	lsrs	r5, r4, #16
 8000c66:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000c6a:	fb0e f003 	mul.w	r0, lr, r3
 8000c6e:	42a8      	cmp	r0, r5
 8000c70:	d908      	bls.n	8000c84 <__udivmoddi4+0x12c>
 8000c72:	eb1c 0505 	adds.w	r5, ip, r5
 8000c76:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c7a:	d202      	bcs.n	8000c82 <__udivmoddi4+0x12a>
 8000c7c:	42a8      	cmp	r0, r5
 8000c7e:	f200 80ce 	bhi.w	8000e1e <__udivmoddi4+0x2c6>
 8000c82:	4643      	mov	r3, r8
 8000c84:	1a2d      	subs	r5, r5, r0
 8000c86:	fbb5 f0f7 	udiv	r0, r5, r7
 8000c8a:	fb07 5510 	mls	r5, r7, r0, r5
 8000c8e:	fb0e fe00 	mul.w	lr, lr, r0
 8000c92:	b2a4      	uxth	r4, r4
 8000c94:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c98:	45a6      	cmp	lr, r4
 8000c9a:	d908      	bls.n	8000cae <__udivmoddi4+0x156>
 8000c9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ca4:	d202      	bcs.n	8000cac <__udivmoddi4+0x154>
 8000ca6:	45a6      	cmp	lr, r4
 8000ca8:	f200 80b6 	bhi.w	8000e18 <__udivmoddi4+0x2c0>
 8000cac:	4628      	mov	r0, r5
 8000cae:	eba4 040e 	sub.w	r4, r4, lr
 8000cb2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cb6:	e79e      	b.n	8000bf6 <__udivmoddi4+0x9e>
 8000cb8:	f1c1 0720 	rsb	r7, r1, #32
 8000cbc:	408b      	lsls	r3, r1
 8000cbe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cc2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cc6:	fa25 fa07 	lsr.w	sl, r5, r7
 8000cca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cce:	fbba f8f9 	udiv	r8, sl, r9
 8000cd2:	fa20 f307 	lsr.w	r3, r0, r7
 8000cd6:	fb09 aa18 	mls	sl, r9, r8, sl
 8000cda:	408d      	lsls	r5, r1
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	431d      	orrs	r5, r3
 8000ce2:	fa00 f301 	lsl.w	r3, r0, r1
 8000ce6:	fb08 f00e 	mul.w	r0, r8, lr
 8000cea:	0c2c      	lsrs	r4, r5, #16
 8000cec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000cf0:	42a0      	cmp	r0, r4
 8000cf2:	fa02 f201 	lsl.w	r2, r2, r1
 8000cf6:	d90b      	bls.n	8000d10 <__udivmoddi4+0x1b8>
 8000cf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d00:	f080 8088 	bcs.w	8000e14 <__udivmoddi4+0x2bc>
 8000d04:	42a0      	cmp	r0, r4
 8000d06:	f240 8085 	bls.w	8000e14 <__udivmoddi4+0x2bc>
 8000d0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d0e:	4464      	add	r4, ip
 8000d10:	1a24      	subs	r4, r4, r0
 8000d12:	fbb4 f0f9 	udiv	r0, r4, r9
 8000d16:	fb09 4410 	mls	r4, r9, r0, r4
 8000d1a:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d1e:	b2ad      	uxth	r5, r5
 8000d20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d24:	45a6      	cmp	lr, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x1e2>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d30:	d26c      	bcs.n	8000e0c <__udivmoddi4+0x2b4>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	d96a      	bls.n	8000e0c <__udivmoddi4+0x2b4>
 8000d36:	3802      	subs	r0, #2
 8000d38:	4464      	add	r4, ip
 8000d3a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d3e:	fba0 9502 	umull	r9, r5, r0, r2
 8000d42:	eba4 040e 	sub.w	r4, r4, lr
 8000d46:	42ac      	cmp	r4, r5
 8000d48:	46c8      	mov	r8, r9
 8000d4a:	46ae      	mov	lr, r5
 8000d4c:	d356      	bcc.n	8000dfc <__udivmoddi4+0x2a4>
 8000d4e:	d053      	beq.n	8000df8 <__udivmoddi4+0x2a0>
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d069      	beq.n	8000e28 <__udivmoddi4+0x2d0>
 8000d54:	ebb3 0208 	subs.w	r2, r3, r8
 8000d58:	eb64 040e 	sbc.w	r4, r4, lr
 8000d5c:	fa22 f301 	lsr.w	r3, r2, r1
 8000d60:	fa04 f707 	lsl.w	r7, r4, r7
 8000d64:	431f      	orrs	r7, r3
 8000d66:	40cc      	lsrs	r4, r1
 8000d68:	e9c6 7400 	strd	r7, r4, [r6]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	e747      	b.n	8000c00 <__udivmoddi4+0xa8>
 8000d70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d74:	f1c2 0120 	rsb	r1, r2, #32
 8000d78:	fa25 f301 	lsr.w	r3, r5, r1
 8000d7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d80:	fa20 f101 	lsr.w	r1, r0, r1
 8000d84:	4095      	lsls	r5, r2
 8000d86:	430d      	orrs	r5, r1
 8000d88:	fbb3 f1f7 	udiv	r1, r3, r7
 8000d8c:	fb07 3311 	mls	r3, r7, r1, r3
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	0c28      	lsrs	r0, r5, #16
 8000d96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d9a:	fb01 f30e 	mul.w	r3, r1, lr
 8000d9e:	4283      	cmp	r3, r0
 8000da0:	fa04 f402 	lsl.w	r4, r4, r2
 8000da4:	d908      	bls.n	8000db8 <__udivmoddi4+0x260>
 8000da6:	eb1c 0000 	adds.w	r0, ip, r0
 8000daa:	f101 38ff 	add.w	r8, r1, #4294967295
 8000dae:	d22f      	bcs.n	8000e10 <__udivmoddi4+0x2b8>
 8000db0:	4283      	cmp	r3, r0
 8000db2:	d92d      	bls.n	8000e10 <__udivmoddi4+0x2b8>
 8000db4:	3902      	subs	r1, #2
 8000db6:	4460      	add	r0, ip
 8000db8:	1ac0      	subs	r0, r0, r3
 8000dba:	fbb0 f3f7 	udiv	r3, r0, r7
 8000dbe:	fb07 0013 	mls	r0, r7, r3, r0
 8000dc2:	b2ad      	uxth	r5, r5
 8000dc4:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000dc8:	fb03 f00e 	mul.w	r0, r3, lr
 8000dcc:	42a8      	cmp	r0, r5
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x28a>
 8000dd0:	eb1c 0505 	adds.w	r5, ip, r5
 8000dd4:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dd8:	d216      	bcs.n	8000e08 <__udivmoddi4+0x2b0>
 8000dda:	42a8      	cmp	r0, r5
 8000ddc:	d914      	bls.n	8000e08 <__udivmoddi4+0x2b0>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	4465      	add	r5, ip
 8000de2:	1a28      	subs	r0, r5, r0
 8000de4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de8:	e738      	b.n	8000c5c <__udivmoddi4+0x104>
 8000dea:	4631      	mov	r1, r6
 8000dec:	4630      	mov	r0, r6
 8000dee:	e707      	b.n	8000c00 <__udivmoddi4+0xa8>
 8000df0:	462f      	mov	r7, r5
 8000df2:	e6e4      	b.n	8000bbe <__udivmoddi4+0x66>
 8000df4:	4618      	mov	r0, r3
 8000df6:	e6f9      	b.n	8000bec <__udivmoddi4+0x94>
 8000df8:	454b      	cmp	r3, r9
 8000dfa:	d2a9      	bcs.n	8000d50 <__udivmoddi4+0x1f8>
 8000dfc:	ebb9 0802 	subs.w	r8, r9, r2
 8000e00:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e04:	3801      	subs	r0, #1
 8000e06:	e7a3      	b.n	8000d50 <__udivmoddi4+0x1f8>
 8000e08:	4643      	mov	r3, r8
 8000e0a:	e7ea      	b.n	8000de2 <__udivmoddi4+0x28a>
 8000e0c:	4628      	mov	r0, r5
 8000e0e:	e794      	b.n	8000d3a <__udivmoddi4+0x1e2>
 8000e10:	4641      	mov	r1, r8
 8000e12:	e7d1      	b.n	8000db8 <__udivmoddi4+0x260>
 8000e14:	46d0      	mov	r8, sl
 8000e16:	e77b      	b.n	8000d10 <__udivmoddi4+0x1b8>
 8000e18:	4464      	add	r4, ip
 8000e1a:	3802      	subs	r0, #2
 8000e1c:	e747      	b.n	8000cae <__udivmoddi4+0x156>
 8000e1e:	3b02      	subs	r3, #2
 8000e20:	4465      	add	r5, ip
 8000e22:	e72f      	b.n	8000c84 <__udivmoddi4+0x12c>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e706      	b.n	8000c36 <__udivmoddi4+0xde>
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e6e9      	b.n	8000c00 <__udivmoddi4+0xa8>

08000e2c <__aeabi_idiv0>:
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e40:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <MX_ADC1_Init+0x74>)
 8000e42:	4a19      	ldr	r2, [pc, #100]	; (8000ea8 <MX_ADC1_Init+0x78>)
 8000e44:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <MX_ADC1_Init+0x74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <MX_ADC1_Init+0x74>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e52:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <MX_ADC1_Init+0x74>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <MX_ADC1_Init+0x74>)
 8000e5a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e5e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e60:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <MX_ADC1_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000e66:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_ADC1_Init+0x74>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e6c:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <MX_ADC1_Init+0x74>)
 8000e6e:	f001 fbf5 	bl	800265c <HAL_ADC_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000e78:	f000 fb5e 	bl	8001538 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e80:	2301      	movs	r3, #1
 8000e82:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_ADC1_Init+0x74>)
 8000e8e:	f001 fcbd 	bl	800280c <HAL_ADC_ConfigChannel>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000e98:	f000 fb4e 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	2000009c 	.word	0x2000009c
 8000ea8:	40012400 	.word	0x40012400

08000eac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <HAL_ADC_MspInit+0x6c>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d121      	bne.n	8000f10 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <HAL_ADC_MspInit+0x70>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <HAL_ADC_MspInit+0x70>)
 8000ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed6:	6193      	str	r3, [r2, #24]
 8000ed8:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <HAL_ADC_MspInit+0x70>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee4:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <HAL_ADC_MspInit+0x70>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	4a0c      	ldr	r2, [pc, #48]	; (8000f1c <HAL_ADC_MspInit+0x70>)
 8000eea:	f043 0304 	orr.w	r3, r3, #4
 8000eee:	6193      	str	r3, [r2, #24]
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_ADC_MspInit+0x70>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f003 0304 	and.w	r3, r3, #4
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000efc:	2302      	movs	r3, #2
 8000efe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f00:	2303      	movs	r3, #3
 8000f02:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <HAL_ADC_MspInit+0x74>)
 8000f0c:	f001 fe98 	bl	8002c40 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f10:	bf00      	nop
 8000f12:	3720      	adds	r7, #32
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40012400 	.word	0x40012400
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40010800 	.word	0x40010800

08000f24 <LOG>:
#include "common.h"

extern UART_HandleTypeDef huart1;

void LOG(const char *TAG, char *data)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b09c      	sub	sp, #112	; 0x70
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
	char data_log[100] = {0};
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	f107 0310 	add.w	r3, r7, #16
 8000f36:	2260      	movs	r2, #96	; 0x60
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f005 f9d0 	bl	80062e0 <memset>
	sprintf(data_log, "%s: %s\n", TAG, data);
 8000f40:	f107 000c 	add.w	r0, r7, #12
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	490a      	ldr	r1, [pc, #40]	; (8000f74 <LOG+0x50>)
 8000f4a:	f005 fa3d 	bl	80063c8 <siprintf>
	HAL_UART_Transmit(&huart1, data_log, strlen(data_log), 1000);
 8000f4e:	f107 030c 	add.w	r3, r7, #12
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff f8fc 	bl	8000150 <strlen>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	f107 010c 	add.w	r1, r7, #12
 8000f60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f64:	4804      	ldr	r0, [pc, #16]	; (8000f78 <LOG+0x54>)
 8000f66:	f003 fd38 	bl	80049da <HAL_UART_Transmit>
}
 8000f6a:	bf00      	nop
 8000f6c:	3770      	adds	r7, #112	; 0x70
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	080085b0 	.word	0x080085b0
 8000f78:	200003cc 	.word	0x200003cc

08000f7c <reverse>:

void reverse(char *str, int len)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b087      	sub	sp, #28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	613b      	str	r3, [r7, #16]
    while (i < j)
 8000f90:	e018      	b.n	8000fc4 <reverse+0x48>
    {
        temp = str[i];
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	4413      	add	r3, r2
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	441a      	add	r2, r3
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	6879      	ldr	r1, [r7, #4]
 8000fa6:	440b      	add	r3, r1
 8000fa8:	7812      	ldrb	r2, [r2, #0]
 8000faa:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	701a      	strb	r2, [r3, #0]
        i++;
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	617b      	str	r3, [r7, #20]
        j--;
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	613b      	str	r3, [r7, #16]
    while (i < j)
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	dbe2      	blt.n	8000f92 <reverse+0x16>
    }
}
 8000fcc:	bf00      	nop
 8000fce:	bf00      	nop
 8000fd0:	371c      	adds	r7, #28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr

08000fd8 <intToStr>:

int intToStr(int x, char str[], int d)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
    int i = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
    if(x == 0)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d126      	bne.n	800103c <intToStr+0x64>
        str[i++] = '0';
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	617a      	str	r2, [r7, #20]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	2230      	movs	r2, #48	; 0x30
 8000ffc:	701a      	strb	r2, [r3, #0]

    while (x)
 8000ffe:	e01d      	b.n	800103c <intToStr+0x64>
    {
        str[i++] = (x % 10) + '0';
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <intToStr+0xa0>)
 8001004:	fb83 1302 	smull	r1, r3, r3, r2
 8001008:	1099      	asrs	r1, r3, #2
 800100a:	17d3      	asrs	r3, r2, #31
 800100c:	1ac9      	subs	r1, r1, r3
 800100e:	460b      	mov	r3, r1
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	440b      	add	r3, r1
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	1ad1      	subs	r1, r2, r3
 8001018:	b2ca      	uxtb	r2, r1
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	1c59      	adds	r1, r3, #1
 800101e:	6179      	str	r1, [r7, #20]
 8001020:	4619      	mov	r1, r3
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	440b      	add	r3, r1
 8001026:	3230      	adds	r2, #48	; 0x30
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4a12      	ldr	r2, [pc, #72]	; (8001078 <intToStr+0xa0>)
 8001030:	fb82 1203 	smull	r1, r2, r2, r3
 8001034:	1092      	asrs	r2, r2, #2
 8001036:	17db      	asrs	r3, r3, #31
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	60fb      	str	r3, [r7, #12]
    while (x)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1de      	bne.n	8001000 <intToStr+0x28>
    }

    while (i < d)
 8001042:	e007      	b.n	8001054 <intToStr+0x7c>
        str[i++] = '0';
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	617a      	str	r2, [r7, #20]
 800104a:	461a      	mov	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	4413      	add	r3, r2
 8001050:	2230      	movs	r2, #48	; 0x30
 8001052:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	429a      	cmp	r2, r3
 800105a:	dbf3      	blt.n	8001044 <intToStr+0x6c>

    reverse(str, i);
 800105c:	6979      	ldr	r1, [r7, #20]
 800105e:	68b8      	ldr	r0, [r7, #8]
 8001060:	f7ff ff8c 	bl	8000f7c <reverse>
    str[i] = '\0';
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	4413      	add	r3, r2
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
    return i;
 800106e:	697b      	ldr	r3, [r7, #20]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	66666667 	.word	0x66666667

0800107c <ftoa>:

void ftoa(double n, char* res, int afterpoint)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	603b      	str	r3, [r7, #0]
    int ipart = (int)n;
 800108a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800108e:	f7ff fcd3 	bl	8000a38 <__aeabi_d2iz>
 8001092:	4603      	mov	r3, r0
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
    double fpart = n - (double)ipart;
 8001096:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001098:	f7ff f9b4 	bl	8000404 <__aeabi_i2d>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010a4:	f7ff f860 	bl	8000168 <__aeabi_dsub>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int i = intToStr(ipart, res, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010b6:	f7ff ff8f 	bl	8000fd8 <intToStr>
 80010ba:	6178      	str	r0, [r7, #20]
    if (afterpoint != 0)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d024      	beq.n	800110c <ftoa+0x90>
    {
        res[i] = '.';
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	4413      	add	r3, r2
 80010c8:	222e      	movs	r2, #46	; 0x2e
 80010ca:	701a      	strb	r2, [r3, #0]
        fpart = fpart * pow(10, afterpoint);
 80010cc:	6838      	ldr	r0, [r7, #0]
 80010ce:	f7ff f999 	bl	8000404 <__aeabi_i2d>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	f04f 0000 	mov.w	r0, #0
 80010da:	490e      	ldr	r1, [pc, #56]	; (8001114 <ftoa+0x98>)
 80010dc:	f006 fb6e 	bl	80077bc <pow>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010e8:	f7ff f9f6 	bl	80004d8 <__aeabi_dmul>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
        intToStr((int)fpart, res + i + 1, afterpoint);
 80010f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010f8:	f7ff fc9e 	bl	8000a38 <__aeabi_d2iz>
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	3301      	adds	r3, #1
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	4413      	add	r3, r2
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	4619      	mov	r1, r3
 8001108:	f7ff ff66 	bl	8000fd8 <intToStr>
    }
}
 800110c:	bf00      	nop
 800110e:	3728      	adds	r7, #40	; 0x28
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40240000 	.word	0x40240000

08001118 <sx1278_task>:
osThreadId defaultTaskHandle;

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void sx1278_task(void *param)
{
 8001118:	b5b0      	push	{r4, r5, r7, lr}
 800111a:	b0f4      	sub	sp, #464	; 0x1d0
 800111c:	af06      	add	r7, sp, #24
 800111e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001122:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001126:	6018      	str	r0, [r3, #0]
    uint8_t data_send[128] = {0};
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800112e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001132:	227c      	movs	r2, #124	; 0x7c
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f005 f8d2 	bl	80062e0 <memset>
    uint8_t data_recv[128] = {0};
 800113c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001140:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	3304      	adds	r3, #4
 800114a:	227c      	movs	r2, #124	; 0x7c
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f005 f8c6 	bl	80062e0 <memset>
    float snr;
    int rssi;
    EventBits_t evt_bits;
    sx1278_packet_t packet;
    sx1278_respond_t respond;
    respond.node_id = node_id;
 8001154:	4b48      	ldr	r3, [pc, #288]	; (8001278 <sx1278_task+0x160>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	b29a      	uxth	r2, r3
 800115a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800115e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001162:	805a      	strh	r2, [r3, #2]
    sx1278_init();
 8001164:	f000 fde0 	bl	8001d28 <sx1278_init>
	sx1278_evt_group = xEventGroupCreate();
 8001168:	f003 fda9 	bl	8004cbe <xEventGroupCreate>
 800116c:	4603      	mov	r3, r0
 800116e:	4a43      	ldr	r2, [pc, #268]	; (800127c <sx1278_task+0x164>)
 8001170:	6013      	str	r3, [r2, #0]
	while(1)
	{
		sx1278_start_recv_data();
 8001172:	f000 fe68 	bl	8001e46 <sx1278_start_recv_data>
		evt_bits = xEventGroupWaitBits(sx1278_evt_group, SX1278_DIO0_BIT, pdTRUE, pdFALSE, portMAX_DELAY);
 8001176:	4b41      	ldr	r3, [pc, #260]	; (800127c <sx1278_task+0x164>)
 8001178:	6818      	ldr	r0, [r3, #0]
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2300      	movs	r3, #0
 8001182:	2201      	movs	r2, #1
 8001184:	2101      	movs	r1, #1
 8001186:	f003 fdb5 	bl	8004cf4 <xEventGroupWaitBits>
 800118a:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
		if(evt_bits & SX1278_DIO0_BIT)
 800118e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0eb      	beq.n	8001172 <sx1278_task+0x5a>
		{
			if(sx1278_recv_data(data_recv, &rssi, &snr, &packet) == SX1278_OK)
 800119a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800119e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80011a2:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 80011a6:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 80011aa:	f000 ff1b 	bl	8001fe4 <sx1278_recv_data>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1de      	bne.n	8001172 <sx1278_task+0x5a>
			{
				char data_log[100];
				char snr_arr[10];
				ftoa((double)snr, snr_arr, 2);
 80011b4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80011b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f932 	bl	8000428 <__aeabi_f2d>
 80011c4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80011c8:	2302      	movs	r3, #2
 80011ca:	f7ff ff57 	bl	800107c <ftoa>
				sprintf(data_log, "Packet rssi: %d, snr: %s", rssi, snr_arr);
 80011ce:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80011d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80011dc:	f107 000c 	add.w	r0, r7, #12
 80011e0:	4927      	ldr	r1, [pc, #156]	; (8001280 <sx1278_task+0x168>)
 80011e2:	f005 f8f1 	bl	80063c8 <siprintf>
				LOG(TAG, data_log);
 80011e6:	4b27      	ldr	r3, [pc, #156]	; (8001284 <sx1278_task+0x16c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f107 020c 	add.w	r2, r7, #12
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fe97 	bl	8000f24 <LOG>
				respond.gate_id = packet.gate_id;
 80011f6:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80011fa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80011fe:	889a      	ldrh	r2, [r3, #4]
 8001200:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001204:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001208:	809a      	strh	r2, [r3, #4]
				respond.period.float_val = packet.period.float_val;
 800120a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800120e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001218:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800121c:	611a      	str	r2, [r3, #16]
				respond.threshold.float_val = packet.threshold.float_val;
 800121e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001222:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001226:	68da      	ldr	r2, [r3, #12]
 8001228:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800122c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001230:	615a      	str	r2, [r3, #20]
				respond.temp.float_val = (float)10.0;
 8001232:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001236:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800123a:	4a13      	ldr	r2, [pc, #76]	; (8001288 <sx1278_task+0x170>)
 800123c:	609a      	str	r2, [r3, #8]
				respond.battery.float_val = (float)3.75;
 800123e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001242:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001246:	4a11      	ldr	r2, [pc, #68]	; (800128c <sx1278_task+0x174>)
 8001248:	60da      	str	r2, [r3, #12]
				listen_before_talk();
 800124a:	f000 ff87 	bl	800215c <listen_before_talk>
				send_respond(UPLINK_TX_RESPOND_OPCODE, respond, data_send);
 800124e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001252:	f5a3 749e 	sub.w	r4, r3, #316	; 0x13c
 8001256:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800125a:	9304      	str	r3, [sp, #16]
 800125c:	466d      	mov	r5, sp
 800125e:	f104 030c 	add.w	r3, r4, #12
 8001262:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001264:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001268:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800126c:	f647 1031 	movw	r0, #31025	; 0x7931
 8001270:	f000 ffbc 	bl	80021ec <send_respond>
		sx1278_start_recv_data();
 8001274:	e77d      	b.n	8001172 <sx1278_task+0x5a>
 8001276:	bf00      	nop
 8001278:	20000324 	.word	0x20000324
 800127c:	200000cc 	.word	0x200000cc
 8001280:	080085c4 	.word	0x080085c4
 8001284:	20000000 	.word	0x20000000
 8001288:	41200000 	.word	0x41200000
 800128c:	40700000 	.word	0x40700000

08001290 <peripheral_task>:
		}
	}
}

void peripheral_task(void *param)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	while(1)
	{
		vTaskDelay(100 / portTICK_RATE_MS);
 8001298:	2064      	movs	r0, #100	; 0x64
 800129a:	f004 f853 	bl	8005344 <vTaskDelay>
 800129e:	e7fb      	b.n	8001298 <peripheral_task+0x8>

080012a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4a06      	ldr	r2, [pc, #24]	; (80012c8 <vApplicationGetIdleTaskMemory+0x28>)
 80012b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	4a05      	ldr	r2, [pc, #20]	; (80012cc <vApplicationGetIdleTaskMemory+0x2c>)
 80012b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2280      	movs	r2, #128	; 0x80
 80012bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr
 80012c8:	200000d0 	.word	0x200000d0
 80012cc:	20000124 	.word	0x20000124

080012d0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af02      	add	r7, sp, #8
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	xTaskCreate(&sx1278_task, "SX1278", 512, NULL, 10, NULL);
 80012d6:	2300      	movs	r3, #0
 80012d8:	9301      	str	r3, [sp, #4]
 80012da:	230a      	movs	r3, #10
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	2300      	movs	r3, #0
 80012e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e4:	4908      	ldr	r1, [pc, #32]	; (8001308 <MX_FREERTOS_Init+0x38>)
 80012e6:	4809      	ldr	r0, [pc, #36]	; (800130c <MX_FREERTOS_Init+0x3c>)
 80012e8:	f003 fefe 	bl	80050e8 <xTaskCreate>
	xTaskCreate(&peripheral_task, "PERIPHERAL", 512, NULL, 9, NULL);
 80012ec:	2300      	movs	r3, #0
 80012ee:	9301      	str	r3, [sp, #4]
 80012f0:	2309      	movs	r3, #9
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2300      	movs	r3, #0
 80012f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012fa:	4905      	ldr	r1, [pc, #20]	; (8001310 <MX_FREERTOS_Init+0x40>)
 80012fc:	4805      	ldr	r0, [pc, #20]	; (8001314 <MX_FREERTOS_Init+0x44>)
 80012fe:	f003 fef3 	bl	80050e8 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	080085e0 	.word	0x080085e0
 800130c:	08001119 	.word	0x08001119
 8001310:	080085e8 	.word	0x080085e8
 8001314:	08001291 	.word	0x08001291

08001318 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131e:	f107 0310 	add.w	r3, r7, #16
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800132c:	4b2f      	ldr	r3, [pc, #188]	; (80013ec <MX_GPIO_Init+0xd4>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	4a2e      	ldr	r2, [pc, #184]	; (80013ec <MX_GPIO_Init+0xd4>)
 8001332:	f043 0320 	orr.w	r3, r3, #32
 8001336:	6193      	str	r3, [r2, #24]
 8001338:	4b2c      	ldr	r3, [pc, #176]	; (80013ec <MX_GPIO_Init+0xd4>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	f003 0320 	and.w	r3, r3, #32
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001344:	4b29      	ldr	r3, [pc, #164]	; (80013ec <MX_GPIO_Init+0xd4>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	4a28      	ldr	r2, [pc, #160]	; (80013ec <MX_GPIO_Init+0xd4>)
 800134a:	f043 0304 	orr.w	r3, r3, #4
 800134e:	6193      	str	r3, [r2, #24]
 8001350:	4b26      	ldr	r3, [pc, #152]	; (80013ec <MX_GPIO_Init+0xd4>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800135c:	4b23      	ldr	r3, [pc, #140]	; (80013ec <MX_GPIO_Init+0xd4>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4a22      	ldr	r2, [pc, #136]	; (80013ec <MX_GPIO_Init+0xd4>)
 8001362:	f043 0308 	orr.w	r3, r3, #8
 8001366:	6193      	str	r3, [r2, #24]
 8001368:	4b20      	ldr	r3, [pc, #128]	; (80013ec <MX_GPIO_Init+0xd4>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f003 0308 	and.w	r3, r3, #8
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	f44f 7180 	mov.w	r1, #256	; 0x100
 800137a:	481d      	ldr	r0, [pc, #116]	; (80013f0 <MX_GPIO_Init+0xd8>)
 800137c:	f001 fde4 	bl	8002f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001380:	2201      	movs	r2, #1
 8001382:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001386:	481a      	ldr	r0, [pc, #104]	; (80013f0 <MX_GPIO_Init+0xd8>)
 8001388:	f001 fdde 	bl	8002f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6|GPIO_PIN_7;
 800138c:	f44f 5386 	mov.w	r3, #4288	; 0x10c0
 8001390:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001392:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <MX_GPIO_Init+0xdc>)
 8001394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139a:	f107 0310 	add.w	r3, r7, #16
 800139e:	4619      	mov	r1, r3
 80013a0:	4815      	ldr	r0, [pc, #84]	; (80013f8 <MX_GPIO_Init+0xe0>)
 80013a2:	f001 fc4d 	bl	8002c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 80013a6:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80013aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2302      	movs	r3, #2
 80013b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	4619      	mov	r1, r3
 80013be:	480c      	ldr	r0, [pc, #48]	; (80013f0 <MX_GPIO_Init+0xd8>)
 80013c0:	f001 fc3e 	bl	8002c40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2105      	movs	r1, #5
 80013c8:	2017      	movs	r0, #23
 80013ca:	f001 fc0e 	bl	8002bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013ce:	2017      	movs	r0, #23
 80013d0:	f001 fc27 	bl	8002c22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2105      	movs	r1, #5
 80013d8:	2028      	movs	r0, #40	; 0x28
 80013da:	f001 fc06 	bl	8002bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013de:	2028      	movs	r0, #40	; 0x28
 80013e0:	f001 fc1f 	bl	8002c22 <HAL_NVIC_EnableIRQ>

}
 80013e4:	bf00      	nop
 80013e6:	3720      	adds	r7, #32
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40010800 	.word	0x40010800
 80013f4:	10110000 	.word	0x10110000
 80013f8:	40010c00 	.word	0x40010c00

080013fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001402:	f001 f8f9 	bl	80025f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001406:	f000 f829 	bl	800145c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800140a:	f7ff ff85 	bl	8001318 <MX_GPIO_Init>
  MX_ADC1_Init();
 800140e:	f7ff fd0f 	bl	8000e30 <MX_ADC1_Init>
  MX_SPI2_Init();
 8001412:	f000 f897 	bl	8001544 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001416:	f001 f853 	bl	80024c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  node_id = get_random_value(1, 65535);
 800141a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800141e:	2001      	movs	r0, #1
 8001420:	f000 fe60 	bl	80020e4 <get_random_value>
 8001424:	4603      	mov	r3, r0
 8001426:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <main+0x54>)
 8001428:	6013      	str	r3, [r2, #0]
  char data_log[10];
  sprintf(data_log, "0x%04x", node_id);
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <main+0x54>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	4908      	ldr	r1, [pc, #32]	; (8001454 <main+0x58>)
 8001432:	4618      	mov	r0, r3
 8001434:	f004 ffc8 	bl	80063c8 <siprintf>
  LOG(TAG, data_log);
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <main+0x5c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	1d3a      	adds	r2, r7, #4
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fd6f 	bl	8000f24 <LOG>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001446:	f7ff ff43 	bl	80012d0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800144a:	f003 fc31 	bl	8004cb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800144e:	e7fe      	b.n	800144e <main+0x52>
 8001450:	20000324 	.word	0x20000324
 8001454:	080085fc 	.word	0x080085fc
 8001458:	20000004 	.word	0x20000004

0800145c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b094      	sub	sp, #80	; 0x50
 8001460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001462:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001466:	2228      	movs	r2, #40	; 0x28
 8001468:	2100      	movs	r1, #0
 800146a:	4618      	mov	r0, r3
 800146c:	f004 ff38 	bl	80062e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800148c:	2301      	movs	r3, #1
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001494:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800149a:	2301      	movs	r3, #1
 800149c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800149e:	2302      	movs	r3, #2
 80014a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014b2:	4618      	mov	r0, r3
 80014b4:	f001 fd82 	bl	8002fbc <HAL_RCC_OscConfig>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80014be:	f000 f83b 	bl	8001538 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c2:	230f      	movs	r3, #15
 80014c4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c6:	2302      	movs	r3, #2
 80014c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014d4:	2300      	movs	r3, #0
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	2102      	movs	r1, #2
 80014de:	4618      	mov	r0, r3
 80014e0:	f001 ffee 	bl	80034c0 <HAL_RCC_ClockConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <SystemClock_Config+0x92>
  {
    Error_Handler();
 80014ea:	f000 f825 	bl	8001538 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014ee:	2302      	movs	r3, #2
 80014f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80014f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014f6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	4618      	mov	r0, r3
 80014fc:	f002 f9a8 	bl	8003850 <HAL_RCCEx_PeriphCLKConfig>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001506:	f000 f817 	bl	8001538 <Error_Handler>
  }
}
 800150a:	bf00      	nop
 800150c:	3750      	adds	r7, #80	; 0x50
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a04      	ldr	r2, [pc, #16]	; (8001534 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d101      	bne.n	800152a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001526:	f001 f87d 	bl	8002624 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40012c00 	.word	0x40012c00

08001538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800153c:	b672      	cpsid	i
}
 800153e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001540:	e7fe      	b.n	8001540 <Error_Handler+0x8>
	...

08001544 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001548:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <MX_SPI2_Init+0x64>)
 800154a:	4a18      	ldr	r2, [pc, #96]	; (80015ac <MX_SPI2_Init+0x68>)
 800154c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800154e:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <MX_SPI2_Init+0x64>)
 8001550:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001554:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001556:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <MX_SPI2_Init+0x64>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <MX_SPI2_Init+0x64>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_SPI2_Init+0x64>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <MX_SPI2_Init+0x64>)
 800156a:	2200      	movs	r2, #0
 800156c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_SPI2_Init+0x64>)
 8001570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001574:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MX_SPI2_Init+0x64>)
 8001578:	2210      	movs	r2, #16
 800157a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <MX_SPI2_Init+0x64>)
 800157e:	2200      	movs	r2, #0
 8001580:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_SPI2_Init+0x64>)
 8001584:	2200      	movs	r2, #0
 8001586:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001588:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <MX_SPI2_Init+0x64>)
 800158a:	2200      	movs	r2, #0
 800158c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_SPI2_Init+0x64>)
 8001590:	220a      	movs	r2, #10
 8001592:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001594:	4804      	ldr	r0, [pc, #16]	; (80015a8 <MX_SPI2_Init+0x64>)
 8001596:	f002 fa11 	bl	80039bc <HAL_SPI_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80015a0:	f7ff ffca 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000328 	.word	0x20000328
 80015ac:	40003800 	.word	0x40003800

080015b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0310 	add.w	r3, r7, #16
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a1c      	ldr	r2, [pc, #112]	; (800163c <HAL_SPI_MspInit+0x8c>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d131      	bne.n	8001634 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015d0:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <HAL_SPI_MspInit+0x90>)
 80015d2:	69db      	ldr	r3, [r3, #28]
 80015d4:	4a1a      	ldr	r2, [pc, #104]	; (8001640 <HAL_SPI_MspInit+0x90>)
 80015d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015da:	61d3      	str	r3, [r2, #28]
 80015dc:	4b18      	ldr	r3, [pc, #96]	; (8001640 <HAL_SPI_MspInit+0x90>)
 80015de:	69db      	ldr	r3, [r3, #28]
 80015e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e8:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_SPI_MspInit+0x90>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	4a14      	ldr	r2, [pc, #80]	; (8001640 <HAL_SPI_MspInit+0x90>)
 80015ee:	f043 0308 	orr.w	r3, r3, #8
 80015f2:	6193      	str	r3, [r2, #24]
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_SPI_MspInit+0x90>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f003 0308 	and.w	r3, r3, #8
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001600:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001604:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800160a:	2303      	movs	r3, #3
 800160c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160e:	f107 0310 	add.w	r3, r7, #16
 8001612:	4619      	mov	r1, r3
 8001614:	480b      	ldr	r0, [pc, #44]	; (8001644 <HAL_SPI_MspInit+0x94>)
 8001616:	f001 fb13 	bl	8002c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800161a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800161e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001628:	f107 0310 	add.w	r3, r7, #16
 800162c:	4619      	mov	r1, r3
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <HAL_SPI_MspInit+0x94>)
 8001630:	f001 fb06 	bl	8002c40 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001634:	bf00      	nop
 8001636:	3720      	adds	r7, #32
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40003800 	.word	0x40003800
 8001640:	40021000 	.word	0x40021000
 8001644:	40010c00 	.word	0x40010c00

08001648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <HAL_MspInit+0x68>)
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	4a17      	ldr	r2, [pc, #92]	; (80016b0 <HAL_MspInit+0x68>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6193      	str	r3, [r2, #24]
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_MspInit+0x68>)
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_MspInit+0x68>)
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	4a11      	ldr	r2, [pc, #68]	; (80016b0 <HAL_MspInit+0x68>)
 800166c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001670:	61d3      	str	r3, [r2, #28]
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <HAL_MspInit+0x68>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	210f      	movs	r1, #15
 8001682:	f06f 0001 	mvn.w	r0, #1
 8001686:	f001 fab0 	bl	8002bea <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <HAL_MspInit+0x6c>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <HAL_MspInit+0x6c>)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40010000 	.word	0x40010000

080016b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08c      	sub	sp, #48	; 0x30
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80016c8:	2200      	movs	r2, #0
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	2019      	movs	r0, #25
 80016ce:	f001 fa8c 	bl	8002bea <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80016d2:	2019      	movs	r0, #25
 80016d4:	f001 faa5 	bl	8002c22 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80016d8:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <HAL_InitTick+0x9c>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a1d      	ldr	r2, [pc, #116]	; (8001754 <HAL_InitTick+0x9c>)
 80016de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <HAL_InitTick+0x9c>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016f0:	f107 0210 	add.w	r2, r7, #16
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	4611      	mov	r1, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f002 f85a 	bl	80037b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001700:	f002 f844 	bl	800378c <HAL_RCC_GetPCLK2Freq>
 8001704:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001708:	4a13      	ldr	r2, [pc, #76]	; (8001758 <HAL_InitTick+0xa0>)
 800170a:	fba2 2303 	umull	r2, r3, r2, r3
 800170e:	0c9b      	lsrs	r3, r3, #18
 8001710:	3b01      	subs	r3, #1
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <HAL_InitTick+0xa4>)
 8001716:	4a12      	ldr	r2, [pc, #72]	; (8001760 <HAL_InitTick+0xa8>)
 8001718:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <HAL_InitTick+0xa4>)
 800171c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001720:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001722:	4a0e      	ldr	r2, [pc, #56]	; (800175c <HAL_InitTick+0xa4>)
 8001724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001726:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <HAL_InitTick+0xa4>)
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <HAL_InitTick+0xa4>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001734:	4809      	ldr	r0, [pc, #36]	; (800175c <HAL_InitTick+0xa4>)
 8001736:	f002 feb9 	bl	80044ac <HAL_TIM_Base_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d104      	bne.n	800174a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001740:	4806      	ldr	r0, [pc, #24]	; (800175c <HAL_InitTick+0xa4>)
 8001742:	f002 ff0b 	bl	800455c <HAL_TIM_Base_Start_IT>
 8001746:	4603      	mov	r3, r0
 8001748:	e000      	b.n	800174c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
}
 800174c:	4618      	mov	r0, r3
 800174e:	3730      	adds	r7, #48	; 0x30
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40021000 	.word	0x40021000
 8001758:	431bde83 	.word	0x431bde83
 800175c:	20000380 	.word	0x20000380
 8001760:	40012c00 	.word	0x40012c00

08001764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <NMI_Handler+0x4>

0800176a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176e:	e7fe      	b.n	800176e <HardFault_Handler+0x4>

08001770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <MemManage_Handler+0x4>

08001776 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <BusFault_Handler+0x4>

0800177c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <UsageFault_Handler+0x4>

08001782 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr

0800178e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001792:	2040      	movs	r0, #64	; 0x40
 8001794:	f001 fbf0 	bl	8002f78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001798:	2080      	movs	r0, #128	; 0x80
 800179a:	f001 fbed 	bl	8002f78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <TIM1_UP_IRQHandler+0x10>)
 80017aa:	f002 ff29 	bl	8004600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000380 	.word	0x20000380

080017b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80017bc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80017c0:	f001 fbda 	bl	8002f78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <sx1278_read_reg>:
static const char *TAG = "SX1278";
extern EventGroupHandle_t sx1278_evt_group;
extern int node_id;

uint8_t sx1278_read_reg(uint8_t reg)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
	uint8_t txByte = reg & 0x7f;
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 80017dc:	2300      	movs	r3, #0
 80017de:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80017e0:	2200      	movs	r2, #0
 80017e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017e6:	4816      	ldr	r0, [pc, #88]	; (8001840 <sx1278_read_reg+0x78>)
 80017e8:	f001 fbae 	bl	8002f48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &txByte, 1, 1000);
 80017ec:	f107 010f 	add.w	r1, r7, #15
 80017f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f4:	2201      	movs	r2, #1
 80017f6:	4813      	ldr	r0, [pc, #76]	; (8001844 <sx1278_read_reg+0x7c>)
 80017f8:	f002 f964 	bl	8003ac4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 80017fc:	bf00      	nop
 80017fe:	4811      	ldr	r0, [pc, #68]	; (8001844 <sx1278_read_reg+0x7c>)
 8001800:	f002 fd4f 	bl	80042a2 <HAL_SPI_GetState>
 8001804:	4603      	mov	r3, r0
 8001806:	2b01      	cmp	r3, #1
 8001808:	d1f9      	bne.n	80017fe <sx1278_read_reg+0x36>
	HAL_SPI_Receive(&hspi2, &rxByte, 1, 1000);
 800180a:	f107 010e 	add.w	r1, r7, #14
 800180e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001812:	2201      	movs	r2, #1
 8001814:	480b      	ldr	r0, [pc, #44]	; (8001844 <sx1278_read_reg+0x7c>)
 8001816:	f002 fa91 	bl	8003d3c <HAL_SPI_Receive>
	while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 800181a:	bf00      	nop
 800181c:	4809      	ldr	r0, [pc, #36]	; (8001844 <sx1278_read_reg+0x7c>)
 800181e:	f002 fd40 	bl	80042a2 <HAL_SPI_GetState>
 8001822:	4603      	mov	r3, r0
 8001824:	2b01      	cmp	r3, #1
 8001826:	d1f9      	bne.n	800181c <sx1278_read_reg+0x54>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001828:	2201      	movs	r2, #1
 800182a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800182e:	4804      	ldr	r0, [pc, #16]	; (8001840 <sx1278_read_reg+0x78>)
 8001830:	f001 fb8a 	bl	8002f48 <HAL_GPIO_WritePin>
    return rxByte;
 8001834:	7bbb      	ldrb	r3, [r7, #14]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40010800 	.word	0x40010800
 8001844:	20000328 	.word	0x20000328

08001848 <sx1278_write_reg>:

void sx1278_write_reg(uint8_t reg, uint8_t val)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	460a      	mov	r2, r1
 8001852:	71fb      	strb	r3, [r7, #7]
 8001854:	4613      	mov	r3, r2
 8001856:	71bb      	strb	r3, [r7, #6]
	uint8_t ureg = reg | 0x80;
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800185e:	b2db      	uxtb	r3, r3
 8001860:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001862:	2200      	movs	r2, #0
 8001864:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001868:	4814      	ldr	r0, [pc, #80]	; (80018bc <sx1278_write_reg+0x74>)
 800186a:	f001 fb6d 	bl	8002f48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &ureg, 1, 1000);
 800186e:	f107 010f 	add.w	r1, r7, #15
 8001872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001876:	2201      	movs	r2, #1
 8001878:	4811      	ldr	r0, [pc, #68]	; (80018c0 <sx1278_write_reg+0x78>)
 800187a:	f002 f923 	bl	8003ac4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 800187e:	bf00      	nop
 8001880:	480f      	ldr	r0, [pc, #60]	; (80018c0 <sx1278_write_reg+0x78>)
 8001882:	f002 fd0e 	bl	80042a2 <HAL_SPI_GetState>
 8001886:	4603      	mov	r3, r0
 8001888:	2b01      	cmp	r3, #1
 800188a:	d1f9      	bne.n	8001880 <sx1278_write_reg+0x38>
	HAL_SPI_Transmit(&hspi2, &val, 1, 1000);
 800188c:	1db9      	adds	r1, r7, #6
 800188e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001892:	2201      	movs	r2, #1
 8001894:	480a      	ldr	r0, [pc, #40]	; (80018c0 <sx1278_write_reg+0x78>)
 8001896:	f002 f915 	bl	8003ac4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 800189a:	bf00      	nop
 800189c:	4808      	ldr	r0, [pc, #32]	; (80018c0 <sx1278_write_reg+0x78>)
 800189e:	f002 fd00 	bl	80042a2 <HAL_SPI_GetState>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d1f9      	bne.n	800189c <sx1278_write_reg+0x54>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80018a8:	2201      	movs	r2, #1
 80018aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ae:	4803      	ldr	r0, [pc, #12]	; (80018bc <sx1278_write_reg+0x74>)
 80018b0:	f001 fb4a 	bl	8002f48 <HAL_GPIO_WritePin>
}
 80018b4:	bf00      	nop
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40010800 	.word	0x40010800
 80018c0:	20000328 	.word	0x20000328

080018c4 <sx1278_reset>:

void sx1278_reset(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018ce:	4808      	ldr	r0, [pc, #32]	; (80018f0 <sx1278_reset+0x2c>)
 80018d0:	f001 fb3a 	bl	8002f48 <HAL_GPIO_WritePin>
    vTaskDelay(10 / portTICK_RATE_MS);
 80018d4:	200a      	movs	r0, #10
 80018d6:	f003 fd35 	bl	8005344 <vTaskDelay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80018da:	2201      	movs	r2, #1
 80018dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018e0:	4803      	ldr	r0, [pc, #12]	; (80018f0 <sx1278_reset+0x2c>)
 80018e2:	f001 fb31 	bl	8002f48 <HAL_GPIO_WritePin>
    vTaskDelay(10 / portTICK_RATE_MS);
 80018e6:	200a      	movs	r0, #10
 80018e8:	f003 fd2c 	bl	8005344 <vTaskDelay>
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40010800 	.word	0x40010800

080018f4 <sx1278_sleep>:

void sx1278_sleep(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
    sx1278_write_reg(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 80018f8:	2180      	movs	r1, #128	; 0x80
 80018fa:	2001      	movs	r0, #1
 80018fc:	f7ff ffa4 	bl	8001848 <sx1278_write_reg>
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}

08001904 <sx1278_standby>:

void sx1278_standby(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
    sx1278_write_reg(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8001908:	2181      	movs	r1, #129	; 0x81
 800190a:	2001      	movs	r0, #1
 800190c:	f7ff ff9c 	bl	8001848 <sx1278_write_reg>
}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}

08001914 <sx1278_rx_contiuous>:

void sx1278_rx_contiuous(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
    sx1278_write_reg(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001918:	2185      	movs	r1, #133	; 0x85
 800191a:	2001      	movs	r0, #1
 800191c:	f7ff ff94 	bl	8001848 <sx1278_write_reg>
}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}

08001924 <sx1278_cad>:
{
    sx1278_write_reg(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
}

void sx1278_cad(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
    sx1278_write_reg(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_CAD);
 8001928:	2187      	movs	r1, #135	; 0x87
 800192a:	2001      	movs	r0, #1
 800192c:	f7ff ff8c 	bl	8001848 <sx1278_write_reg>
}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}

08001934 <sx1278_set_tx_power>:

void sx1278_set_tx_power(uint8_t output_power)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
    if (output_power > 15)
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	2b0f      	cmp	r3, #15
 8001942:	d906      	bls.n	8001952 <sx1278_set_tx_power+0x1e>
    {
        LOG(TAG, "Invalid output power");
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <sx1278_set_tx_power+0x34>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4908      	ldr	r1, [pc, #32]	; (800196c <sx1278_set_tx_power+0x38>)
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff faea 	bl	8000f24 <LOG>
        return;
 8001950:	e007      	b.n	8001962 <sx1278_set_tx_power+0x2e>
    }
    // PA output pin: PA_BOOST pin
    sx1278_write_reg(REG_PA_CONFIG, PA_BOOST | output_power);
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001958:	b2db      	uxtb	r3, r3
 800195a:	4619      	mov	r1, r3
 800195c:	2009      	movs	r0, #9
 800195e:	f7ff ff73 	bl	8001848 <sx1278_write_reg>
}
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000008 	.word	0x20000008
 800196c:	0800860c 	.word	0x0800860c

08001970 <sx1278_set_LNA_gain>:

void sx1278_set_LNA_gain(uint8_t gain)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
    if (gain > 6)
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	2b06      	cmp	r3, #6
 800197e:	d906      	bls.n	800198e <sx1278_set_LNA_gain+0x1e>
    {
    	LOG(TAG, "Invalid gain");
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <sx1278_set_LNA_gain+0x5c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4912      	ldr	r1, [pc, #72]	; (80019d0 <sx1278_set_LNA_gain+0x60>)
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff facc 	bl	8000f24 <LOG>
        return;
 800198c:	e01a      	b.n	80019c4 <sx1278_set_LNA_gain+0x54>
    }

    if (gain == 0)
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d104      	bne.n	800199e <sx1278_set_LNA_gain+0x2e>
        sx1278_write_reg(REG_MODEM_CONFIG_3, 0x04);
 8001994:	2104      	movs	r1, #4
 8001996:	2026      	movs	r0, #38	; 0x26
 8001998:	f7ff ff56 	bl	8001848 <sx1278_write_reg>
 800199c:	e012      	b.n	80019c4 <sx1278_set_LNA_gain+0x54>
    else
    {
        sx1278_write_reg(REG_MODEM_CONFIG_3, 0x00);
 800199e:	2100      	movs	r1, #0
 80019a0:	2026      	movs	r0, #38	; 0x26
 80019a2:	f7ff ff51 	bl	8001848 <sx1278_write_reg>
        sx1278_write_reg(REG_LNA, sx1278_read_reg(REG_LNA) | (gain << 5));
 80019a6:	200c      	movs	r0, #12
 80019a8:	f7ff ff0e 	bl	80017c8 <sx1278_read_reg>
 80019ac:	4603      	mov	r3, r0
 80019ae:	b25a      	sxtb	r2, r3
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	015b      	lsls	r3, r3, #5
 80019b4:	b25b      	sxtb	r3, r3
 80019b6:	4313      	orrs	r3, r2
 80019b8:	b25b      	sxtb	r3, r3
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	4619      	mov	r1, r3
 80019be:	200c      	movs	r0, #12
 80019c0:	f7ff ff42 	bl	8001848 <sx1278_write_reg>
    }
}
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000008 	.word	0x20000008
 80019d0:	08008624 	.word	0x08008624

080019d4 <sx1278_set_freq>:

void sx1278_set_freq(uint64_t freq)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	e9c7 0100 	strd	r0, r1, [r7]
    uint64_t frf = ((uint64_t)freq << 19) / 32000000;
 80019de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019e2:	f04f 0000 	mov.w	r0, #0
 80019e6:	f04f 0100 	mov.w	r1, #0
 80019ea:	04d9      	lsls	r1, r3, #19
 80019ec:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80019f0:	04d0      	lsls	r0, r2, #19
 80019f2:	4a18      	ldr	r2, [pc, #96]	; (8001a54 <sx1278_set_freq+0x80>)
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	f7ff f896 	bl	8000b28 <__aeabi_uldivmod>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	e9c7 2302 	strd	r2, r3, [r7, #8]
    sx1278_write_reg(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8001a04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	0c02      	lsrs	r2, r0, #16
 8001a12:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001a16:	0c0b      	lsrs	r3, r1, #16
 8001a18:	b2d3      	uxtb	r3, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	2006      	movs	r0, #6
 8001a1e:	f7ff ff13 	bl	8001848 <sx1278_write_reg>
    sx1278_write_reg(REG_FRF_MID, (uint8_t)(frf >> 8));
 8001a22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	0a02      	lsrs	r2, r0, #8
 8001a30:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001a34:	0a0b      	lsrs	r3, r1, #8
 8001a36:	b2d3      	uxtb	r3, r2
 8001a38:	4619      	mov	r1, r3
 8001a3a:	2007      	movs	r0, #7
 8001a3c:	f7ff ff04 	bl	8001848 <sx1278_write_reg>
    sx1278_write_reg(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8001a40:	7a3b      	ldrb	r3, [r7, #8]
 8001a42:	4619      	mov	r1, r3
 8001a44:	2008      	movs	r0, #8
 8001a46:	f7ff feff 	bl	8001848 <sx1278_write_reg>
}
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	01e84800 	.word	0x01e84800

08001a58 <sx1278_set_bandwidth>:

void sx1278_set_bandwidth(long band)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
    int bw;
    if (band <= 7.8E3)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f641 6278 	movw	r2, #7800	; 0x1e78
 8001a66:	4293      	cmp	r3, r2
 8001a68:	dc02      	bgt.n	8001a70 <sx1278_set_bandwidth+0x18>
        bw = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	e03f      	b.n	8001af0 <sx1278_set_bandwidth+0x98>
    else if (band <= 10.4E3)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8001a76:	4293      	cmp	r3, r2
 8001a78:	dc02      	bgt.n	8001a80 <sx1278_set_bandwidth+0x28>
        bw = 1;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	e037      	b.n	8001af0 <sx1278_set_bandwidth+0x98>
    else if (band <= 15.6E3)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 8001a86:	4293      	cmp	r3, r2
 8001a88:	dc02      	bgt.n	8001a90 <sx1278_set_bandwidth+0x38>
        bw = 2;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	e02f      	b.n	8001af0 <sx1278_set_bandwidth+0x98>
    else if (band <= 20.8E3)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f245 1240 	movw	r2, #20800	; 0x5140
 8001a96:	4293      	cmp	r3, r2
 8001a98:	dc02      	bgt.n	8001aa0 <sx1278_set_bandwidth+0x48>
        bw = 3;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	e027      	b.n	8001af0 <sx1278_set_bandwidth+0x98>
    else if (band <= 31.25E3)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f647 2212 	movw	r2, #31250	; 0x7a12
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	dc02      	bgt.n	8001ab0 <sx1278_set_bandwidth+0x58>
        bw = 4;
 8001aaa:	2304      	movs	r3, #4
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	e01f      	b.n	8001af0 <sx1278_set_bandwidth+0x98>
    else if (band <= 41.7E3)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f24a 22e4 	movw	r2, #41700	; 0xa2e4
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	dc02      	bgt.n	8001ac0 <sx1278_set_bandwidth+0x68>
        bw = 5;
 8001aba:	2305      	movs	r3, #5
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	e017      	b.n	8001af0 <sx1278_set_bandwidth+0x98>
    else if (band <= 62.5E3)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f24f 4224 	movw	r2, #62500	; 0xf424
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	dc02      	bgt.n	8001ad0 <sx1278_set_bandwidth+0x78>
        bw = 6;
 8001aca:	2306      	movs	r3, #6
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	e00f      	b.n	8001af0 <sx1278_set_bandwidth+0x98>
    else if (band <= 125E3)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a12      	ldr	r2, [pc, #72]	; (8001b1c <sx1278_set_bandwidth+0xc4>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	dc02      	bgt.n	8001ade <sx1278_set_bandwidth+0x86>
        bw = 7;
 8001ad8:	2307      	movs	r3, #7
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	e008      	b.n	8001af0 <sx1278_set_bandwidth+0x98>
    else if (band <= 250E3)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a0f      	ldr	r2, [pc, #60]	; (8001b20 <sx1278_set_bandwidth+0xc8>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	dc02      	bgt.n	8001aec <sx1278_set_bandwidth+0x94>
        bw = 8;
 8001ae6:	2308      	movs	r3, #8
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	e001      	b.n	8001af0 <sx1278_set_bandwidth+0x98>
    else
        bw = 9;
 8001aec:	2309      	movs	r3, #9
 8001aee:	60fb      	str	r3, [r7, #12]
    sx1278_write_reg(REG_MODEM_CONFIG_1, (sx1278_read_reg(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
 8001af0:	201d      	movs	r0, #29
 8001af2:	f7ff fe69 	bl	80017c8 <sx1278_read_reg>
 8001af6:	4603      	mov	r3, r0
 8001af8:	b25b      	sxtb	r3, r3
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	b25a      	sxtb	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	b25b      	sxtb	r3, r3
 8001b06:	4313      	orrs	r3, r2
 8001b08:	b25b      	sxtb	r3, r3
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	201d      	movs	r0, #29
 8001b10:	f7ff fe9a 	bl	8001848 <sx1278_write_reg>
}
 8001b14:	bf00      	nop
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	0001e848 	.word	0x0001e848
 8001b20:	0003d090 	.word	0x0003d090

08001b24 <sx1278_set_sf>:

void sx1278_set_sf(uint8_t sf)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
    if (sf < 6 || sf > 12)
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	2b05      	cmp	r3, #5
 8001b32:	d902      	bls.n	8001b3a <sx1278_set_sf+0x16>
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	2b0c      	cmp	r3, #12
 8001b38:	d906      	bls.n	8001b48 <sx1278_set_sf+0x24>
    {
    	LOG(TAG, "Invalid spreading factor");
 8001b3a:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <sx1278_set_sf+0x78>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4918      	ldr	r1, [pc, #96]	; (8001ba0 <sx1278_set_sf+0x7c>)
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff f9ef 	bl	8000f24 <LOG>
        return;
 8001b46:	e025      	b.n	8001b94 <sx1278_set_sf+0x70>
    }

    if (sf == 6)
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	2b06      	cmp	r3, #6
 8001b4c:	d108      	bne.n	8001b60 <sx1278_set_sf+0x3c>
    {
        sx1278_write_reg(REG_DETECTION_OPTIMIZE, 0xc5);
 8001b4e:	21c5      	movs	r1, #197	; 0xc5
 8001b50:	2031      	movs	r0, #49	; 0x31
 8001b52:	f7ff fe79 	bl	8001848 <sx1278_write_reg>
        sx1278_write_reg(REG_DETECTION_THRESHOLD, 0x0c);
 8001b56:	210c      	movs	r1, #12
 8001b58:	2037      	movs	r0, #55	; 0x37
 8001b5a:	f7ff fe75 	bl	8001848 <sx1278_write_reg>
 8001b5e:	e007      	b.n	8001b70 <sx1278_set_sf+0x4c>
    }
    else
    {
        sx1278_write_reg(REG_DETECTION_OPTIMIZE, 0xc3);
 8001b60:	21c3      	movs	r1, #195	; 0xc3
 8001b62:	2031      	movs	r0, #49	; 0x31
 8001b64:	f7ff fe70 	bl	8001848 <sx1278_write_reg>
        sx1278_write_reg(REG_DETECTION_THRESHOLD, 0x0a);
 8001b68:	210a      	movs	r1, #10
 8001b6a:	2037      	movs	r0, #55	; 0x37
 8001b6c:	f7ff fe6c 	bl	8001848 <sx1278_write_reg>
    }
    sx1278_write_reg(REG_MODEM_CONFIG_2, (sx1278_read_reg(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
 8001b70:	201e      	movs	r0, #30
 8001b72:	f7ff fe29 	bl	80017c8 <sx1278_read_reg>
 8001b76:	4603      	mov	r3, r0
 8001b78:	b25b      	sxtb	r3, r3
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	b25a      	sxtb	r2, r3
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	011b      	lsls	r3, r3, #4
 8001b84:	b25b      	sxtb	r3, r3
 8001b86:	4313      	orrs	r3, r2
 8001b88:	b25b      	sxtb	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	201e      	movs	r0, #30
 8001b90:	f7ff fe5a 	bl	8001848 <sx1278_write_reg>
}
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000008 	.word	0x20000008
 8001ba0:	08008634 	.word	0x08008634

08001ba4 <sx1278_set_cr>:

void sx1278_set_cr(uint8_t cr)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
    if (cr < 5 || cr > 8)
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d902      	bls.n	8001bba <sx1278_set_cr+0x16>
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d906      	bls.n	8001bc8 <sx1278_set_cr+0x24>
    {
    	LOG(TAG, "Invalid coding rate");
 8001bba:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <sx1278_set_cr+0x54>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	490f      	ldr	r1, [pc, #60]	; (8001bfc <sx1278_set_cr+0x58>)
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff f9af 	bl	8000f24 <LOG>
        return;
 8001bc6:	e014      	b.n	8001bf2 <sx1278_set_cr+0x4e>
    }

    cr = cr - 4;
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	3b04      	subs	r3, #4
 8001bcc:	71fb      	strb	r3, [r7, #7]
    sx1278_write_reg(REG_MODEM_CONFIG_1, (sx1278_read_reg(REG_MODEM_CONFIG_1) & 0xf1) | (cr << 1));
 8001bce:	201d      	movs	r0, #29
 8001bd0:	f7ff fdfa 	bl	80017c8 <sx1278_read_reg>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	b25b      	sxtb	r3, r3
 8001bd8:	f023 030e 	bic.w	r3, r3, #14
 8001bdc:	b25a      	sxtb	r2, r3
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	b25b      	sxtb	r3, r3
 8001be4:	4313      	orrs	r3, r2
 8001be6:	b25b      	sxtb	r3, r3
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	4619      	mov	r1, r3
 8001bec:	201d      	movs	r0, #29
 8001bee:	f7ff fe2b 	bl	8001848 <sx1278_write_reg>
}
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000008 	.word	0x20000008
 8001bfc:	08008650 	.word	0x08008650

08001c00 <sx1278_set_header>:

void sx1278_set_header(bool en, uint32_t size)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	6039      	str	r1, [r7, #0]
 8001c0a:	71fb      	strb	r3, [r7, #7]
    if (en)
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00b      	beq.n	8001c2a <sx1278_set_header+0x2a>
        sx1278_write_reg(REG_MODEM_CONFIG_1, sx1278_read_reg(REG_MODEM_CONFIG_1) & 0xfe);
 8001c12:	201d      	movs	r0, #29
 8001c14:	f7ff fdd8 	bl	80017c8 <sx1278_read_reg>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f023 0301 	bic.w	r3, r3, #1
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	4619      	mov	r1, r3
 8001c22:	201d      	movs	r0, #29
 8001c24:	f7ff fe10 	bl	8001848 <sx1278_write_reg>
    else
    {
        sx1278_write_reg(REG_MODEM_CONFIG_1, sx1278_read_reg(REG_MODEM_CONFIG_1) | 0x01);
        sx1278_write_reg(REG_PAYLOAD_LENGTH, size);
    }
}
 8001c28:	e010      	b.n	8001c4c <sx1278_set_header+0x4c>
        sx1278_write_reg(REG_MODEM_CONFIG_1, sx1278_read_reg(REG_MODEM_CONFIG_1) | 0x01);
 8001c2a:	201d      	movs	r0, #29
 8001c2c:	f7ff fdcc 	bl	80017c8 <sx1278_read_reg>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	4619      	mov	r1, r3
 8001c3a:	201d      	movs	r0, #29
 8001c3c:	f7ff fe04 	bl	8001848 <sx1278_write_reg>
        sx1278_write_reg(REG_PAYLOAD_LENGTH, size);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	4619      	mov	r1, r3
 8001c46:	2022      	movs	r0, #34	; 0x22
 8001c48:	f7ff fdfe 	bl	8001848 <sx1278_write_reg>
}
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <sx1278_set_crc>:

void sx1278_set_crc(bool en)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
    if (en)
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00b      	beq.n	8001c7c <sx1278_set_crc+0x28>
        sx1278_write_reg(REG_MODEM_CONFIG_2, sx1278_read_reg(REG_MODEM_CONFIG_2) | 0x04);
 8001c64:	201e      	movs	r0, #30
 8001c66:	f7ff fdaf 	bl	80017c8 <sx1278_read_reg>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	f043 0304 	orr.w	r3, r3, #4
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	4619      	mov	r1, r3
 8001c74:	201e      	movs	r0, #30
 8001c76:	f7ff fde7 	bl	8001848 <sx1278_write_reg>
    else
        sx1278_write_reg(REG_MODEM_CONFIG_2, sx1278_read_reg(REG_MODEM_CONFIG_2) & 0xfb);
}
 8001c7a:	e00a      	b.n	8001c92 <sx1278_set_crc+0x3e>
        sx1278_write_reg(REG_MODEM_CONFIG_2, sx1278_read_reg(REG_MODEM_CONFIG_2) & 0xfb);
 8001c7c:	201e      	movs	r0, #30
 8001c7e:	f7ff fda3 	bl	80017c8 <sx1278_read_reg>
 8001c82:	4603      	mov	r3, r0
 8001c84:	f023 0304 	bic.w	r3, r3, #4
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	201e      	movs	r0, #30
 8001c8e:	f7ff fddb 	bl	8001848 <sx1278_write_reg>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <sx1278_set_preamble>:

void sx1278_set_preamble(int len)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
    sx1278_write_reg(REG_PREAMBLE_MSB, (uint8_t)(len >> 8));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	121b      	asrs	r3, r3, #8
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	4619      	mov	r1, r3
 8001caa:	2020      	movs	r0, #32
 8001cac:	f7ff fdcc 	bl	8001848 <sx1278_write_reg>
    sx1278_write_reg(REG_PREAMBLE_LSB, (uint8_t)(len >> 0));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	2021      	movs	r0, #33	; 0x21
 8001cb8:	f7ff fdc6 	bl	8001848 <sx1278_write_reg>
}
 8001cbc:	bf00      	nop
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <sx1278_get_rssi>:

int sx1278_get_rssi(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
    return (sx1278_read_reg(REG_PKT_RSSI_VALUE) - 164);
 8001cc8:	201a      	movs	r0, #26
 8001cca:	f7ff fd7d 	bl	80017c8 <sx1278_read_reg>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	3ba4      	subs	r3, #164	; 0xa4
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <sx1278_get_snr>:

float sx1278_get_snr(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
    return ((int8_t)sx1278_read_reg(REG_PKT_SNR_VALUE) * 0.25);
 8001cdc:	2019      	movs	r0, #25
 8001cde:	f7ff fd73 	bl	80017c8 <sx1278_read_reg>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	b25b      	sxtb	r3, r3
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fb8c 	bl	8000404 <__aeabi_i2d>
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <sx1278_get_snr+0x30>)
 8001cf2:	f7fe fbf1 	bl	80004d8 <__aeabi_dmul>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f7fe fec3 	bl	8000a88 <__aeabi_d2f>
 8001d02:	4603      	mov	r3, r0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	3fd00000 	.word	0x3fd00000

08001d0c <sx1278_set_irq>:

void sx1278_set_irq(uint8_t val)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
    sx1278_write_reg(REG_DIO_MAPPING_1, val);
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	2040      	movs	r0, #64	; 0x40
 8001d1c:	f7ff fd94 	bl	8001848 <sx1278_write_reg>
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <sx1278_init>:

void sx1278_init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
	sx1278_reset();
 8001d2e:	f7ff fdc9 	bl	80018c4 <sx1278_reset>
	uint8_t ver = sx1278_read_reg(REG_VERSION);
 8001d32:	2042      	movs	r0, #66	; 0x42
 8001d34:	f7ff fd48 	bl	80017c8 <sx1278_read_reg>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	75fb      	strb	r3, [r7, #23]
	char data_log[20];
	sprintf(data_log, "Version :0x%02x", (char)ver);
 8001d3c:	7dfa      	ldrb	r2, [r7, #23]
 8001d3e:	463b      	mov	r3, r7
 8001d40:	491f      	ldr	r1, [pc, #124]	; (8001dc0 <sx1278_init+0x98>)
 8001d42:	4618      	mov	r0, r3
 8001d44:	f004 fb40 	bl	80063c8 <siprintf>
	LOG(TAG, data_log);
 8001d48:	4b1e      	ldr	r3, [pc, #120]	; (8001dc4 <sx1278_init+0x9c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	463a      	mov	r2, r7
 8001d4e:	4611      	mov	r1, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff f8e7 	bl	8000f24 <LOG>
	sx1278_standby();
 8001d56:	f7ff fdd5 	bl	8001904 <sx1278_standby>
    sx1278_write_reg(REG_FIFO_RX_BASE_ADDR, 0x00);
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	200f      	movs	r0, #15
 8001d5e:	f7ff fd73 	bl	8001848 <sx1278_write_reg>
    sx1278_write_reg(REG_FIFO_TX_BASE_ADDR, 0x00);
 8001d62:	2100      	movs	r1, #0
 8001d64:	200e      	movs	r0, #14
 8001d66:	f7ff fd6f 	bl	8001848 <sx1278_write_reg>
    sx1278_set_LNA_gain(0);
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f7ff fe00 	bl	8001970 <sx1278_set_LNA_gain>
    sx1278_set_tx_power(8); // Pout = 10 dBm (10 mW)
 8001d70:	2008      	movs	r0, #8
 8001d72:	f7ff fddf 	bl	8001934 <sx1278_set_tx_power>
    sx1278_set_freq(433E6);
 8001d76:	a110      	add	r1, pc, #64	; (adr r1, 8001db8 <sx1278_init+0x90>)
 8001d78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d7c:	f7ff fe2a 	bl	80019d4 <sx1278_set_freq>
    sx1278_set_bandwidth(250E3); // Bandwidth: 250 kHz
 8001d80:	4811      	ldr	r0, [pc, #68]	; (8001dc8 <sx1278_init+0xa0>)
 8001d82:	f7ff fe69 	bl	8001a58 <sx1278_set_bandwidth>
    sx1278_set_sf(9);
 8001d86:	2009      	movs	r0, #9
 8001d88:	f7ff fecc 	bl	8001b24 <sx1278_set_sf>
    sx1278_set_cr(5);
 8001d8c:	2005      	movs	r0, #5
 8001d8e:	f7ff ff09 	bl	8001ba4 <sx1278_set_cr>
    sx1278_set_preamble(12);
 8001d92:	200c      	movs	r0, #12
 8001d94:	f7ff ff81 	bl	8001c9a <sx1278_set_preamble>
    sx1278_set_header(true, 0);
 8001d98:	2100      	movs	r1, #0
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f7ff ff30 	bl	8001c00 <sx1278_set_header>
    sx1278_set_crc(true);
 8001da0:	2001      	movs	r0, #1
 8001da2:	f7ff ff57 	bl	8001c54 <sx1278_set_crc>
    sx1278_set_irq(0x00);
 8001da6:	2000      	movs	r0, #0
 8001da8:	f7ff ffb0 	bl	8001d0c <sx1278_set_irq>
    sx1278_sleep();
 8001dac:	f7ff fda2 	bl	80018f4 <sx1278_sleep>
}
 8001db0:	bf00      	nop
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	19cf0e40 	.word	0x19cf0e40
 8001dbc:	00000000 	.word	0x00000000
 8001dc0:	08008664 	.word	0x08008664
 8001dc4:	20000008 	.word	0x20000008
 8001dc8:	0003d090 	.word	0x0003d090

08001dcc <sx1278_send_data>:

void sx1278_send_data(uint8_t *data_send, int size)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
    sx1278_standby();
 8001dd6:	f7ff fd95 	bl	8001904 <sx1278_standby>
    sx1278_write_reg(REG_FIFO_ADDR_PTR, 0);
 8001dda:	2100      	movs	r1, #0
 8001ddc:	200d      	movs	r0, #13
 8001dde:	f7ff fd33 	bl	8001848 <sx1278_write_reg>
    for (int index = 0; index < size; index++)
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	e00a      	b.n	8001dfe <sx1278_send_data+0x32>
    {
        sx1278_write_reg(REG_FIFO, data_send[index]);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	4619      	mov	r1, r3
 8001df2:	2000      	movs	r0, #0
 8001df4:	f7ff fd28 	bl	8001848 <sx1278_write_reg>
    for (int index = 0; index < size; index++)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	dbf0      	blt.n	8001de8 <sx1278_send_data+0x1c>
    }
    sx1278_write_reg(REG_PAYLOAD_LENGTH, size);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	2022      	movs	r0, #34	; 0x22
 8001e0e:	f7ff fd1b 	bl	8001848 <sx1278_write_reg>
    // Start transmission and wait for conclusion
    sx1278_write_reg(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8001e12:	2183      	movs	r1, #131	; 0x83
 8001e14:	2001      	movs	r0, #1
 8001e16:	f7ff fd17 	bl	8001848 <sx1278_write_reg>
    while (!(sx1278_read_reg(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK))
 8001e1a:	e002      	b.n	8001e22 <sx1278_send_data+0x56>
    {
        vTaskDelay(10 / portTICK_RATE_MS);
 8001e1c:	200a      	movs	r0, #10
 8001e1e:	f003 fa91 	bl	8005344 <vTaskDelay>
    while (!(sx1278_read_reg(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK))
 8001e22:	2012      	movs	r0, #18
 8001e24:	f7ff fcd0 	bl	80017c8 <sx1278_read_reg>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0f4      	beq.n	8001e1c <sx1278_send_data+0x50>
    }
    sx1278_write_reg(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8001e32:	2108      	movs	r1, #8
 8001e34:	2012      	movs	r0, #18
 8001e36:	f7ff fd07 	bl	8001848 <sx1278_write_reg>
    sx1278_sleep();
 8001e3a:	f7ff fd5b 	bl	80018f4 <sx1278_sleep>
}
 8001e3e:	bf00      	nop
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <sx1278_start_recv_data>:

void sx1278_start_recv_data(void)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	af00      	add	r7, sp, #0
    sx1278_rx_contiuous();
 8001e4a:	f7ff fd63 	bl	8001914 <sx1278_rx_contiuous>
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <parse_packet>:

sx1278_err_t parse_packet(uint8_t *packet_data, sx1278_packet_t *packet)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b0a4      	sub	sp, #144	; 0x90
 8001e58:	af02      	add	r7, sp, #8
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
	int packet_len = strlen((char *)packet_data);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7fe f976 	bl	8000150 <strlen>
 8001e64:	4603      	mov	r3, r0
 8001e66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    packet->opcode = (uint16_t)(packet_data[0] << 8 | packet_data[1]);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	b21a      	sxth	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3301      	adds	r3, #1
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	b21b      	sxth	r3, r3
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	b21b      	sxth	r3, r3
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	801a      	strh	r2, [r3, #0]
    packet->node_id = (uint16_t)(packet_data[2] << 8 | packet_data[3]);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3302      	adds	r3, #2
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	b21a      	sxth	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3303      	adds	r3, #3
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	b21b      	sxth	r3, r3
 8001e96:	4313      	orrs	r3, r2
 8001e98:	b21b      	sxth	r3, r3
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	805a      	strh	r2, [r3, #2]
    packet->gate_id = (uint16_t)(packet_data[4] << 8 | packet_data[5]);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	021b      	lsls	r3, r3, #8
 8001ea8:	b21a      	sxth	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3305      	adds	r3, #5
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	b21b      	sxth	r3, r3
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	b21b      	sxth	r3, r3
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	809a      	strh	r2, [r3, #4]
    if (packet->node_id != node_id)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	885b      	ldrh	r3, [r3, #2]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4b42      	ldr	r3, [pc, #264]	; (8001fcc <parse_packet+0x178>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d001      	beq.n	8001ece <parse_packet+0x7a>
    {
    	return SX1278_NOT_OK;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e07a      	b.n	8001fc4 <parse_packet+0x170>
    }
    if (packet->opcode == DOWNLINK_RX_REQUEST_OPCODE)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	f647 1272 	movw	r2, #31090	; 0x7972
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d162      	bne.n	8001fa0 <parse_packet+0x14c>
    {
    	if (packet_len != 15)
 8001eda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ede:	2b0f      	cmp	r3, #15
 8001ee0:	d007      	beq.n	8001ef2 <parse_packet+0x9e>
    	{
    		LOG(TAG, "ERROR: Packet len");
 8001ee2:	4b3b      	ldr	r3, [pc, #236]	; (8001fd0 <parse_packet+0x17c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	493b      	ldr	r1, [pc, #236]	; (8001fd4 <parse_packet+0x180>)
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff f81b 	bl	8000f24 <LOG>
    		return SX1278_NOT_OK;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e068      	b.n	8001fc4 <parse_packet+0x170>
    	}
    	else
    	{
            memcpy((char *)packet->period.bytes, (char *)&packet_data[6], sizeof(float));
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	3308      	adds	r3, #8
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	3206      	adds	r2, #6
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	601a      	str	r2, [r3, #0]
            memcpy((char *)packet->threshold.bytes, (char *)&packet_data[10], sizeof(float));
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	330c      	adds	r3, #12
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	320a      	adds	r2, #10
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	601a      	str	r2, [r3, #0]
            packet->crc = packet_data[15];
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	7bda      	ldrb	r2, [r3, #15]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	741a      	strb	r2, [r3, #16]
            int crc_check = get_crc_value(packet_data, strlen((char *)packet_data));
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7fe f91c 	bl	8000150 <strlen>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f8ff 	bl	8002120 <get_crc_value>
 8001f22:	4603      	mov	r3, r0
 8001f24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            if (crc_check != packet->crc)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	7c1b      	ldrb	r3, [r3, #16]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d007      	beq.n	8001f46 <parse_packet+0xf2>
            {
                LOG(TAG, "Error packet crc");
 8001f36:	4b26      	ldr	r3, [pc, #152]	; (8001fd0 <parse_packet+0x17c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4927      	ldr	r1, [pc, #156]	; (8001fd8 <parse_packet+0x184>)
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe fff1 	bl	8000f24 <LOG>
                return SX1278_NOT_OK;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e03e      	b.n	8001fc4 <parse_packet+0x170>
            else
            {
            	char data_log[100];
            	char period[5];
            	char threshold[5];
            	ftoa((double)packet->period.float_val, period, 1);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe fa6c 	bl	8000428 <__aeabi_f2d>
 8001f50:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001f54:	2301      	movs	r3, #1
 8001f56:	f7ff f891 	bl	800107c <ftoa>
            	ftoa((double)packet->threshold.float_val, threshold, 1);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fa62 	bl	8000428 <__aeabi_f2d>
 8001f64:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001f68:	2301      	movs	r3, #1
 8001f6a:	f7ff f887 	bl	800107c <ftoa>
            	sprintf(data_log, "Recv packet opcode 0x%04x, period: %s, threshold: %s", packet->opcode, period, threshold);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	4619      	mov	r1, r3
 8001f74:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001f78:	f107 000c 	add.w	r0, r7, #12
 8001f7c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	4613      	mov	r3, r2
 8001f84:	460a      	mov	r2, r1
 8001f86:	4915      	ldr	r1, [pc, #84]	; (8001fdc <parse_packet+0x188>)
 8001f88:	f004 fa1e 	bl	80063c8 <siprintf>
            	LOG(TAG, data_log);
 8001f8c:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <parse_packet+0x17c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f107 020c 	add.w	r2, r7, #12
 8001f94:	4611      	mov	r1, r2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe ffc4 	bl	8000f24 <LOG>
            	return SX1278_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e011      	b.n	8001fc4 <parse_packet+0x170>
    	}
    }
    else
    {
    	char data_log[50];
    	sprintf(data_log, "ERROR opcode: 0x%04x", packet->opcode);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	f107 030c 	add.w	r3, r7, #12
 8001faa:	490d      	ldr	r1, [pc, #52]	; (8001fe0 <parse_packet+0x18c>)
 8001fac:	4618      	mov	r0, r3
 8001fae:	f004 fa0b 	bl	80063c8 <siprintf>
        LOG(TAG, data_log);
 8001fb2:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <parse_packet+0x17c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f107 020c 	add.w	r2, r7, #12
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe ffb1 	bl	8000f24 <LOG>
        return SX1278_NOT_OK;
 8001fc2:	2301      	movs	r3, #1
    }
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3788      	adds	r7, #136	; 0x88
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20000324 	.word	0x20000324
 8001fd0:	20000008 	.word	0x20000008
 8001fd4:	08008674 	.word	0x08008674
 8001fd8:	08008688 	.word	0x08008688
 8001fdc:	0800869c 	.word	0x0800869c
 8001fe0:	080086d4 	.word	0x080086d4

08001fe4 <sx1278_recv_data>:

sx1278_err_t sx1278_recv_data(uint8_t *data_recv, int *rssi, float *snr, sx1278_packet_t *packet)
{
 8001fe4:	b590      	push	{r4, r7, lr}
 8001fe6:	b089      	sub	sp, #36	; 0x24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	603b      	str	r3, [r7, #0]
    int irq = sx1278_read_reg(REG_IRQ_FLAGS);
 8001ff2:	2012      	movs	r0, #18
 8001ff4:	f7ff fbe8 	bl	80017c8 <sx1278_read_reg>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	61bb      	str	r3, [r7, #24]
    memset((char *)data_recv, '\0', strlen((char *)data_recv));
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f7fe f8a7 	bl	8000150 <strlen>
 8002002:	4603      	mov	r3, r0
 8002004:	461a      	mov	r2, r3
 8002006:	2100      	movs	r1, #0
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f004 f969 	bl	80062e0 <memset>
    sx1278_write_reg(REG_IRQ_FLAGS, irq);
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	4619      	mov	r1, r3
 8002014:	2012      	movs	r0, #18
 8002016:	f7ff fc17 	bl	8001848 <sx1278_write_reg>

    if (!(irq & IRQ_RX_DONE_MASK))
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002020:	2b00      	cmp	r3, #0
 8002022:	d107      	bne.n	8002034 <sx1278_recv_data+0x50>
    {
        LOG(TAG, "Invalid RxDone Interrupt");
 8002024:	4b2b      	ldr	r3, [pc, #172]	; (80020d4 <sx1278_recv_data+0xf0>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	492b      	ldr	r1, [pc, #172]	; (80020d8 <sx1278_recv_data+0xf4>)
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe ff7a 	bl	8000f24 <LOG>
        return SX1278_INVALID_RX_DONE;
 8002030:	2302      	movs	r3, #2
 8002032:	e04b      	b.n	80020cc <sx1278_recv_data+0xe8>
    }

    if (!(irq & IRQ_VALID_HEADER_MASK))
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	f003 0310 	and.w	r3, r3, #16
 800203a:	2b00      	cmp	r3, #0
 800203c:	d107      	bne.n	800204e <sx1278_recv_data+0x6a>
    {
    	LOG(TAG, "Invalid Header Interrupt");
 800203e:	4b25      	ldr	r3, [pc, #148]	; (80020d4 <sx1278_recv_data+0xf0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4926      	ldr	r1, [pc, #152]	; (80020dc <sx1278_recv_data+0xf8>)
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe ff6d 	bl	8000f24 <LOG>
        return SX1278_INVALID_HEADER;
 800204a:	2304      	movs	r3, #4
 800204c:	e03e      	b.n	80020cc <sx1278_recv_data+0xe8>
    }

    if (irq & IRQ_PAYLOAD_CRC_ERROR_MASK)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	f003 0320 	and.w	r3, r3, #32
 8002054:	2b00      	cmp	r3, #0
 8002056:	d007      	beq.n	8002068 <sx1278_recv_data+0x84>
    {
    	LOG(TAG, "Payload Crc Error Interrupt");
 8002058:	4b1e      	ldr	r3, [pc, #120]	; (80020d4 <sx1278_recv_data+0xf0>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4920      	ldr	r1, [pc, #128]	; (80020e0 <sx1278_recv_data+0xfc>)
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe ff60 	bl	8000f24 <LOG>
        return SX1278_PAYLOAD_CRC_ERROR;
 8002064:	2303      	movs	r3, #3
 8002066:	e031      	b.n	80020cc <sx1278_recv_data+0xe8>
    }

    int len = sx1278_read_reg(REG_RX_NB_BYTES);
 8002068:	2013      	movs	r0, #19
 800206a:	f7ff fbad 	bl	80017c8 <sx1278_read_reg>
 800206e:	4603      	mov	r3, r0
 8002070:	617b      	str	r3, [r7, #20]
    *rssi = sx1278_get_rssi();
 8002072:	f7ff fe27 	bl	8001cc4 <sx1278_get_rssi>
 8002076:	4602      	mov	r2, r0
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	601a      	str	r2, [r3, #0]
    *snr = sx1278_get_snr();
 800207c:	f7ff fe2c 	bl	8001cd8 <sx1278_get_snr>
 8002080:	4602      	mov	r2, r0
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	601a      	str	r2, [r3, #0]
    sx1278_standby();
 8002086:	f7ff fc3d 	bl	8001904 <sx1278_standby>
    sx1278_write_reg(REG_FIFO_ADDR_PTR, sx1278_read_reg(REG_FIFO_RX_CURRENT_ADDR));
 800208a:	2010      	movs	r0, #16
 800208c:	f7ff fb9c 	bl	80017c8 <sx1278_read_reg>
 8002090:	4603      	mov	r3, r0
 8002092:	4619      	mov	r1, r3
 8002094:	200d      	movs	r0, #13
 8002096:	f7ff fbd7 	bl	8001848 <sx1278_write_reg>
    for (int index = 0; index < len; index++)
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
 800209e:	e00a      	b.n	80020b6 <sx1278_recv_data+0xd2>
    {
        data_recv[index] = sx1278_read_reg(REG_FIFO);
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	18d4      	adds	r4, r2, r3
 80020a6:	2000      	movs	r0, #0
 80020a8:	f7ff fb8e 	bl	80017c8 <sx1278_read_reg>
 80020ac:	4603      	mov	r3, r0
 80020ae:	7023      	strb	r3, [r4, #0]
    for (int index = 0; index < len; index++)
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	3301      	adds	r3, #1
 80020b4:	61fb      	str	r3, [r7, #28]
 80020b6:	69fa      	ldr	r2, [r7, #28]
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	dbf0      	blt.n	80020a0 <sx1278_recv_data+0xbc>
    }
    sx1278_sleep();
 80020be:	f7ff fc19 	bl	80018f4 <sx1278_sleep>
    parse_packet(data_recv, packet);
 80020c2:	6839      	ldr	r1, [r7, #0]
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f7ff fec5 	bl	8001e54 <parse_packet>
    return SX1278_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3724      	adds	r7, #36	; 0x24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd90      	pop	{r4, r7, pc}
 80020d4:	20000008 	.word	0x20000008
 80020d8:	080086ec 	.word	0x080086ec
 80020dc:	08008708 	.word	0x08008708
 80020e0:	08008724 	.word	0x08008724

080020e4 <get_random_value>:

int get_random_value(int min, int max)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
    srand(time(NULL));
 80020ee:	2000      	movs	r0, #0
 80020f0:	f004 f98a 	bl	8006408 <time>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4613      	mov	r3, r2
 80020fa:	4618      	mov	r0, r3
 80020fc:	f004 f8f8 	bl	80062f0 <srand>
    return (rand() % max) + min;
 8002100:	f004 f924 	bl	800634c <rand>
 8002104:	4603      	mov	r3, r0
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	fb93 f2f2 	sdiv	r2, r3, r2
 800210c:	6839      	ldr	r1, [r7, #0]
 800210e:	fb01 f202 	mul.w	r2, r1, r2
 8002112:	1a9a      	subs	r2, r3, r2
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4413      	add	r3, r2
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <get_crc_value>:

uint8_t get_crc_value(uint8_t *data, int len)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < len; i++)
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	e009      	b.n	8002148 <get_crc_value+0x28>
    {
        crc ^= data[i];
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	781a      	ldrb	r2, [r3, #0]
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	4053      	eors	r3, r2
 8002140:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < len; i++)
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	3301      	adds	r3, #1
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	68ba      	ldr	r2, [r7, #8]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	dbf1      	blt.n	8002134 <get_crc_value+0x14>
    }
    return crc;
 8002150:	7bfb      	ldrb	r3, [r7, #15]
}
 8002152:	4618      	mov	r0, r3
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr

0800215c <listen_before_talk>:

bool listen_before_talk(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b092      	sub	sp, #72	; 0x48
 8002160:	af02      	add	r7, sp, #8
    EventBits_t evt_bits;
    while (1)
    {
        sx1278_cad();
 8002162:	f7ff fbdf 	bl	8001924 <sx1278_cad>
        evt_bits = xEventGroupWaitBits(sx1278_evt_group, SX1278_DIO3_BIT | SX1278_DIO4_BIT, pdTRUE, pdFALSE, portMAX_DELAY);
 8002166:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <listen_before_talk+0x80>)
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	f04f 33ff 	mov.w	r3, #4294967295
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	2300      	movs	r3, #0
 8002172:	2201      	movs	r2, #1
 8002174:	2106      	movs	r1, #6
 8002176:	f002 fdbd 	bl	8004cf4 <xEventGroupWaitBits>
 800217a:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (evt_bits & SX1278_DIO3_BIT) // CadDone
 800217c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d007      	beq.n	8002196 <listen_before_talk+0x3a>
        {
            LOG(TAG, "Cad timeout");
 8002186:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <listen_before_talk+0x84>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4916      	ldr	r1, [pc, #88]	; (80021e4 <listen_before_talk+0x88>)
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe fec9 	bl	8000f24 <LOG>
            return true;
 8002192:	2301      	movs	r3, #1
 8002194:	e01d      	b.n	80021d2 <listen_before_talk+0x76>
        }
        else if (evt_bits & SX1278_DIO4_BIT) // CadDetected
 8002196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0e0      	beq.n	8002162 <listen_before_talk+0x6>
        {
            sx1278_sleep();
 80021a0:	f7ff fba8 	bl	80018f4 <sx1278_sleep>
            TickType_t time_delay = (TickType_t)get_random_value(0, 50);
 80021a4:	2132      	movs	r1, #50	; 0x32
 80021a6:	2000      	movs	r0, #0
 80021a8:	f7ff ff9c 	bl	80020e4 <get_random_value>
 80021ac:	4603      	mov	r3, r0
 80021ae:	63bb      	str	r3, [r7, #56]	; 0x38
            char data_log[50];
            sprintf(data_log, "Cad Detected, sleep in %d", (int)time_delay);
 80021b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	490c      	ldr	r1, [pc, #48]	; (80021e8 <listen_before_talk+0x8c>)
 80021b6:	4618      	mov	r0, r3
 80021b8:	f004 f906 	bl	80063c8 <siprintf>
            LOG(TAG, data_log);
 80021bc:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <listen_before_talk+0x84>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	1d3a      	adds	r2, r7, #4
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe fead 	bl	8000f24 <LOG>
            vTaskDelay(time_delay / portTICK_RATE_MS);
 80021ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80021cc:	f003 f8ba 	bl	8005344 <vTaskDelay>
        sx1278_cad();
 80021d0:	e7c7      	b.n	8002162 <listen_before_talk+0x6>
        }
    }
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3740      	adds	r7, #64	; 0x40
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200000cc 	.word	0x200000cc
 80021e0:	20000008 	.word	0x20000008
 80021e4:	08008740 	.word	0x08008740
 80021e8:	0800874c 	.word	0x0800874c

080021ec <send_respond>:

void send_respond(sx1278_opcode_type_t opcode, sx1278_respond_t respond, uint8_t *packet)
{
 80021ec:	b084      	sub	sp, #16
 80021ee:	b590      	push	{r4, r7, lr}
 80021f0:	b087      	sub	sp, #28
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	4604      	mov	r4, r0
 80021f6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80021fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80021fe:	4623      	mov	r3, r4
 8002200:	80fb      	strh	r3, [r7, #6]
	memset((char *)packet, '\0', strlen((char *)packet));
 8002202:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002204:	f7fd ffa4 	bl	8000150 <strlen>
 8002208:	4603      	mov	r3, r0
 800220a:	461a      	mov	r2, r3
 800220c:	2100      	movs	r1, #0
 800220e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002210:	f004 f866 	bl	80062e0 <memset>
    packet[1] = (uint8_t)(opcode & 0x00FF);
 8002214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002216:	3301      	adds	r3, #1
 8002218:	88fa      	ldrh	r2, [r7, #6]
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	701a      	strb	r2, [r3, #0]
    packet[0] = (uint8_t)((opcode & 0xFF00) >> 8);
 800221e:	88fb      	ldrh	r3, [r7, #6]
 8002220:	0a1b      	lsrs	r3, r3, #8
 8002222:	b29b      	uxth	r3, r3
 8002224:	b2da      	uxtb	r2, r3
 8002226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002228:	701a      	strb	r2, [r3, #0]
    packet[3] = (uint8_t)(respond.node_id & 0x00FF);
 800222a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800222c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800222e:	3303      	adds	r3, #3
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	701a      	strb	r2, [r3, #0]
    packet[2] = (uint8_t)((respond.node_id & 0xFF00) >> 8);
 8002234:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002236:	0a1b      	lsrs	r3, r3, #8
 8002238:	b29a      	uxth	r2, r3
 800223a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800223c:	3302      	adds	r3, #2
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	701a      	strb	r2, [r3, #0]
    packet[5] = (uint8_t)(respond.gate_id & 0x00FF);
 8002242:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002246:	3305      	adds	r3, #5
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	701a      	strb	r2, [r3, #0]
    packet[4] = (uint8_t)((respond.gate_id & 0xFF00) >> 8);
 800224c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800224e:	0a1b      	lsrs	r3, r3, #8
 8002250:	b29a      	uxth	r2, r3
 8002252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002254:	3304      	adds	r3, #4
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	701a      	strb	r2, [r3, #0]
    if (opcode == UPLINK_TX_RESPOND_OPCODE)
 800225a:	88fb      	ldrh	r3, [r7, #6]
 800225c:	f647 1231 	movw	r2, #31025	; 0x7931
 8002260:	4293      	cmp	r3, r2
 8002262:	d158      	bne.n	8002316 <send_respond+0x12a>
    {
    	for (int i = 0; i < sizeof(float); i++)
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	e00d      	b.n	8002286 <send_respond+0x9a>
    	{
    		packet[6 + i] = respond.temp.bytes[i];
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	3306      	adds	r3, #6
 800226e:	461a      	mov	r2, r3
 8002270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002272:	4413      	add	r3, r2
 8002274:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	440a      	add	r2, r1
 800227c:	7812      	ldrb	r2, [r2, #0]
 800227e:	701a      	strb	r2, [r3, #0]
    	for (int i = 0; i < sizeof(float); i++)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	3301      	adds	r3, #1
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2b03      	cmp	r3, #3
 800228a:	d9ee      	bls.n	800226a <send_respond+0x7e>
    	}
    	for (int i = 0; i < sizeof(float); i++)
 800228c:	2300      	movs	r3, #0
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	e00d      	b.n	80022ae <send_respond+0xc2>
    	{
    		packet[10 + i] = respond.battery.bytes[i];
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	330a      	adds	r3, #10
 8002296:	461a      	mov	r2, r3
 8002298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800229a:	4413      	add	r3, r2
 800229c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	440a      	add	r2, r1
 80022a4:	7812      	ldrb	r2, [r2, #0]
 80022a6:	701a      	strb	r2, [r3, #0]
    	for (int i = 0; i < sizeof(float); i++)
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	3301      	adds	r3, #1
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d9ee      	bls.n	8002292 <send_respond+0xa6>
    	}
        for (int i = 0; i < sizeof(float); i++)
 80022b4:	2300      	movs	r3, #0
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	e00d      	b.n	80022d6 <send_respond+0xea>
        {
            packet[14 + i] = respond.period.bytes[i];
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	330e      	adds	r3, #14
 80022be:	461a      	mov	r2, r3
 80022c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022c2:	4413      	add	r3, r2
 80022c4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	440a      	add	r2, r1
 80022cc:	7812      	ldrb	r2, [r2, #0]
 80022ce:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < sizeof(float); i++)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	3301      	adds	r3, #1
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2b03      	cmp	r3, #3
 80022da:	d9ee      	bls.n	80022ba <send_respond+0xce>
        }
        for (int i = 0; i < sizeof(float); i++)
 80022dc:	2300      	movs	r3, #0
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	e00d      	b.n	80022fe <send_respond+0x112>
        {
            packet[18 + i] = respond.threshold.bytes[i];
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	3312      	adds	r3, #18
 80022e6:	461a      	mov	r2, r3
 80022e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022ea:	4413      	add	r3, r2
 80022ec:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80022f0:	68ba      	ldr	r2, [r7, #8]
 80022f2:	440a      	add	r2, r1
 80022f4:	7812      	ldrb	r2, [r2, #0]
 80022f6:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < sizeof(float); i++)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	3301      	adds	r3, #1
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b03      	cmp	r3, #3
 8002302:	d9ee      	bls.n	80022e2 <send_respond+0xf6>
        }
        packet[22] = get_crc_value(packet, 22);
 8002304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002306:	f103 0416 	add.w	r4, r3, #22
 800230a:	2116      	movs	r1, #22
 800230c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800230e:	f7ff ff07 	bl	8002120 <get_crc_value>
 8002312:	4603      	mov	r3, r0
 8002314:	7023      	strb	r3, [r4, #0]
    }
    sx1278_send_data(packet, strlen((char *)packet));
 8002316:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002318:	f7fd ff1a 	bl	8000150 <strlen>
 800231c:	4603      	mov	r3, r0
 800231e:	4619      	mov	r1, r3
 8002320:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002322:	f7ff fd53 	bl	8001dcc <sx1278_send_data>
}
 8002326:	bf00      	nop
 8002328:	371c      	adds	r7, #28
 800232a:	46bd      	mov	sp, r7
 800232c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002330:	b004      	add	sp, #16
 8002332:	4770      	bx	lr

08002334 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
	return 1;
 8002338:	2301      	movs	r3, #1
}
 800233a:	4618      	mov	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <_kill>:

int _kill(int pid, int sig)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800234c:	f003 ff90 	bl	8006270 <__errno>
 8002350:	4603      	mov	r3, r0
 8002352:	2216      	movs	r2, #22
 8002354:	601a      	str	r2, [r3, #0]
	return -1;
 8002356:	f04f 33ff 	mov.w	r3, #4294967295
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <_exit>:

void _exit (int status)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800236a:	f04f 31ff 	mov.w	r1, #4294967295
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff ffe7 	bl	8002342 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002374:	e7fe      	b.n	8002374 <_exit+0x12>

08002376 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b086      	sub	sp, #24
 800237a:	af00      	add	r7, sp, #0
 800237c:	60f8      	str	r0, [r7, #12]
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	e00a      	b.n	800239e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002388:	f3af 8000 	nop.w
 800238c:	4601      	mov	r1, r0
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	60ba      	str	r2, [r7, #8]
 8002394:	b2ca      	uxtb	r2, r1
 8002396:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	3301      	adds	r3, #1
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	dbf0      	blt.n	8002388 <_read+0x12>
	}

return len;
 80023a6:	687b      	ldr	r3, [r7, #4]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	e009      	b.n	80023d6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	60ba      	str	r2, [r7, #8]
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	3301      	adds	r3, #1
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	429a      	cmp	r2, r3
 80023dc:	dbf1      	blt.n	80023c2 <_write+0x12>
	}
	return len;
 80023de:	687b      	ldr	r3, [r7, #4]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <_close>:

int _close(int file)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
	return -1;
 80023f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr

080023fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800240e:	605a      	str	r2, [r3, #4]
	return 0;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <_isatty>:

int _isatty(int file)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
	return 1;
 8002424:	2301      	movs	r3, #1
}
 8002426:	4618      	mov	r0, r3
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr

08002430 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
	return 0;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr

08002448 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002450:	4a14      	ldr	r2, [pc, #80]	; (80024a4 <_sbrk+0x5c>)
 8002452:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <_sbrk+0x60>)
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800245c:	4b13      	ldr	r3, [pc, #76]	; (80024ac <_sbrk+0x64>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d102      	bne.n	800246a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002464:	4b11      	ldr	r3, [pc, #68]	; (80024ac <_sbrk+0x64>)
 8002466:	4a12      	ldr	r2, [pc, #72]	; (80024b0 <_sbrk+0x68>)
 8002468:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800246a:	4b10      	ldr	r3, [pc, #64]	; (80024ac <_sbrk+0x64>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4413      	add	r3, r2
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	429a      	cmp	r2, r3
 8002476:	d207      	bcs.n	8002488 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002478:	f003 fefa 	bl	8006270 <__errno>
 800247c:	4603      	mov	r3, r0
 800247e:	220c      	movs	r2, #12
 8002480:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002482:	f04f 33ff 	mov.w	r3, #4294967295
 8002486:	e009      	b.n	800249c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002488:	4b08      	ldr	r3, [pc, #32]	; (80024ac <_sbrk+0x64>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800248e:	4b07      	ldr	r3, [pc, #28]	; (80024ac <_sbrk+0x64>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	4a05      	ldr	r2, [pc, #20]	; (80024ac <_sbrk+0x64>)
 8002498:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800249a:	68fb      	ldr	r3, [r7, #12]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20005000 	.word	0x20005000
 80024a8:	00000400 	.word	0x00000400
 80024ac:	200003c8 	.word	0x200003c8
 80024b0:	20001170 	.word	0x20001170

080024b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024b8:	bf00      	nop
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr

080024c0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <MX_USART1_UART_Init+0x4c>)
 80024c6:	4a12      	ldr	r2, [pc, #72]	; (8002510 <MX_USART1_UART_Init+0x50>)
 80024c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024ca:	4b10      	ldr	r3, [pc, #64]	; (800250c <MX_USART1_UART_Init+0x4c>)
 80024cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024d2:	4b0e      	ldr	r3, [pc, #56]	; (800250c <MX_USART1_UART_Init+0x4c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <MX_USART1_UART_Init+0x4c>)
 80024da:	2200      	movs	r2, #0
 80024dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <MX_USART1_UART_Init+0x4c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <MX_USART1_UART_Init+0x4c>)
 80024e6:	220c      	movs	r2, #12
 80024e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ea:	4b08      	ldr	r3, [pc, #32]	; (800250c <MX_USART1_UART_Init+0x4c>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <MX_USART1_UART_Init+0x4c>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024f6:	4805      	ldr	r0, [pc, #20]	; (800250c <MX_USART1_UART_Init+0x4c>)
 80024f8:	f002 fa22 	bl	8004940 <HAL_UART_Init>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002502:	f7ff f819 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	200003cc 	.word	0x200003cc
 8002510:	40013800 	.word	0x40013800

08002514 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b088      	sub	sp, #32
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251c:	f107 0310 	add.w	r3, r7, #16
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a1c      	ldr	r2, [pc, #112]	; (80025a0 <HAL_UART_MspInit+0x8c>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d131      	bne.n	8002598 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002534:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <HAL_UART_MspInit+0x90>)
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	4a1a      	ldr	r2, [pc, #104]	; (80025a4 <HAL_UART_MspInit+0x90>)
 800253a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800253e:	6193      	str	r3, [r2, #24]
 8002540:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <HAL_UART_MspInit+0x90>)
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254c:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <HAL_UART_MspInit+0x90>)
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	4a14      	ldr	r2, [pc, #80]	; (80025a4 <HAL_UART_MspInit+0x90>)
 8002552:	f043 0304 	orr.w	r3, r3, #4
 8002556:	6193      	str	r3, [r2, #24]
 8002558:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <HAL_UART_MspInit+0x90>)
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002564:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002568:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256a:	2302      	movs	r3, #2
 800256c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800256e:	2303      	movs	r3, #3
 8002570:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002572:	f107 0310 	add.w	r3, r7, #16
 8002576:	4619      	mov	r1, r3
 8002578:	480b      	ldr	r0, [pc, #44]	; (80025a8 <HAL_UART_MspInit+0x94>)
 800257a:	f000 fb61 	bl	8002c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800257e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002582:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258c:	f107 0310 	add.w	r3, r7, #16
 8002590:	4619      	mov	r1, r3
 8002592:	4805      	ldr	r0, [pc, #20]	; (80025a8 <HAL_UART_MspInit+0x94>)
 8002594:	f000 fb54 	bl	8002c40 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002598:	bf00      	nop
 800259a:	3720      	adds	r7, #32
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40013800 	.word	0x40013800
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40010800 	.word	0x40010800

080025ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025ac:	480c      	ldr	r0, [pc, #48]	; (80025e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025ae:	490d      	ldr	r1, [pc, #52]	; (80025e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025b0:	4a0d      	ldr	r2, [pc, #52]	; (80025e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b4:	e002      	b.n	80025bc <LoopCopyDataInit>

080025b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ba:	3304      	adds	r3, #4

080025bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c0:	d3f9      	bcc.n	80025b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025c2:	4a0a      	ldr	r2, [pc, #40]	; (80025ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025c4:	4c0a      	ldr	r4, [pc, #40]	; (80025f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c8:	e001      	b.n	80025ce <LoopFillZerobss>

080025ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025cc:	3204      	adds	r2, #4

080025ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d0:	d3fb      	bcc.n	80025ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025d2:	f7ff ff6f 	bl	80024b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025d6:	f003 fe51 	bl	800627c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025da:	f7fe ff0f 	bl	80013fc <main>
  bx lr
 80025de:	4770      	bx	lr
  ldr r0, =_sdata
 80025e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025e4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80025e8:	08008920 	.word	0x08008920
  ldr r2, =_sbss
 80025ec:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80025f0:	20001170 	.word	0x20001170

080025f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025f4:	e7fe      	b.n	80025f4 <ADC1_2_IRQHandler>
	...

080025f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025fc:	4b08      	ldr	r3, [pc, #32]	; (8002620 <HAL_Init+0x28>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a07      	ldr	r2, [pc, #28]	; (8002620 <HAL_Init+0x28>)
 8002602:	f043 0310 	orr.w	r3, r3, #16
 8002606:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002608:	2003      	movs	r0, #3
 800260a:	f000 fae3 	bl	8002bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800260e:	200f      	movs	r0, #15
 8002610:	f7ff f852 	bl	80016b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002614:	f7ff f818 	bl	8001648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40022000 	.word	0x40022000

08002624 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002628:	4b05      	ldr	r3, [pc, #20]	; (8002640 <HAL_IncTick+0x1c>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	461a      	mov	r2, r3
 800262e:	4b05      	ldr	r3, [pc, #20]	; (8002644 <HAL_IncTick+0x20>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4413      	add	r3, r2
 8002634:	4a03      	ldr	r2, [pc, #12]	; (8002644 <HAL_IncTick+0x20>)
 8002636:	6013      	str	r3, [r2, #0]
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr
 8002640:	20000014 	.word	0x20000014
 8002644:	20000410 	.word	0x20000410

08002648 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return uwTick;
 800264c:	4b02      	ldr	r3, [pc, #8]	; (8002658 <HAL_GetTick+0x10>)
 800264e:	681b      	ldr	r3, [r3, #0]
}
 8002650:	4618      	mov	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr
 8002658:	20000410 	.word	0x20000410

0800265c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e0be      	b.n	80027fc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002688:	2b00      	cmp	r3, #0
 800268a:	d109      	bne.n	80026a0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7fe fc06 	bl	8000eac <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f9ab 	bl	80029fc <ADC_ConversionStop_Disable>
 80026a6:	4603      	mov	r3, r0
 80026a8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ae:	f003 0310 	and.w	r3, r3, #16
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f040 8099 	bne.w	80027ea <HAL_ADC_Init+0x18e>
 80026b8:	7dfb      	ldrb	r3, [r7, #23]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f040 8095 	bne.w	80027ea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026c8:	f023 0302 	bic.w	r3, r3, #2
 80026cc:	f043 0202 	orr.w	r2, r3, #2
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80026dc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	7b1b      	ldrb	r3, [r3, #12]
 80026e2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80026e4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026f4:	d003      	beq.n	80026fe <HAL_ADC_Init+0xa2>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d102      	bne.n	8002704 <HAL_ADC_Init+0xa8>
 80026fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002702:	e000      	b.n	8002706 <HAL_ADC_Init+0xaa>
 8002704:	2300      	movs	r3, #0
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	7d1b      	ldrb	r3, [r3, #20]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d119      	bne.n	8002748 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	7b1b      	ldrb	r3, [r3, #12]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d109      	bne.n	8002730 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	3b01      	subs	r3, #1
 8002722:	035a      	lsls	r2, r3, #13
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4313      	orrs	r3, r2
 8002728:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	e00b      	b.n	8002748 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	f043 0220 	orr.w	r2, r3, #32
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002740:	f043 0201 	orr.w	r2, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	430a      	orrs	r2, r1
 800275a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	4b28      	ldr	r3, [pc, #160]	; (8002804 <HAL_ADC_Init+0x1a8>)
 8002764:	4013      	ands	r3, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6812      	ldr	r2, [r2, #0]
 800276a:	68b9      	ldr	r1, [r7, #8]
 800276c:	430b      	orrs	r3, r1
 800276e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002778:	d003      	beq.n	8002782 <HAL_ADC_Init+0x126>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d104      	bne.n	800278c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	3b01      	subs	r3, #1
 8002788:	051b      	lsls	r3, r3, #20
 800278a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	430a      	orrs	r2, r1
 800279e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	4b18      	ldr	r3, [pc, #96]	; (8002808 <HAL_ADC_Init+0x1ac>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d10b      	bne.n	80027c8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	f023 0303 	bic.w	r3, r3, #3
 80027be:	f043 0201 	orr.w	r2, r3, #1
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027c6:	e018      	b.n	80027fa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027cc:	f023 0312 	bic.w	r3, r3, #18
 80027d0:	f043 0210 	orr.w	r2, r3, #16
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	f043 0201 	orr.w	r2, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027e8:	e007      	b.n	80027fa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ee:	f043 0210 	orr.w	r2, r3, #16
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80027fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	ffe1f7fd 	.word	0xffe1f7fd
 8002808:	ff1f0efe 	.word	0xff1f0efe

0800280c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_ADC_ConfigChannel+0x20>
 8002828:	2302      	movs	r3, #2
 800282a:	e0dc      	b.n	80029e6 <HAL_ADC_ConfigChannel+0x1da>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b06      	cmp	r3, #6
 800283a:	d81c      	bhi.n	8002876 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	3b05      	subs	r3, #5
 800284e:	221f      	movs	r2, #31
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	4019      	ands	r1, r3
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	6818      	ldr	r0, [r3, #0]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	3b05      	subs	r3, #5
 8002868:	fa00 f203 	lsl.w	r2, r0, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	635a      	str	r2, [r3, #52]	; 0x34
 8002874:	e03c      	b.n	80028f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b0c      	cmp	r3, #12
 800287c:	d81c      	bhi.n	80028b8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	3b23      	subs	r3, #35	; 0x23
 8002890:	221f      	movs	r2, #31
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	4019      	ands	r1, r3
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6818      	ldr	r0, [r3, #0]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	3b23      	subs	r3, #35	; 0x23
 80028aa:	fa00 f203 	lsl.w	r2, r0, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	631a      	str	r2, [r3, #48]	; 0x30
 80028b6:	e01b      	b.n	80028f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	3b41      	subs	r3, #65	; 0x41
 80028ca:	221f      	movs	r2, #31
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	4019      	ands	r1, r3
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	3b41      	subs	r3, #65	; 0x41
 80028e4:	fa00 f203 	lsl.w	r2, r0, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b09      	cmp	r3, #9
 80028f6:	d91c      	bls.n	8002932 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68d9      	ldr	r1, [r3, #12]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	4613      	mov	r3, r2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4413      	add	r3, r2
 8002908:	3b1e      	subs	r3, #30
 800290a:	2207      	movs	r2, #7
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	4019      	ands	r1, r3
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	6898      	ldr	r0, [r3, #8]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4613      	mov	r3, r2
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	4413      	add	r3, r2
 8002922:	3b1e      	subs	r3, #30
 8002924:	fa00 f203 	lsl.w	r2, r0, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	60da      	str	r2, [r3, #12]
 8002930:	e019      	b.n	8002966 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6919      	ldr	r1, [r3, #16]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4613      	mov	r3, r2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	4413      	add	r3, r2
 8002942:	2207      	movs	r2, #7
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	4019      	ands	r1, r3
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	6898      	ldr	r0, [r3, #8]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	4613      	mov	r3, r2
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	4413      	add	r3, r2
 800295a:	fa00 f203 	lsl.w	r2, r0, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b10      	cmp	r3, #16
 800296c:	d003      	beq.n	8002976 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002972:	2b11      	cmp	r3, #17
 8002974:	d132      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a1d      	ldr	r2, [pc, #116]	; (80029f0 <HAL_ADC_ConfigChannel+0x1e4>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d125      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d126      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800299c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b10      	cmp	r3, #16
 80029a4:	d11a      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029a6:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <HAL_ADC_ConfigChannel+0x1e8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a13      	ldr	r2, [pc, #76]	; (80029f8 <HAL_ADC_ConfigChannel+0x1ec>)
 80029ac:	fba2 2303 	umull	r2, r3, r2, r3
 80029b0:	0c9a      	lsrs	r2, r3, #18
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029bc:	e002      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	3b01      	subs	r3, #1
 80029c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f9      	bne.n	80029be <HAL_ADC_ConfigChannel+0x1b2>
 80029ca:	e007      	b.n	80029dc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d0:	f043 0220 	orr.w	r2, r3, #32
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr
 80029f0:	40012400 	.word	0x40012400
 80029f4:	2000000c 	.word	0x2000000c
 80029f8:	431bde83 	.word	0x431bde83

080029fc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d12e      	bne.n	8002a74 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0201 	bic.w	r2, r2, #1
 8002a24:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a26:	f7ff fe0f 	bl	8002648 <HAL_GetTick>
 8002a2a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a2c:	e01b      	b.n	8002a66 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a2e:	f7ff fe0b 	bl	8002648 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d914      	bls.n	8002a66 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d10d      	bne.n	8002a66 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4e:	f043 0210 	orr.w	r2, r3, #16
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5a:	f043 0201 	orr.w	r2, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e007      	b.n	8002a76 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d0dc      	beq.n	8002a2e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a90:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ab2:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	60d3      	str	r3, [r2, #12]
}
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	e000ed00 	.word	0xe000ed00

08002ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002acc:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	0a1b      	lsrs	r3, r3, #8
 8002ad2:	f003 0307 	and.w	r3, r3, #7
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	e000ed00 	.word	0xe000ed00

08002ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	db0b      	blt.n	8002b0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	f003 021f 	and.w	r2, r3, #31
 8002afc:	4906      	ldr	r1, [pc, #24]	; (8002b18 <__NVIC_EnableIRQ+0x34>)
 8002afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	2001      	movs	r0, #1
 8002b06:	fa00 f202 	lsl.w	r2, r0, r2
 8002b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr
 8002b18:	e000e100 	.word	0xe000e100

08002b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	6039      	str	r1, [r7, #0]
 8002b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	db0a      	blt.n	8002b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	490c      	ldr	r1, [pc, #48]	; (8002b68 <__NVIC_SetPriority+0x4c>)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	0112      	lsls	r2, r2, #4
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	440b      	add	r3, r1
 8002b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b44:	e00a      	b.n	8002b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	4908      	ldr	r1, [pc, #32]	; (8002b6c <__NVIC_SetPriority+0x50>)
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	3b04      	subs	r3, #4
 8002b54:	0112      	lsls	r2, r2, #4
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	440b      	add	r3, r1
 8002b5a:	761a      	strb	r2, [r3, #24]
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	e000e100 	.word	0xe000e100
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b089      	sub	sp, #36	; 0x24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f1c3 0307 	rsb	r3, r3, #7
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	bf28      	it	cs
 8002b8e:	2304      	movcs	r3, #4
 8002b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3304      	adds	r3, #4
 8002b96:	2b06      	cmp	r3, #6
 8002b98:	d902      	bls.n	8002ba0 <NVIC_EncodePriority+0x30>
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3b03      	subs	r3, #3
 8002b9e:	e000      	b.n	8002ba2 <NVIC_EncodePriority+0x32>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43da      	mvns	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	401a      	ands	r2, r3
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc2:	43d9      	mvns	r1, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc8:	4313      	orrs	r3, r2
         );
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3724      	adds	r7, #36	; 0x24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7ff ff4f 	bl	8002a80 <__NVIC_SetPriorityGrouping>
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b086      	sub	sp, #24
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	607a      	str	r2, [r7, #4]
 8002bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bfc:	f7ff ff64 	bl	8002ac8 <__NVIC_GetPriorityGrouping>
 8002c00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	68b9      	ldr	r1, [r7, #8]
 8002c06:	6978      	ldr	r0, [r7, #20]
 8002c08:	f7ff ffb2 	bl	8002b70 <NVIC_EncodePriority>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c12:	4611      	mov	r1, r2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff ff81 	bl	8002b1c <__NVIC_SetPriority>
}
 8002c1a:	bf00      	nop
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	4603      	mov	r3, r0
 8002c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff ff57 	bl	8002ae4 <__NVIC_EnableIRQ>
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b08b      	sub	sp, #44	; 0x2c
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c52:	e169      	b.n	8002f28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c54:	2201      	movs	r2, #1
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	69fa      	ldr	r2, [r7, #28]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	f040 8158 	bne.w	8002f22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	4a9a      	ldr	r2, [pc, #616]	; (8002ee0 <HAL_GPIO_Init+0x2a0>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d05e      	beq.n	8002d3a <HAL_GPIO_Init+0xfa>
 8002c7c:	4a98      	ldr	r2, [pc, #608]	; (8002ee0 <HAL_GPIO_Init+0x2a0>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d875      	bhi.n	8002d6e <HAL_GPIO_Init+0x12e>
 8002c82:	4a98      	ldr	r2, [pc, #608]	; (8002ee4 <HAL_GPIO_Init+0x2a4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d058      	beq.n	8002d3a <HAL_GPIO_Init+0xfa>
 8002c88:	4a96      	ldr	r2, [pc, #600]	; (8002ee4 <HAL_GPIO_Init+0x2a4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d86f      	bhi.n	8002d6e <HAL_GPIO_Init+0x12e>
 8002c8e:	4a96      	ldr	r2, [pc, #600]	; (8002ee8 <HAL_GPIO_Init+0x2a8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d052      	beq.n	8002d3a <HAL_GPIO_Init+0xfa>
 8002c94:	4a94      	ldr	r2, [pc, #592]	; (8002ee8 <HAL_GPIO_Init+0x2a8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d869      	bhi.n	8002d6e <HAL_GPIO_Init+0x12e>
 8002c9a:	4a94      	ldr	r2, [pc, #592]	; (8002eec <HAL_GPIO_Init+0x2ac>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d04c      	beq.n	8002d3a <HAL_GPIO_Init+0xfa>
 8002ca0:	4a92      	ldr	r2, [pc, #584]	; (8002eec <HAL_GPIO_Init+0x2ac>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d863      	bhi.n	8002d6e <HAL_GPIO_Init+0x12e>
 8002ca6:	4a92      	ldr	r2, [pc, #584]	; (8002ef0 <HAL_GPIO_Init+0x2b0>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d046      	beq.n	8002d3a <HAL_GPIO_Init+0xfa>
 8002cac:	4a90      	ldr	r2, [pc, #576]	; (8002ef0 <HAL_GPIO_Init+0x2b0>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d85d      	bhi.n	8002d6e <HAL_GPIO_Init+0x12e>
 8002cb2:	2b12      	cmp	r3, #18
 8002cb4:	d82a      	bhi.n	8002d0c <HAL_GPIO_Init+0xcc>
 8002cb6:	2b12      	cmp	r3, #18
 8002cb8:	d859      	bhi.n	8002d6e <HAL_GPIO_Init+0x12e>
 8002cba:	a201      	add	r2, pc, #4	; (adr r2, 8002cc0 <HAL_GPIO_Init+0x80>)
 8002cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc0:	08002d3b 	.word	0x08002d3b
 8002cc4:	08002d15 	.word	0x08002d15
 8002cc8:	08002d27 	.word	0x08002d27
 8002ccc:	08002d69 	.word	0x08002d69
 8002cd0:	08002d6f 	.word	0x08002d6f
 8002cd4:	08002d6f 	.word	0x08002d6f
 8002cd8:	08002d6f 	.word	0x08002d6f
 8002cdc:	08002d6f 	.word	0x08002d6f
 8002ce0:	08002d6f 	.word	0x08002d6f
 8002ce4:	08002d6f 	.word	0x08002d6f
 8002ce8:	08002d6f 	.word	0x08002d6f
 8002cec:	08002d6f 	.word	0x08002d6f
 8002cf0:	08002d6f 	.word	0x08002d6f
 8002cf4:	08002d6f 	.word	0x08002d6f
 8002cf8:	08002d6f 	.word	0x08002d6f
 8002cfc:	08002d6f 	.word	0x08002d6f
 8002d00:	08002d6f 	.word	0x08002d6f
 8002d04:	08002d1d 	.word	0x08002d1d
 8002d08:	08002d31 	.word	0x08002d31
 8002d0c:	4a79      	ldr	r2, [pc, #484]	; (8002ef4 <HAL_GPIO_Init+0x2b4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d013      	beq.n	8002d3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d12:	e02c      	b.n	8002d6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	623b      	str	r3, [r7, #32]
          break;
 8002d1a:	e029      	b.n	8002d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	3304      	adds	r3, #4
 8002d22:	623b      	str	r3, [r7, #32]
          break;
 8002d24:	e024      	b.n	8002d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	3308      	adds	r3, #8
 8002d2c:	623b      	str	r3, [r7, #32]
          break;
 8002d2e:	e01f      	b.n	8002d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	330c      	adds	r3, #12
 8002d36:	623b      	str	r3, [r7, #32]
          break;
 8002d38:	e01a      	b.n	8002d70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d102      	bne.n	8002d48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d42:	2304      	movs	r3, #4
 8002d44:	623b      	str	r3, [r7, #32]
          break;
 8002d46:	e013      	b.n	8002d70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d105      	bne.n	8002d5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d50:	2308      	movs	r3, #8
 8002d52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69fa      	ldr	r2, [r7, #28]
 8002d58:	611a      	str	r2, [r3, #16]
          break;
 8002d5a:	e009      	b.n	8002d70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d5c:	2308      	movs	r3, #8
 8002d5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69fa      	ldr	r2, [r7, #28]
 8002d64:	615a      	str	r2, [r3, #20]
          break;
 8002d66:	e003      	b.n	8002d70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	623b      	str	r3, [r7, #32]
          break;
 8002d6c:	e000      	b.n	8002d70 <HAL_GPIO_Init+0x130>
          break;
 8002d6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	2bff      	cmp	r3, #255	; 0xff
 8002d74:	d801      	bhi.n	8002d7a <HAL_GPIO_Init+0x13a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	e001      	b.n	8002d7e <HAL_GPIO_Init+0x13e>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	2bff      	cmp	r3, #255	; 0xff
 8002d84:	d802      	bhi.n	8002d8c <HAL_GPIO_Init+0x14c>
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	e002      	b.n	8002d92 <HAL_GPIO_Init+0x152>
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	3b08      	subs	r3, #8
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	210f      	movs	r1, #15
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	401a      	ands	r2, r3
 8002da4:	6a39      	ldr	r1, [r7, #32]
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dac:	431a      	orrs	r2, r3
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 80b1 	beq.w	8002f22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002dc0:	4b4d      	ldr	r3, [pc, #308]	; (8002ef8 <HAL_GPIO_Init+0x2b8>)
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	4a4c      	ldr	r2, [pc, #304]	; (8002ef8 <HAL_GPIO_Init+0x2b8>)
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	6193      	str	r3, [r2, #24]
 8002dcc:	4b4a      	ldr	r3, [pc, #296]	; (8002ef8 <HAL_GPIO_Init+0x2b8>)
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002dd8:	4a48      	ldr	r2, [pc, #288]	; (8002efc <HAL_GPIO_Init+0x2bc>)
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	089b      	lsrs	r3, r3, #2
 8002dde:	3302      	adds	r3, #2
 8002de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	220f      	movs	r2, #15
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a40      	ldr	r2, [pc, #256]	; (8002f00 <HAL_GPIO_Init+0x2c0>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d013      	beq.n	8002e2c <HAL_GPIO_Init+0x1ec>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a3f      	ldr	r2, [pc, #252]	; (8002f04 <HAL_GPIO_Init+0x2c4>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d00d      	beq.n	8002e28 <HAL_GPIO_Init+0x1e8>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a3e      	ldr	r2, [pc, #248]	; (8002f08 <HAL_GPIO_Init+0x2c8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d007      	beq.n	8002e24 <HAL_GPIO_Init+0x1e4>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a3d      	ldr	r2, [pc, #244]	; (8002f0c <HAL_GPIO_Init+0x2cc>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d101      	bne.n	8002e20 <HAL_GPIO_Init+0x1e0>
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e006      	b.n	8002e2e <HAL_GPIO_Init+0x1ee>
 8002e20:	2304      	movs	r3, #4
 8002e22:	e004      	b.n	8002e2e <HAL_GPIO_Init+0x1ee>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e002      	b.n	8002e2e <HAL_GPIO_Init+0x1ee>
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <HAL_GPIO_Init+0x1ee>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e30:	f002 0203 	and.w	r2, r2, #3
 8002e34:	0092      	lsls	r2, r2, #2
 8002e36:	4093      	lsls	r3, r2
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e3e:	492f      	ldr	r1, [pc, #188]	; (8002efc <HAL_GPIO_Init+0x2bc>)
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	089b      	lsrs	r3, r3, #2
 8002e44:	3302      	adds	r3, #2
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d006      	beq.n	8002e66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e58:	4b2d      	ldr	r3, [pc, #180]	; (8002f10 <HAL_GPIO_Init+0x2d0>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	492c      	ldr	r1, [pc, #176]	; (8002f10 <HAL_GPIO_Init+0x2d0>)
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	600b      	str	r3, [r1, #0]
 8002e64:	e006      	b.n	8002e74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e66:	4b2a      	ldr	r3, [pc, #168]	; (8002f10 <HAL_GPIO_Init+0x2d0>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	4928      	ldr	r1, [pc, #160]	; (8002f10 <HAL_GPIO_Init+0x2d0>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d006      	beq.n	8002e8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e80:	4b23      	ldr	r3, [pc, #140]	; (8002f10 <HAL_GPIO_Init+0x2d0>)
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	4922      	ldr	r1, [pc, #136]	; (8002f10 <HAL_GPIO_Init+0x2d0>)
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	604b      	str	r3, [r1, #4]
 8002e8c:	e006      	b.n	8002e9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e8e:	4b20      	ldr	r3, [pc, #128]	; (8002f10 <HAL_GPIO_Init+0x2d0>)
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	43db      	mvns	r3, r3
 8002e96:	491e      	ldr	r1, [pc, #120]	; (8002f10 <HAL_GPIO_Init+0x2d0>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d006      	beq.n	8002eb6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ea8:	4b19      	ldr	r3, [pc, #100]	; (8002f10 <HAL_GPIO_Init+0x2d0>)
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	4918      	ldr	r1, [pc, #96]	; (8002f10 <HAL_GPIO_Init+0x2d0>)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	608b      	str	r3, [r1, #8]
 8002eb4:	e006      	b.n	8002ec4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002eb6:	4b16      	ldr	r3, [pc, #88]	; (8002f10 <HAL_GPIO_Init+0x2d0>)
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	4914      	ldr	r1, [pc, #80]	; (8002f10 <HAL_GPIO_Init+0x2d0>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d021      	beq.n	8002f14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ed0:	4b0f      	ldr	r3, [pc, #60]	; (8002f10 <HAL_GPIO_Init+0x2d0>)
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	490e      	ldr	r1, [pc, #56]	; (8002f10 <HAL_GPIO_Init+0x2d0>)
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60cb      	str	r3, [r1, #12]
 8002edc:	e021      	b.n	8002f22 <HAL_GPIO_Init+0x2e2>
 8002ede:	bf00      	nop
 8002ee0:	10320000 	.word	0x10320000
 8002ee4:	10310000 	.word	0x10310000
 8002ee8:	10220000 	.word	0x10220000
 8002eec:	10210000 	.word	0x10210000
 8002ef0:	10120000 	.word	0x10120000
 8002ef4:	10110000 	.word	0x10110000
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40010000 	.word	0x40010000
 8002f00:	40010800 	.word	0x40010800
 8002f04:	40010c00 	.word	0x40010c00
 8002f08:	40011000 	.word	0x40011000
 8002f0c:	40011400 	.word	0x40011400
 8002f10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f14:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_GPIO_Init+0x304>)
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	4909      	ldr	r1, [pc, #36]	; (8002f44 <HAL_GPIO_Init+0x304>)
 8002f1e:	4013      	ands	r3, r2
 8002f20:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	3301      	adds	r3, #1
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f47f ae8e 	bne.w	8002c54 <HAL_GPIO_Init+0x14>
  }
}
 8002f38:	bf00      	nop
 8002f3a:	bf00      	nop
 8002f3c:	372c      	adds	r7, #44	; 0x2c
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr
 8002f44:	40010400 	.word	0x40010400

08002f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	807b      	strh	r3, [r7, #2]
 8002f54:	4613      	mov	r3, r2
 8002f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f58:	787b      	ldrb	r3, [r7, #1]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f5e:	887a      	ldrh	r2, [r7, #2]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f64:	e003      	b.n	8002f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f66:	887b      	ldrh	r3, [r7, #2]
 8002f68:	041a      	lsls	r2, r3, #16
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	611a      	str	r2, [r3, #16]
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr

08002f78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f82:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f84:	695a      	ldr	r2, [r3, #20]
 8002f86:	88fb      	ldrh	r3, [r7, #6]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d006      	beq.n	8002f9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f8e:	4a05      	ldr	r2, [pc, #20]	; (8002fa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f90:	88fb      	ldrh	r3, [r7, #6]
 8002f92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f94:	88fb      	ldrh	r3, [r7, #6]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 f806 	bl	8002fa8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40010400 	.word	0x40010400

08002fa8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr

08002fbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e272      	b.n	80034b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 8087 	beq.w	80030ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fdc:	4b92      	ldr	r3, [pc, #584]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 030c 	and.w	r3, r3, #12
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d00c      	beq.n	8003002 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fe8:	4b8f      	ldr	r3, [pc, #572]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f003 030c 	and.w	r3, r3, #12
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d112      	bne.n	800301a <HAL_RCC_OscConfig+0x5e>
 8002ff4:	4b8c      	ldr	r3, [pc, #560]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003000:	d10b      	bne.n	800301a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003002:	4b89      	ldr	r3, [pc, #548]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d06c      	beq.n	80030e8 <HAL_RCC_OscConfig+0x12c>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d168      	bne.n	80030e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e24c      	b.n	80034b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003022:	d106      	bne.n	8003032 <HAL_RCC_OscConfig+0x76>
 8003024:	4b80      	ldr	r3, [pc, #512]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a7f      	ldr	r2, [pc, #508]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 800302a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	e02e      	b.n	8003090 <HAL_RCC_OscConfig+0xd4>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10c      	bne.n	8003054 <HAL_RCC_OscConfig+0x98>
 800303a:	4b7b      	ldr	r3, [pc, #492]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a7a      	ldr	r2, [pc, #488]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 8003040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	4b78      	ldr	r3, [pc, #480]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a77      	ldr	r2, [pc, #476]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 800304c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	e01d      	b.n	8003090 <HAL_RCC_OscConfig+0xd4>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800305c:	d10c      	bne.n	8003078 <HAL_RCC_OscConfig+0xbc>
 800305e:	4b72      	ldr	r3, [pc, #456]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a71      	ldr	r2, [pc, #452]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 8003064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	4b6f      	ldr	r3, [pc, #444]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a6e      	ldr	r2, [pc, #440]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 8003070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	e00b      	b.n	8003090 <HAL_RCC_OscConfig+0xd4>
 8003078:	4b6b      	ldr	r3, [pc, #428]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a6a      	ldr	r2, [pc, #424]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 800307e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	4b68      	ldr	r3, [pc, #416]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a67      	ldr	r2, [pc, #412]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 800308a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800308e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d013      	beq.n	80030c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003098:	f7ff fad6 	bl	8002648 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a0:	f7ff fad2 	bl	8002648 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b64      	cmp	r3, #100	; 0x64
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e200      	b.n	80034b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	4b5d      	ldr	r3, [pc, #372]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCC_OscConfig+0xe4>
 80030be:	e014      	b.n	80030ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7ff fac2 	bl	8002648 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c8:	f7ff fabe 	bl	8002648 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b64      	cmp	r3, #100	; 0x64
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e1ec      	b.n	80034b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030da:	4b53      	ldr	r3, [pc, #332]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x10c>
 80030e6:	e000      	b.n	80030ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d063      	beq.n	80031be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030f6:	4b4c      	ldr	r3, [pc, #304]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f003 030c 	and.w	r3, r3, #12
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00b      	beq.n	800311a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003102:	4b49      	ldr	r3, [pc, #292]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f003 030c 	and.w	r3, r3, #12
 800310a:	2b08      	cmp	r3, #8
 800310c:	d11c      	bne.n	8003148 <HAL_RCC_OscConfig+0x18c>
 800310e:	4b46      	ldr	r3, [pc, #280]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d116      	bne.n	8003148 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311a:	4b43      	ldr	r3, [pc, #268]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d005      	beq.n	8003132 <HAL_RCC_OscConfig+0x176>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d001      	beq.n	8003132 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e1c0      	b.n	80034b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003132:	4b3d      	ldr	r3, [pc, #244]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4939      	ldr	r1, [pc, #228]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 8003142:	4313      	orrs	r3, r2
 8003144:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003146:	e03a      	b.n	80031be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d020      	beq.n	8003192 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003150:	4b36      	ldr	r3, [pc, #216]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003152:	2201      	movs	r2, #1
 8003154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003156:	f7ff fa77 	bl	8002648 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800315e:	f7ff fa73 	bl	8002648 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e1a1      	b.n	80034b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003170:	4b2d      	ldr	r3, [pc, #180]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0f0      	beq.n	800315e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800317c:	4b2a      	ldr	r3, [pc, #168]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4927      	ldr	r1, [pc, #156]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 800318c:	4313      	orrs	r3, r2
 800318e:	600b      	str	r3, [r1, #0]
 8003190:	e015      	b.n	80031be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003192:	4b26      	ldr	r3, [pc, #152]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7ff fa56 	bl	8002648 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a0:	f7ff fa52 	bl	8002648 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e180      	b.n	80034b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b2:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f0      	bne.n	80031a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d03a      	beq.n	8003240 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d019      	beq.n	8003206 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031d2:	4b17      	ldr	r3, [pc, #92]	; (8003230 <HAL_RCC_OscConfig+0x274>)
 80031d4:	2201      	movs	r2, #1
 80031d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d8:	f7ff fa36 	bl	8002648 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031e0:	f7ff fa32 	bl	8002648 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e160      	b.n	80034b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f2:	4b0d      	ldr	r3, [pc, #52]	; (8003228 <HAL_RCC_OscConfig+0x26c>)
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0f0      	beq.n	80031e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031fe:	2001      	movs	r0, #1
 8003200:	f000 fb08 	bl	8003814 <RCC_Delay>
 8003204:	e01c      	b.n	8003240 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003206:	4b0a      	ldr	r3, [pc, #40]	; (8003230 <HAL_RCC_OscConfig+0x274>)
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320c:	f7ff fa1c 	bl	8002648 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003212:	e00f      	b.n	8003234 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003214:	f7ff fa18 	bl	8002648 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d908      	bls.n	8003234 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e146      	b.n	80034b4 <HAL_RCC_OscConfig+0x4f8>
 8003226:	bf00      	nop
 8003228:	40021000 	.word	0x40021000
 800322c:	42420000 	.word	0x42420000
 8003230:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003234:	4b92      	ldr	r3, [pc, #584]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1e9      	bne.n	8003214 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 80a6 	beq.w	800339a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800324e:	2300      	movs	r3, #0
 8003250:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003252:	4b8b      	ldr	r3, [pc, #556]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10d      	bne.n	800327a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800325e:	4b88      	ldr	r3, [pc, #544]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	4a87      	ldr	r2, [pc, #540]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 8003264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003268:	61d3      	str	r3, [r2, #28]
 800326a:	4b85      	ldr	r3, [pc, #532]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003272:	60bb      	str	r3, [r7, #8]
 8003274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003276:	2301      	movs	r3, #1
 8003278:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327a:	4b82      	ldr	r3, [pc, #520]	; (8003484 <HAL_RCC_OscConfig+0x4c8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d118      	bne.n	80032b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003286:	4b7f      	ldr	r3, [pc, #508]	; (8003484 <HAL_RCC_OscConfig+0x4c8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a7e      	ldr	r2, [pc, #504]	; (8003484 <HAL_RCC_OscConfig+0x4c8>)
 800328c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003290:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003292:	f7ff f9d9 	bl	8002648 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329a:	f7ff f9d5 	bl	8002648 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b64      	cmp	r3, #100	; 0x64
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e103      	b.n	80034b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ac:	4b75      	ldr	r3, [pc, #468]	; (8003484 <HAL_RCC_OscConfig+0x4c8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0f0      	beq.n	800329a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d106      	bne.n	80032ce <HAL_RCC_OscConfig+0x312>
 80032c0:	4b6f      	ldr	r3, [pc, #444]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	4a6e      	ldr	r2, [pc, #440]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	6213      	str	r3, [r2, #32]
 80032cc:	e02d      	b.n	800332a <HAL_RCC_OscConfig+0x36e>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10c      	bne.n	80032f0 <HAL_RCC_OscConfig+0x334>
 80032d6:	4b6a      	ldr	r3, [pc, #424]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	4a69      	ldr	r2, [pc, #420]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 80032dc:	f023 0301 	bic.w	r3, r3, #1
 80032e0:	6213      	str	r3, [r2, #32]
 80032e2:	4b67      	ldr	r3, [pc, #412]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	4a66      	ldr	r2, [pc, #408]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 80032e8:	f023 0304 	bic.w	r3, r3, #4
 80032ec:	6213      	str	r3, [r2, #32]
 80032ee:	e01c      	b.n	800332a <HAL_RCC_OscConfig+0x36e>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	2b05      	cmp	r3, #5
 80032f6:	d10c      	bne.n	8003312 <HAL_RCC_OscConfig+0x356>
 80032f8:	4b61      	ldr	r3, [pc, #388]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	4a60      	ldr	r2, [pc, #384]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 80032fe:	f043 0304 	orr.w	r3, r3, #4
 8003302:	6213      	str	r3, [r2, #32]
 8003304:	4b5e      	ldr	r3, [pc, #376]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	4a5d      	ldr	r2, [pc, #372]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	6213      	str	r3, [r2, #32]
 8003310:	e00b      	b.n	800332a <HAL_RCC_OscConfig+0x36e>
 8003312:	4b5b      	ldr	r3, [pc, #364]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	4a5a      	ldr	r2, [pc, #360]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 8003318:	f023 0301 	bic.w	r3, r3, #1
 800331c:	6213      	str	r3, [r2, #32]
 800331e:	4b58      	ldr	r3, [pc, #352]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	4a57      	ldr	r2, [pc, #348]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 8003324:	f023 0304 	bic.w	r3, r3, #4
 8003328:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d015      	beq.n	800335e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003332:	f7ff f989 	bl	8002648 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003338:	e00a      	b.n	8003350 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333a:	f7ff f985 	bl	8002648 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	f241 3288 	movw	r2, #5000	; 0x1388
 8003348:	4293      	cmp	r3, r2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e0b1      	b.n	80034b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003350:	4b4b      	ldr	r3, [pc, #300]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0ee      	beq.n	800333a <HAL_RCC_OscConfig+0x37e>
 800335c:	e014      	b.n	8003388 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335e:	f7ff f973 	bl	8002648 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003364:	e00a      	b.n	800337c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003366:	f7ff f96f 	bl	8002648 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	f241 3288 	movw	r2, #5000	; 0x1388
 8003374:	4293      	cmp	r3, r2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e09b      	b.n	80034b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800337c:	4b40      	ldr	r3, [pc, #256]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1ee      	bne.n	8003366 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003388:	7dfb      	ldrb	r3, [r7, #23]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d105      	bne.n	800339a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800338e:	4b3c      	ldr	r3, [pc, #240]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	4a3b      	ldr	r2, [pc, #236]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 8003394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003398:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 8087 	beq.w	80034b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033a4:	4b36      	ldr	r3, [pc, #216]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 030c 	and.w	r3, r3, #12
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d061      	beq.n	8003474 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d146      	bne.n	8003446 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b8:	4b33      	ldr	r3, [pc, #204]	; (8003488 <HAL_RCC_OscConfig+0x4cc>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033be:	f7ff f943 	bl	8002648 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c6:	f7ff f93f 	bl	8002648 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e06d      	b.n	80034b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033d8:	4b29      	ldr	r3, [pc, #164]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1f0      	bne.n	80033c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ec:	d108      	bne.n	8003400 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033ee:	4b24      	ldr	r3, [pc, #144]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	4921      	ldr	r1, [pc, #132]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003400:	4b1f      	ldr	r3, [pc, #124]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a19      	ldr	r1, [r3, #32]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	430b      	orrs	r3, r1
 8003412:	491b      	ldr	r1, [pc, #108]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 8003414:	4313      	orrs	r3, r2
 8003416:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003418:	4b1b      	ldr	r3, [pc, #108]	; (8003488 <HAL_RCC_OscConfig+0x4cc>)
 800341a:	2201      	movs	r2, #1
 800341c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341e:	f7ff f913 	bl	8002648 <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003426:	f7ff f90f 	bl	8002648 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e03d      	b.n	80034b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003438:	4b11      	ldr	r3, [pc, #68]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0f0      	beq.n	8003426 <HAL_RCC_OscConfig+0x46a>
 8003444:	e035      	b.n	80034b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003446:	4b10      	ldr	r3, [pc, #64]	; (8003488 <HAL_RCC_OscConfig+0x4cc>)
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344c:	f7ff f8fc 	bl	8002648 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003454:	f7ff f8f8 	bl	8002648 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e026      	b.n	80034b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003466:	4b06      	ldr	r3, [pc, #24]	; (8003480 <HAL_RCC_OscConfig+0x4c4>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f0      	bne.n	8003454 <HAL_RCC_OscConfig+0x498>
 8003472:	e01e      	b.n	80034b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d107      	bne.n	800348c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e019      	b.n	80034b4 <HAL_RCC_OscConfig+0x4f8>
 8003480:	40021000 	.word	0x40021000
 8003484:	40007000 	.word	0x40007000
 8003488:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800348c:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <HAL_RCC_OscConfig+0x500>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	429a      	cmp	r2, r3
 800349e:	d106      	bne.n	80034ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d001      	beq.n	80034b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40021000 	.word	0x40021000

080034c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0d0      	b.n	8003676 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034d4:	4b6a      	ldr	r3, [pc, #424]	; (8003680 <HAL_RCC_ClockConfig+0x1c0>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d910      	bls.n	8003504 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e2:	4b67      	ldr	r3, [pc, #412]	; (8003680 <HAL_RCC_ClockConfig+0x1c0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 0207 	bic.w	r2, r3, #7
 80034ea:	4965      	ldr	r1, [pc, #404]	; (8003680 <HAL_RCC_ClockConfig+0x1c0>)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f2:	4b63      	ldr	r3, [pc, #396]	; (8003680 <HAL_RCC_ClockConfig+0x1c0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d001      	beq.n	8003504 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e0b8      	b.n	8003676 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d020      	beq.n	8003552 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800351c:	4b59      	ldr	r3, [pc, #356]	; (8003684 <HAL_RCC_ClockConfig+0x1c4>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	4a58      	ldr	r2, [pc, #352]	; (8003684 <HAL_RCC_ClockConfig+0x1c4>)
 8003522:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003526:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	2b00      	cmp	r3, #0
 8003532:	d005      	beq.n	8003540 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003534:	4b53      	ldr	r3, [pc, #332]	; (8003684 <HAL_RCC_ClockConfig+0x1c4>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	4a52      	ldr	r2, [pc, #328]	; (8003684 <HAL_RCC_ClockConfig+0x1c4>)
 800353a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800353e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003540:	4b50      	ldr	r3, [pc, #320]	; (8003684 <HAL_RCC_ClockConfig+0x1c4>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	494d      	ldr	r1, [pc, #308]	; (8003684 <HAL_RCC_ClockConfig+0x1c4>)
 800354e:	4313      	orrs	r3, r2
 8003550:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d040      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d107      	bne.n	8003576 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003566:	4b47      	ldr	r3, [pc, #284]	; (8003684 <HAL_RCC_ClockConfig+0x1c4>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d115      	bne.n	800359e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e07f      	b.n	8003676 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d107      	bne.n	800358e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800357e:	4b41      	ldr	r3, [pc, #260]	; (8003684 <HAL_RCC_ClockConfig+0x1c4>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d109      	bne.n	800359e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e073      	b.n	8003676 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800358e:	4b3d      	ldr	r3, [pc, #244]	; (8003684 <HAL_RCC_ClockConfig+0x1c4>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e06b      	b.n	8003676 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800359e:	4b39      	ldr	r3, [pc, #228]	; (8003684 <HAL_RCC_ClockConfig+0x1c4>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f023 0203 	bic.w	r2, r3, #3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	4936      	ldr	r1, [pc, #216]	; (8003684 <HAL_RCC_ClockConfig+0x1c4>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035b0:	f7ff f84a 	bl	8002648 <HAL_GetTick>
 80035b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b6:	e00a      	b.n	80035ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b8:	f7ff f846 	bl	8002648 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e053      	b.n	8003676 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ce:	4b2d      	ldr	r3, [pc, #180]	; (8003684 <HAL_RCC_ClockConfig+0x1c4>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f003 020c 	and.w	r2, r3, #12
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	429a      	cmp	r2, r3
 80035de:	d1eb      	bne.n	80035b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035e0:	4b27      	ldr	r3, [pc, #156]	; (8003680 <HAL_RCC_ClockConfig+0x1c0>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d210      	bcs.n	8003610 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ee:	4b24      	ldr	r3, [pc, #144]	; (8003680 <HAL_RCC_ClockConfig+0x1c0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f023 0207 	bic.w	r2, r3, #7
 80035f6:	4922      	ldr	r1, [pc, #136]	; (8003680 <HAL_RCC_ClockConfig+0x1c0>)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fe:	4b20      	ldr	r3, [pc, #128]	; (8003680 <HAL_RCC_ClockConfig+0x1c0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	429a      	cmp	r2, r3
 800360a:	d001      	beq.n	8003610 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e032      	b.n	8003676 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	d008      	beq.n	800362e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800361c:	4b19      	ldr	r3, [pc, #100]	; (8003684 <HAL_RCC_ClockConfig+0x1c4>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	4916      	ldr	r1, [pc, #88]	; (8003684 <HAL_RCC_ClockConfig+0x1c4>)
 800362a:	4313      	orrs	r3, r2
 800362c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b00      	cmp	r3, #0
 8003638:	d009      	beq.n	800364e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800363a:	4b12      	ldr	r3, [pc, #72]	; (8003684 <HAL_RCC_ClockConfig+0x1c4>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	490e      	ldr	r1, [pc, #56]	; (8003684 <HAL_RCC_ClockConfig+0x1c4>)
 800364a:	4313      	orrs	r3, r2
 800364c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800364e:	f000 f821 	bl	8003694 <HAL_RCC_GetSysClockFreq>
 8003652:	4602      	mov	r2, r0
 8003654:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <HAL_RCC_ClockConfig+0x1c4>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	091b      	lsrs	r3, r3, #4
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	490a      	ldr	r1, [pc, #40]	; (8003688 <HAL_RCC_ClockConfig+0x1c8>)
 8003660:	5ccb      	ldrb	r3, [r1, r3]
 8003662:	fa22 f303 	lsr.w	r3, r2, r3
 8003666:	4a09      	ldr	r2, [pc, #36]	; (800368c <HAL_RCC_ClockConfig+0x1cc>)
 8003668:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800366a:	4b09      	ldr	r3, [pc, #36]	; (8003690 <HAL_RCC_ClockConfig+0x1d0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f7fe f822 	bl	80016b8 <HAL_InitTick>

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40022000 	.word	0x40022000
 8003684:	40021000 	.word	0x40021000
 8003688:	08008780 	.word	0x08008780
 800368c:	2000000c 	.word	0x2000000c
 8003690:	20000010 	.word	0x20000010

08003694 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003694:	b490      	push	{r4, r7}
 8003696:	b08a      	sub	sp, #40	; 0x28
 8003698:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800369a:	4b29      	ldr	r3, [pc, #164]	; (8003740 <HAL_RCC_GetSysClockFreq+0xac>)
 800369c:	1d3c      	adds	r4, r7, #4
 800369e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80036a4:	f240 2301 	movw	r3, #513	; 0x201
 80036a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	61fb      	str	r3, [r7, #28]
 80036ae:	2300      	movs	r3, #0
 80036b0:	61bb      	str	r3, [r7, #24]
 80036b2:	2300      	movs	r3, #0
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
 80036b6:	2300      	movs	r3, #0
 80036b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036be:	4b21      	ldr	r3, [pc, #132]	; (8003744 <HAL_RCC_GetSysClockFreq+0xb0>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d002      	beq.n	80036d4 <HAL_RCC_GetSysClockFreq+0x40>
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	d003      	beq.n	80036da <HAL_RCC_GetSysClockFreq+0x46>
 80036d2:	e02b      	b.n	800372c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036d4:	4b1c      	ldr	r3, [pc, #112]	; (8003748 <HAL_RCC_GetSysClockFreq+0xb4>)
 80036d6:	623b      	str	r3, [r7, #32]
      break;
 80036d8:	e02b      	b.n	8003732 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	0c9b      	lsrs	r3, r3, #18
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	3328      	adds	r3, #40	; 0x28
 80036e4:	443b      	add	r3, r7
 80036e6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80036ea:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d012      	beq.n	800371c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036f6:	4b13      	ldr	r3, [pc, #76]	; (8003744 <HAL_RCC_GetSysClockFreq+0xb0>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	0c5b      	lsrs	r3, r3, #17
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	3328      	adds	r3, #40	; 0x28
 8003702:	443b      	add	r3, r7
 8003704:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003708:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	4a0e      	ldr	r2, [pc, #56]	; (8003748 <HAL_RCC_GetSysClockFreq+0xb4>)
 800370e:	fb03 f202 	mul.w	r2, r3, r2
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	fbb2 f3f3 	udiv	r3, r2, r3
 8003718:	627b      	str	r3, [r7, #36]	; 0x24
 800371a:	e004      	b.n	8003726 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	4a0b      	ldr	r2, [pc, #44]	; (800374c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003720:	fb02 f303 	mul.w	r3, r2, r3
 8003724:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	623b      	str	r3, [r7, #32]
      break;
 800372a:	e002      	b.n	8003732 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800372c:	4b06      	ldr	r3, [pc, #24]	; (8003748 <HAL_RCC_GetSysClockFreq+0xb4>)
 800372e:	623b      	str	r3, [r7, #32]
      break;
 8003730:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003732:	6a3b      	ldr	r3, [r7, #32]
}
 8003734:	4618      	mov	r0, r3
 8003736:	3728      	adds	r7, #40	; 0x28
 8003738:	46bd      	mov	sp, r7
 800373a:	bc90      	pop	{r4, r7}
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	08008768 	.word	0x08008768
 8003744:	40021000 	.word	0x40021000
 8003748:	007a1200 	.word	0x007a1200
 800374c:	003d0900 	.word	0x003d0900

08003750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003754:	4b02      	ldr	r3, [pc, #8]	; (8003760 <HAL_RCC_GetHCLKFreq+0x10>)
 8003756:	681b      	ldr	r3, [r3, #0]
}
 8003758:	4618      	mov	r0, r3
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr
 8003760:	2000000c 	.word	0x2000000c

08003764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003768:	f7ff fff2 	bl	8003750 <HAL_RCC_GetHCLKFreq>
 800376c:	4602      	mov	r2, r0
 800376e:	4b05      	ldr	r3, [pc, #20]	; (8003784 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	0a1b      	lsrs	r3, r3, #8
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	4903      	ldr	r1, [pc, #12]	; (8003788 <HAL_RCC_GetPCLK1Freq+0x24>)
 800377a:	5ccb      	ldrb	r3, [r1, r3]
 800377c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003780:	4618      	mov	r0, r3
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40021000 	.word	0x40021000
 8003788:	08008790 	.word	0x08008790

0800378c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003790:	f7ff ffde 	bl	8003750 <HAL_RCC_GetHCLKFreq>
 8003794:	4602      	mov	r2, r0
 8003796:	4b05      	ldr	r3, [pc, #20]	; (80037ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	0adb      	lsrs	r3, r3, #11
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	4903      	ldr	r1, [pc, #12]	; (80037b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037a2:	5ccb      	ldrb	r3, [r1, r3]
 80037a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40021000 	.word	0x40021000
 80037b0:	08008790 	.word	0x08008790

080037b4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	220f      	movs	r2, #15
 80037c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037c4:	4b11      	ldr	r3, [pc, #68]	; (800380c <HAL_RCC_GetClockConfig+0x58>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 0203 	and.w	r2, r3, #3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80037d0:	4b0e      	ldr	r3, [pc, #56]	; (800380c <HAL_RCC_GetClockConfig+0x58>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80037dc:	4b0b      	ldr	r3, [pc, #44]	; (800380c <HAL_RCC_GetClockConfig+0x58>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80037e8:	4b08      	ldr	r3, [pc, #32]	; (800380c <HAL_RCC_GetClockConfig+0x58>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	08db      	lsrs	r3, r3, #3
 80037ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80037f6:	4b06      	ldr	r3, [pc, #24]	; (8003810 <HAL_RCC_GetClockConfig+0x5c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0207 	and.w	r2, r3, #7
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	bc80      	pop	{r7}
 800380a:	4770      	bx	lr
 800380c:	40021000 	.word	0x40021000
 8003810:	40022000 	.word	0x40022000

08003814 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800381c:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <RCC_Delay+0x34>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a0a      	ldr	r2, [pc, #40]	; (800384c <RCC_Delay+0x38>)
 8003822:	fba2 2303 	umull	r2, r3, r2, r3
 8003826:	0a5b      	lsrs	r3, r3, #9
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	fb02 f303 	mul.w	r3, r2, r3
 800382e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003830:	bf00      	nop
  }
  while (Delay --);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	1e5a      	subs	r2, r3, #1
 8003836:	60fa      	str	r2, [r7, #12]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1f9      	bne.n	8003830 <RCC_Delay+0x1c>
}
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr
 8003848:	2000000c 	.word	0x2000000c
 800384c:	10624dd3 	.word	0x10624dd3

08003850 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	613b      	str	r3, [r7, #16]
 800385c:	2300      	movs	r3, #0
 800385e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	d07d      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800386c:	2300      	movs	r3, #0
 800386e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003870:	4b4f      	ldr	r3, [pc, #316]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10d      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800387c:	4b4c      	ldr	r3, [pc, #304]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	4a4b      	ldr	r2, [pc, #300]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003886:	61d3      	str	r3, [r2, #28]
 8003888:	4b49      	ldr	r3, [pc, #292]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003890:	60bb      	str	r3, [r7, #8]
 8003892:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003894:	2301      	movs	r3, #1
 8003896:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003898:	4b46      	ldr	r3, [pc, #280]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d118      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038a4:	4b43      	ldr	r3, [pc, #268]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a42      	ldr	r2, [pc, #264]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038b0:	f7fe feca 	bl	8002648 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b6:	e008      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038b8:	f7fe fec6 	bl	8002648 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b64      	cmp	r3, #100	; 0x64
 80038c4:	d901      	bls.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e06d      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ca:	4b3a      	ldr	r3, [pc, #232]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038d6:	4b36      	ldr	r3, [pc, #216]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038de:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d02e      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d027      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038f4:	4b2e      	ldr	r3, [pc, #184]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038fe:	4b2e      	ldr	r3, [pc, #184]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003900:	2201      	movs	r2, #1
 8003902:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003904:	4b2c      	ldr	r3, [pc, #176]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800390a:	4a29      	ldr	r2, [pc, #164]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d014      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391a:	f7fe fe95 	bl	8002648 <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003920:	e00a      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003922:	f7fe fe91 	bl	8002648 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003930:	4293      	cmp	r3, r2
 8003932:	d901      	bls.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e036      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003938:	4b1d      	ldr	r3, [pc, #116]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0ee      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003944:	4b1a      	ldr	r3, [pc, #104]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	4917      	ldr	r1, [pc, #92]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003952:	4313      	orrs	r3, r2
 8003954:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003956:	7dfb      	ldrb	r3, [r7, #23]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d105      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800395c:	4b14      	ldr	r3, [pc, #80]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	4a13      	ldr	r2, [pc, #76]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003966:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d008      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003974:	4b0e      	ldr	r3, [pc, #56]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	490b      	ldr	r1, [pc, #44]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003982:	4313      	orrs	r3, r2
 8003984:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0310 	and.w	r3, r3, #16
 800398e:	2b00      	cmp	r3, #0
 8003990:	d008      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003992:	4b07      	ldr	r3, [pc, #28]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	4904      	ldr	r1, [pc, #16]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40021000 	.word	0x40021000
 80039b4:	40007000 	.word	0x40007000
 80039b8:	42420440 	.word	0x42420440

080039bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e076      	b.n	8003abc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d108      	bne.n	80039e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039de:	d009      	beq.n	80039f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	61da      	str	r2, [r3, #28]
 80039e6:	e005      	b.n	80039f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fd fdce 	bl	80015b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	431a      	orrs	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a64:	431a      	orrs	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a78:	ea42 0103 	orr.w	r1, r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	0c1a      	lsrs	r2, r3, #16
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f002 0204 	and.w	r2, r2, #4
 8003a9a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	69da      	ldr	r2, [r3, #28]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aaa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d101      	bne.n	8003ae6 <HAL_SPI_Transmit+0x22>
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	e126      	b.n	8003d34 <HAL_SPI_Transmit+0x270>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003aee:	f7fe fdab 	bl	8002648 <HAL_GetTick>
 8003af2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003af4:	88fb      	ldrh	r3, [r7, #6]
 8003af6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d002      	beq.n	8003b0a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b04:	2302      	movs	r3, #2
 8003b06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b08:	e10b      	b.n	8003d22 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <HAL_SPI_Transmit+0x52>
 8003b10:	88fb      	ldrh	r3, [r7, #6]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d102      	bne.n	8003b1c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b1a:	e102      	b.n	8003d22 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2203      	movs	r2, #3
 8003b20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	88fa      	ldrh	r2, [r7, #6]
 8003b34:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	88fa      	ldrh	r2, [r7, #6]
 8003b3a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b62:	d10f      	bne.n	8003b84 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b72:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b82:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8e:	2b40      	cmp	r3, #64	; 0x40
 8003b90:	d007      	beq.n	8003ba2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ba0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003baa:	d14b      	bne.n	8003c44 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <HAL_SPI_Transmit+0xf6>
 8003bb4:	8afb      	ldrh	r3, [r7, #22]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d13e      	bne.n	8003c38 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	881a      	ldrh	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	1c9a      	adds	r2, r3, #2
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003bde:	e02b      	b.n	8003c38 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d112      	bne.n	8003c14 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	881a      	ldrh	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	1c9a      	adds	r2, r3, #2
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c12:	e011      	b.n	8003c38 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c14:	f7fe fd18 	bl	8002648 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d803      	bhi.n	8003c2c <HAL_SPI_Transmit+0x168>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2a:	d102      	bne.n	8003c32 <HAL_SPI_Transmit+0x16e>
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d102      	bne.n	8003c38 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c36:	e074      	b.n	8003d22 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1ce      	bne.n	8003be0 <HAL_SPI_Transmit+0x11c>
 8003c42:	e04c      	b.n	8003cde <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <HAL_SPI_Transmit+0x18e>
 8003c4c:	8afb      	ldrh	r3, [r7, #22]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d140      	bne.n	8003cd4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	330c      	adds	r3, #12
 8003c5c:	7812      	ldrb	r2, [r2, #0]
 8003c5e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c64:	1c5a      	adds	r2, r3, #1
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c78:	e02c      	b.n	8003cd4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d113      	bne.n	8003cb0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	330c      	adds	r3, #12
 8003c92:	7812      	ldrb	r2, [r2, #0]
 8003c94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	86da      	strh	r2, [r3, #54]	; 0x36
 8003cae:	e011      	b.n	8003cd4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cb0:	f7fe fcca 	bl	8002648 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d803      	bhi.n	8003cc8 <HAL_SPI_Transmit+0x204>
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc6:	d102      	bne.n	8003cce <HAL_SPI_Transmit+0x20a>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d102      	bne.n	8003cd4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003cd2:	e026      	b.n	8003d22 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1cd      	bne.n	8003c7a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	6839      	ldr	r1, [r7, #0]
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 fbc4 	bl	8004470 <SPI_EndRxTxTransaction>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10a      	bne.n	8003d12 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	613b      	str	r3, [r7, #16]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	613b      	str	r3, [r7, #16]
 8003d10:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	77fb      	strb	r3, [r7, #31]
 8003d1e:	e000      	b.n	8003d22 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003d20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d32:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3720      	adds	r7, #32
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af02      	add	r7, sp, #8
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	603b      	str	r3, [r7, #0]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d58:	d112      	bne.n	8003d80 <HAL_SPI_Receive+0x44>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10e      	bne.n	8003d80 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2204      	movs	r2, #4
 8003d66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003d6a:	88fa      	ldrh	r2, [r7, #6]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	4613      	mov	r3, r2
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	68b9      	ldr	r1, [r7, #8]
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 f8f1 	bl	8003f5e <HAL_SPI_TransmitReceive>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	e0ea      	b.n	8003f56 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d101      	bne.n	8003d8e <HAL_SPI_Receive+0x52>
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e0e3      	b.n	8003f56 <HAL_SPI_Receive+0x21a>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d96:	f7fe fc57 	bl	8002648 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d002      	beq.n	8003dae <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003da8:	2302      	movs	r3, #2
 8003daa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003dac:	e0ca      	b.n	8003f44 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <HAL_SPI_Receive+0x7e>
 8003db4:	88fb      	ldrh	r3, [r7, #6]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d102      	bne.n	8003dc0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003dbe:	e0c1      	b.n	8003f44 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2204      	movs	r2, #4
 8003dc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	88fa      	ldrh	r2, [r7, #6]
 8003dd8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	88fa      	ldrh	r2, [r7, #6]
 8003dde:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e06:	d10f      	bne.n	8003e28 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e16:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e26:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e32:	2b40      	cmp	r3, #64	; 0x40
 8003e34:	d007      	beq.n	8003e46 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e44:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d162      	bne.n	8003f14 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003e4e:	e02e      	b.n	8003eae <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d115      	bne.n	8003e8a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f103 020c 	add.w	r2, r3, #12
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6a:	7812      	ldrb	r2, [r2, #0]
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e88:	e011      	b.n	8003eae <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e8a:	f7fe fbdd 	bl	8002648 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d803      	bhi.n	8003ea2 <HAL_SPI_Receive+0x166>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea0:	d102      	bne.n	8003ea8 <HAL_SPI_Receive+0x16c>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d102      	bne.n	8003eae <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003eac:	e04a      	b.n	8003f44 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1cb      	bne.n	8003e50 <HAL_SPI_Receive+0x114>
 8003eb8:	e031      	b.n	8003f1e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d113      	bne.n	8003ef0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed2:	b292      	uxth	r2, r2
 8003ed4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eda:	1c9a      	adds	r2, r3, #2
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003eee:	e011      	b.n	8003f14 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ef0:	f7fe fbaa 	bl	8002648 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d803      	bhi.n	8003f08 <HAL_SPI_Receive+0x1cc>
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f06:	d102      	bne.n	8003f0e <HAL_SPI_Receive+0x1d2>
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d102      	bne.n	8003f14 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003f12:	e017      	b.n	8003f44 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1cd      	bne.n	8003eba <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	6839      	ldr	r1, [r7, #0]
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 fa52 	bl	80043cc <SPI_EndRxTransaction>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2220      	movs	r2, #32
 8003f32:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d002      	beq.n	8003f42 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	75fb      	strb	r3, [r7, #23]
 8003f40:	e000      	b.n	8003f44 <HAL_SPI_Receive+0x208>
  }

error :
 8003f42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b08c      	sub	sp, #48	; 0x30
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	607a      	str	r2, [r7, #4]
 8003f6a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d101      	bne.n	8003f84 <HAL_SPI_TransmitReceive+0x26>
 8003f80:	2302      	movs	r3, #2
 8003f82:	e18a      	b.n	800429a <HAL_SPI_TransmitReceive+0x33c>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f8c:	f7fe fb5c 	bl	8002648 <HAL_GetTick>
 8003f90:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003fa2:	887b      	ldrh	r3, [r7, #2]
 8003fa4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fa6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d00f      	beq.n	8003fce <HAL_SPI_TransmitReceive+0x70>
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fb4:	d107      	bne.n	8003fc6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d103      	bne.n	8003fc6 <HAL_SPI_TransmitReceive+0x68>
 8003fbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d003      	beq.n	8003fce <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fcc:	e15b      	b.n	8004286 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d005      	beq.n	8003fe0 <HAL_SPI_TransmitReceive+0x82>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <HAL_SPI_TransmitReceive+0x82>
 8003fda:	887b      	ldrh	r3, [r7, #2]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d103      	bne.n	8003fe8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fe6:	e14e      	b.n	8004286 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d003      	beq.n	8003ffc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2205      	movs	r2, #5
 8003ff8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	887a      	ldrh	r2, [r7, #2]
 800400c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	887a      	ldrh	r2, [r7, #2]
 8004012:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	887a      	ldrh	r2, [r7, #2]
 800401e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	887a      	ldrh	r2, [r7, #2]
 8004024:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403c:	2b40      	cmp	r3, #64	; 0x40
 800403e:	d007      	beq.n	8004050 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800404e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004058:	d178      	bne.n	800414c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <HAL_SPI_TransmitReceive+0x10a>
 8004062:	8b7b      	ldrh	r3, [r7, #26]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d166      	bne.n	8004136 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	881a      	ldrh	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004078:	1c9a      	adds	r2, r3, #2
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800408c:	e053      	b.n	8004136 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b02      	cmp	r3, #2
 800409a:	d11b      	bne.n	80040d4 <HAL_SPI_TransmitReceive+0x176>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d016      	beq.n	80040d4 <HAL_SPI_TransmitReceive+0x176>
 80040a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d113      	bne.n	80040d4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b0:	881a      	ldrh	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040bc:	1c9a      	adds	r2, r3, #2
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	3b01      	subs	r3, #1
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d119      	bne.n	8004116 <HAL_SPI_TransmitReceive+0x1b8>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d014      	beq.n	8004116 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f6:	b292      	uxth	r2, r2
 80040f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fe:	1c9a      	adds	r2, r3, #2
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004108:	b29b      	uxth	r3, r3
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004112:	2301      	movs	r3, #1
 8004114:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004116:	f7fe fa97 	bl	8002648 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004122:	429a      	cmp	r2, r3
 8004124:	d807      	bhi.n	8004136 <HAL_SPI_TransmitReceive+0x1d8>
 8004126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412c:	d003      	beq.n	8004136 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004134:	e0a7      	b.n	8004286 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1a6      	bne.n	800408e <HAL_SPI_TransmitReceive+0x130>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1a1      	bne.n	800408e <HAL_SPI_TransmitReceive+0x130>
 800414a:	e07c      	b.n	8004246 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <HAL_SPI_TransmitReceive+0x1fc>
 8004154:	8b7b      	ldrh	r3, [r7, #26]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d16b      	bne.n	8004232 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	330c      	adds	r3, #12
 8004164:	7812      	ldrb	r2, [r2, #0]
 8004166:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004180:	e057      	b.n	8004232 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b02      	cmp	r3, #2
 800418e:	d11c      	bne.n	80041ca <HAL_SPI_TransmitReceive+0x26c>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004194:	b29b      	uxth	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d017      	beq.n	80041ca <HAL_SPI_TransmitReceive+0x26c>
 800419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419c:	2b01      	cmp	r3, #1
 800419e:	d114      	bne.n	80041ca <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	330c      	adds	r3, #12
 80041aa:	7812      	ldrb	r2, [r2, #0]
 80041ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b2:	1c5a      	adds	r2, r3, #1
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041bc:	b29b      	uxth	r3, r3
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d119      	bne.n	800420c <HAL_SPI_TransmitReceive+0x2ae>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d014      	beq.n	800420c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004208:	2301      	movs	r3, #1
 800420a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800420c:	f7fe fa1c 	bl	8002648 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004218:	429a      	cmp	r2, r3
 800421a:	d803      	bhi.n	8004224 <HAL_SPI_TransmitReceive+0x2c6>
 800421c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004222:	d102      	bne.n	800422a <HAL_SPI_TransmitReceive+0x2cc>
 8004224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004226:	2b00      	cmp	r3, #0
 8004228:	d103      	bne.n	8004232 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004230:	e029      	b.n	8004286 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004236:	b29b      	uxth	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1a2      	bne.n	8004182 <HAL_SPI_TransmitReceive+0x224>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d19d      	bne.n	8004182 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004248:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 f910 	bl	8004470 <SPI_EndRxTxTransaction>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d006      	beq.n	8004264 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2220      	movs	r2, #32
 8004260:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004262:	e010      	b.n	8004286 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10b      	bne.n	8004284 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	e000      	b.n	8004286 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004284:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004296:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800429a:	4618      	mov	r0, r3
 800429c:	3730      	adds	r7, #48	; 0x30
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042b0:	b2db      	uxtb	r3, r3
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bc80      	pop	{r7}
 80042ba:	4770      	bx	lr

080042bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	603b      	str	r3, [r7, #0]
 80042c8:	4613      	mov	r3, r2
 80042ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042cc:	f7fe f9bc 	bl	8002648 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d4:	1a9b      	subs	r3, r3, r2
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	4413      	add	r3, r2
 80042da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042dc:	f7fe f9b4 	bl	8002648 <HAL_GetTick>
 80042e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042e2:	4b39      	ldr	r3, [pc, #228]	; (80043c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	015b      	lsls	r3, r3, #5
 80042e8:	0d1b      	lsrs	r3, r3, #20
 80042ea:	69fa      	ldr	r2, [r7, #28]
 80042ec:	fb02 f303 	mul.w	r3, r2, r3
 80042f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042f2:	e054      	b.n	800439e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fa:	d050      	beq.n	800439e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042fc:	f7fe f9a4 	bl	8002648 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	69fa      	ldr	r2, [r7, #28]
 8004308:	429a      	cmp	r2, r3
 800430a:	d902      	bls.n	8004312 <SPI_WaitFlagStateUntilTimeout+0x56>
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d13d      	bne.n	800438e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004320:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800432a:	d111      	bne.n	8004350 <SPI_WaitFlagStateUntilTimeout+0x94>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004334:	d004      	beq.n	8004340 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800433e:	d107      	bne.n	8004350 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800434e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004358:	d10f      	bne.n	800437a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004378:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e017      	b.n	80043be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	3b01      	subs	r3, #1
 800439c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	4013      	ands	r3, r2
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	bf0c      	ite	eq
 80043ae:	2301      	moveq	r3, #1
 80043b0:	2300      	movne	r3, #0
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	461a      	mov	r2, r3
 80043b6:	79fb      	ldrb	r3, [r7, #7]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d19b      	bne.n	80042f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3720      	adds	r7, #32
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	2000000c 	.word	0x2000000c

080043cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043e0:	d111      	bne.n	8004406 <SPI_EndRxTransaction+0x3a>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ea:	d004      	beq.n	80043f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043f4:	d107      	bne.n	8004406 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004404:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800440e:	d117      	bne.n	8004440 <SPI_EndRxTransaction+0x74>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004418:	d112      	bne.n	8004440 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2200      	movs	r2, #0
 8004422:	2101      	movs	r1, #1
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f7ff ff49 	bl	80042bc <SPI_WaitFlagStateUntilTimeout>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d01a      	beq.n	8004466 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004434:	f043 0220 	orr.w	r2, r3, #32
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e013      	b.n	8004468 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2200      	movs	r2, #0
 8004448:	2180      	movs	r1, #128	; 0x80
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f7ff ff36 	bl	80042bc <SPI_WaitFlagStateUntilTimeout>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d007      	beq.n	8004466 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445a:	f043 0220 	orr.w	r2, r3, #32
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e000      	b.n	8004468 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af02      	add	r7, sp, #8
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2200      	movs	r2, #0
 8004484:	2180      	movs	r1, #128	; 0x80
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f7ff ff18 	bl	80042bc <SPI_WaitFlagStateUntilTimeout>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d007      	beq.n	80044a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004496:	f043 0220 	orr.w	r2, r3, #32
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e000      	b.n	80044a4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e041      	b.n	8004542 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d106      	bne.n	80044d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f839 	bl	800454a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2202      	movs	r2, #2
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3304      	adds	r3, #4
 80044e8:	4619      	mov	r1, r3
 80044ea:	4610      	mov	r0, r2
 80044ec:	f000 f9b4 	bl	8004858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800454a:	b480      	push	{r7}
 800454c:	b083      	sub	sp, #12
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	bc80      	pop	{r7}
 800455a:	4770      	bx	lr

0800455c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b01      	cmp	r3, #1
 800456e:	d001      	beq.n	8004574 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e03a      	b.n	80045ea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68da      	ldr	r2, [r3, #12]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0201 	orr.w	r2, r2, #1
 800458a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a18      	ldr	r2, [pc, #96]	; (80045f4 <HAL_TIM_Base_Start_IT+0x98>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d00e      	beq.n	80045b4 <HAL_TIM_Base_Start_IT+0x58>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459e:	d009      	beq.n	80045b4 <HAL_TIM_Base_Start_IT+0x58>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a14      	ldr	r2, [pc, #80]	; (80045f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d004      	beq.n	80045b4 <HAL_TIM_Base_Start_IT+0x58>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a13      	ldr	r2, [pc, #76]	; (80045fc <HAL_TIM_Base_Start_IT+0xa0>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d111      	bne.n	80045d8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2b06      	cmp	r3, #6
 80045c4:	d010      	beq.n	80045e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f042 0201 	orr.w	r2, r2, #1
 80045d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d6:	e007      	b.n	80045e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0201 	orr.w	r2, r2, #1
 80045e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bc80      	pop	{r7}
 80045f2:	4770      	bx	lr
 80045f4:	40012c00 	.word	0x40012c00
 80045f8:	40000400 	.word	0x40000400
 80045fc:	40000800 	.word	0x40000800

08004600 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b02      	cmp	r3, #2
 8004614:	d122      	bne.n	800465c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b02      	cmp	r3, #2
 8004622:	d11b      	bne.n	800465c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0202 	mvn.w	r2, #2
 800462c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	f003 0303 	and.w	r3, r3, #3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f8ed 	bl	8004822 <HAL_TIM_IC_CaptureCallback>
 8004648:	e005      	b.n	8004656 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f8e0 	bl	8004810 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f8ef 	bl	8004834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b04      	cmp	r3, #4
 8004668:	d122      	bne.n	80046b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b04      	cmp	r3, #4
 8004676:	d11b      	bne.n	80046b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f06f 0204 	mvn.w	r2, #4
 8004680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2202      	movs	r2, #2
 8004686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f8c3 	bl	8004822 <HAL_TIM_IC_CaptureCallback>
 800469c:	e005      	b.n	80046aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f8b6 	bl	8004810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f8c5 	bl	8004834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d122      	bne.n	8004704 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f003 0308 	and.w	r3, r3, #8
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d11b      	bne.n	8004704 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f06f 0208 	mvn.w	r2, #8
 80046d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2204      	movs	r2, #4
 80046da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f899 	bl	8004822 <HAL_TIM_IC_CaptureCallback>
 80046f0:	e005      	b.n	80046fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f88c 	bl	8004810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f89b 	bl	8004834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0310 	and.w	r3, r3, #16
 800470e:	2b10      	cmp	r3, #16
 8004710:	d122      	bne.n	8004758 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f003 0310 	and.w	r3, r3, #16
 800471c:	2b10      	cmp	r3, #16
 800471e:	d11b      	bne.n	8004758 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0210 	mvn.w	r2, #16
 8004728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2208      	movs	r2, #8
 800472e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f86f 	bl	8004822 <HAL_TIM_IC_CaptureCallback>
 8004744:	e005      	b.n	8004752 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f862 	bl	8004810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f871 	bl	8004834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b01      	cmp	r3, #1
 8004764:	d10e      	bne.n	8004784 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b01      	cmp	r3, #1
 8004772:	d107      	bne.n	8004784 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f06f 0201 	mvn.w	r2, #1
 800477c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7fc fec8 	bl	8001514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478e:	2b80      	cmp	r3, #128	; 0x80
 8004790:	d10e      	bne.n	80047b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800479c:	2b80      	cmp	r3, #128	; 0x80
 800479e:	d107      	bne.n	80047b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f8bf 	bl	800492e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ba:	2b40      	cmp	r3, #64	; 0x40
 80047bc:	d10e      	bne.n	80047dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c8:	2b40      	cmp	r3, #64	; 0x40
 80047ca:	d107      	bne.n	80047dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f835 	bl	8004846 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f003 0320 	and.w	r3, r3, #32
 80047e6:	2b20      	cmp	r3, #32
 80047e8:	d10e      	bne.n	8004808 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	f003 0320 	and.w	r3, r3, #32
 80047f4:	2b20      	cmp	r3, #32
 80047f6:	d107      	bne.n	8004808 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f06f 0220 	mvn.w	r2, #32
 8004800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f88a 	bl	800491c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004808:	bf00      	nop
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	bc80      	pop	{r7}
 8004820:	4770      	bx	lr

08004822 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	bc80      	pop	{r7}
 8004832:	4770      	bx	lr

08004834 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	bc80      	pop	{r7}
 8004844:	4770      	bx	lr

08004846 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	bc80      	pop	{r7}
 8004856:	4770      	bx	lr

08004858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a29      	ldr	r2, [pc, #164]	; (8004910 <TIM_Base_SetConfig+0xb8>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d00b      	beq.n	8004888 <TIM_Base_SetConfig+0x30>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004876:	d007      	beq.n	8004888 <TIM_Base_SetConfig+0x30>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a26      	ldr	r2, [pc, #152]	; (8004914 <TIM_Base_SetConfig+0xbc>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d003      	beq.n	8004888 <TIM_Base_SetConfig+0x30>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a25      	ldr	r2, [pc, #148]	; (8004918 <TIM_Base_SetConfig+0xc0>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d108      	bne.n	800489a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	4313      	orrs	r3, r2
 8004898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a1c      	ldr	r2, [pc, #112]	; (8004910 <TIM_Base_SetConfig+0xb8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d00b      	beq.n	80048ba <TIM_Base_SetConfig+0x62>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a8:	d007      	beq.n	80048ba <TIM_Base_SetConfig+0x62>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a19      	ldr	r2, [pc, #100]	; (8004914 <TIM_Base_SetConfig+0xbc>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d003      	beq.n	80048ba <TIM_Base_SetConfig+0x62>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a18      	ldr	r2, [pc, #96]	; (8004918 <TIM_Base_SetConfig+0xc0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d108      	bne.n	80048cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a07      	ldr	r2, [pc, #28]	; (8004910 <TIM_Base_SetConfig+0xb8>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d103      	bne.n	8004900 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	615a      	str	r2, [r3, #20]
}
 8004906:	bf00      	nop
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	bc80      	pop	{r7}
 800490e:	4770      	bx	lr
 8004910:	40012c00 	.word	0x40012c00
 8004914:	40000400 	.word	0x40000400
 8004918:	40000800 	.word	0x40000800

0800491c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	bc80      	pop	{r7}
 800492c:	4770      	bx	lr

0800492e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	bc80      	pop	{r7}
 800493e:	4770      	bx	lr

08004940 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e03f      	b.n	80049d2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d106      	bne.n	800496c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7fd fdd4 	bl	8002514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2224      	movs	r2, #36	; 0x24
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004982:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f905 	bl	8004b94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	691a      	ldr	r2, [r3, #16]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004998:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	695a      	ldr	r2, [r3, #20]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b08a      	sub	sp, #40	; 0x28
 80049de:	af02      	add	r7, sp, #8
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	603b      	str	r3, [r7, #0]
 80049e6:	4613      	mov	r3, r2
 80049e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b20      	cmp	r3, #32
 80049f8:	d17c      	bne.n	8004af4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d002      	beq.n	8004a06 <HAL_UART_Transmit+0x2c>
 8004a00:	88fb      	ldrh	r3, [r7, #6]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e075      	b.n	8004af6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d101      	bne.n	8004a18 <HAL_UART_Transmit+0x3e>
 8004a14:	2302      	movs	r3, #2
 8004a16:	e06e      	b.n	8004af6 <HAL_UART_Transmit+0x11c>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2221      	movs	r2, #33	; 0x21
 8004a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a2e:	f7fd fe0b 	bl	8002648 <HAL_GetTick>
 8004a32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	88fa      	ldrh	r2, [r7, #6]
 8004a38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	88fa      	ldrh	r2, [r7, #6]
 8004a3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a48:	d108      	bne.n	8004a5c <HAL_UART_Transmit+0x82>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d104      	bne.n	8004a5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a52:	2300      	movs	r3, #0
 8004a54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	61bb      	str	r3, [r7, #24]
 8004a5a:	e003      	b.n	8004a64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a60:	2300      	movs	r3, #0
 8004a62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a6c:	e02a      	b.n	8004ac4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	2200      	movs	r2, #0
 8004a76:	2180      	movs	r1, #128	; 0x80
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 f840 	bl	8004afe <UART_WaitOnFlagUntilTimeout>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e036      	b.n	8004af6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10b      	bne.n	8004aa6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	461a      	mov	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	3302      	adds	r3, #2
 8004aa2:	61bb      	str	r3, [r7, #24]
 8004aa4:	e007      	b.n	8004ab6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	781a      	ldrb	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1cf      	bne.n	8004a6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	2140      	movs	r1, #64	; 0x40
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 f810 	bl	8004afe <UART_WaitOnFlagUntilTimeout>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e006      	b.n	8004af6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004af0:	2300      	movs	r3, #0
 8004af2:	e000      	b.n	8004af6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004af4:	2302      	movs	r3, #2
  }
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3720      	adds	r7, #32
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b084      	sub	sp, #16
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	603b      	str	r3, [r7, #0]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b0e:	e02c      	b.n	8004b6a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b16:	d028      	beq.n	8004b6a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d007      	beq.n	8004b2e <UART_WaitOnFlagUntilTimeout+0x30>
 8004b1e:	f7fd fd93 	bl	8002648 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d21d      	bcs.n	8004b6a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b3c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	695a      	ldr	r2, [r3, #20]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 0201 	bic.w	r2, r2, #1
 8004b4c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e00f      	b.n	8004b8a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	4013      	ands	r3, r2
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	bf0c      	ite	eq
 8004b7a:	2301      	moveq	r3, #1
 8004b7c:	2300      	movne	r3, #0
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	461a      	mov	r2, r3
 8004b82:	79fb      	ldrb	r3, [r7, #7]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d0c3      	beq.n	8004b10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
	...

08004b94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004bce:	f023 030c 	bic.w	r3, r3, #12
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6812      	ldr	r2, [r2, #0]
 8004bd6:	68b9      	ldr	r1, [r7, #8]
 8004bd8:	430b      	orrs	r3, r1
 8004bda:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699a      	ldr	r2, [r3, #24]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a2c      	ldr	r2, [pc, #176]	; (8004ca8 <UART_SetConfig+0x114>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d103      	bne.n	8004c04 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004bfc:	f7fe fdc6 	bl	800378c <HAL_RCC_GetPCLK2Freq>
 8004c00:	60f8      	str	r0, [r7, #12]
 8004c02:	e002      	b.n	8004c0a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c04:	f7fe fdae 	bl	8003764 <HAL_RCC_GetPCLK1Freq>
 8004c08:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	009a      	lsls	r2, r3, #2
 8004c14:	441a      	add	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c20:	4a22      	ldr	r2, [pc, #136]	; (8004cac <UART_SetConfig+0x118>)
 8004c22:	fba2 2303 	umull	r2, r3, r2, r3
 8004c26:	095b      	lsrs	r3, r3, #5
 8004c28:	0119      	lsls	r1, r3, #4
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	009a      	lsls	r2, r3, #2
 8004c34:	441a      	add	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c40:	4b1a      	ldr	r3, [pc, #104]	; (8004cac <UART_SetConfig+0x118>)
 8004c42:	fba3 0302 	umull	r0, r3, r3, r2
 8004c46:	095b      	lsrs	r3, r3, #5
 8004c48:	2064      	movs	r0, #100	; 0x64
 8004c4a:	fb00 f303 	mul.w	r3, r0, r3
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	3332      	adds	r3, #50	; 0x32
 8004c54:	4a15      	ldr	r2, [pc, #84]	; (8004cac <UART_SetConfig+0x118>)
 8004c56:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5a:	095b      	lsrs	r3, r3, #5
 8004c5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c60:	4419      	add	r1, r3
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	4613      	mov	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	009a      	lsls	r2, r3, #2
 8004c6c:	441a      	add	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c78:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <UART_SetConfig+0x118>)
 8004c7a:	fba3 0302 	umull	r0, r3, r3, r2
 8004c7e:	095b      	lsrs	r3, r3, #5
 8004c80:	2064      	movs	r0, #100	; 0x64
 8004c82:	fb00 f303 	mul.w	r3, r0, r3
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	3332      	adds	r3, #50	; 0x32
 8004c8c:	4a07      	ldr	r2, [pc, #28]	; (8004cac <UART_SetConfig+0x118>)
 8004c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c92:	095b      	lsrs	r3, r3, #5
 8004c94:	f003 020f 	and.w	r2, r3, #15
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	440a      	add	r2, r1
 8004c9e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ca0:	bf00      	nop
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	40013800 	.word	0x40013800
 8004cac:	51eb851f 	.word	0x51eb851f

08004cb0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004cb4:	f000 fb7a 	bl	80053ac <vTaskStartScheduler>
  
  return osOK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b082      	sub	sp, #8
 8004cc2:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8004cc4:	201c      	movs	r0, #28
 8004cc6:	f001 f8fb 	bl	8005ec0 <pvPortMalloc>
 8004cca:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3304      	adds	r3, #4
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 f8f8 	bl	8004ed2 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8004ce8:	687b      	ldr	r3, [r7, #4]
	}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
	...

08004cf4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b090      	sub	sp, #64	; 0x40
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
 8004d00:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8004d06:	2300      	movs	r3, #0
 8004d08:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10a      	bne.n	8004d2a <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d26:	bf00      	nop
 8004d28:	e7fe      	b.n	8004d28 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00a      	beq.n	8004d4a <xEventGroupWaitBits+0x56>
	__asm volatile
 8004d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	61fb      	str	r3, [r7, #28]
}
 8004d46:	bf00      	nop
 8004d48:	e7fe      	b.n	8004d48 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10a      	bne.n	8004d66 <xEventGroupWaitBits+0x72>
	__asm volatile
 8004d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	61bb      	str	r3, [r7, #24]
}
 8004d62:	bf00      	nop
 8004d64:	e7fe      	b.n	8004d64 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d66:	f000 fe59 	bl	8005a1c <xTaskGetSchedulerState>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d102      	bne.n	8004d76 <xEventGroupWaitBits+0x82>
 8004d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <xEventGroupWaitBits+0x86>
 8004d76:	2301      	movs	r3, #1
 8004d78:	e000      	b.n	8004d7c <xEventGroupWaitBits+0x88>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10a      	bne.n	8004d96 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8004d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	617b      	str	r3, [r7, #20]
}
 8004d92:	bf00      	nop
 8004d94:	e7fe      	b.n	8004d94 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8004d96:	f000 fb69 	bl	800546c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	68b9      	ldr	r1, [r7, #8]
 8004da4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004da6:	f000 f873 	bl	8004e90 <prvTestWaitCondition>
 8004daa:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8004dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00e      	beq.n	8004dd0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8004db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8004db6:	2300      	movs	r3, #0
 8004db8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d028      	beq.n	8004e12 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	43db      	mvns	r3, r3
 8004dc8:	401a      	ands	r2, r3
 8004dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	e020      	b.n	8004e12 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8004dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d104      	bne.n	8004de0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8004dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	633b      	str	r3, [r7, #48]	; 0x30
 8004dde:	e018      	b.n	8004e12 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dec:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004dfa:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dfe:	1d18      	adds	r0, r3, #4
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e04:	4313      	orrs	r3, r2
 8004e06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e08:	4619      	mov	r1, r3
 8004e0a:	f000 fcf1 	bl	80057f0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8004e12:	f000 fb39 	bl	8005488 <xTaskResumeAll>
 8004e16:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d031      	beq.n	8004e82 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d107      	bne.n	8004e34 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8004e24:	4b19      	ldr	r3, [pc, #100]	; (8004e8c <xEventGroupWaitBits+0x198>)
 8004e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004e34:	f000 fe10 	bl	8005a58 <uxTaskResetEventItemValue>
 8004e38:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d11a      	bne.n	8004e7a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8004e44:	f000 ff7a 	bl	8005d3c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	68b9      	ldr	r1, [r7, #8]
 8004e52:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004e54:	f000 f81c 	bl	8004e90 <prvTestWaitCondition>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d009      	beq.n	8004e72 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d006      	beq.n	8004e72 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	43db      	mvns	r3, r3
 8004e6c:	401a      	ands	r2, r3
 8004e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e70:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8004e72:	2301      	movs	r3, #1
 8004e74:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8004e76:	f000 ff91 	bl	8005d9c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004e80:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8004e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3740      	adds	r7, #64	; 0x40
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	e000ed04 	.word	0xe000ed04

08004e90 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d107      	bne.n	8004eb6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	e007      	b.n	8004ec6 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d101      	bne.n	8004ec6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004ec6:	697b      	ldr	r3, [r7, #20]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	371c      	adds	r7, #28
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bc80      	pop	{r7}
 8004ed0:	4770      	bx	lr

08004ed2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f103 0208 	add.w	r2, r3, #8
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eea:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f103 0208 	add.w	r2, r3, #8
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f103 0208 	add.w	r2, r3, #8
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f06:	bf00      	nop
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bc80      	pop	{r7}
 8004f0e:	4770      	bx	lr

08004f10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bc80      	pop	{r7}
 8004f26:	4770      	bx	lr

08004f28 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	689a      	ldr	r2, [r3, #8]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	1c5a      	adds	r2, r3, #1
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	601a      	str	r2, [r3, #0]
}
 8004f64:	bf00      	nop
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bc80      	pop	{r7}
 8004f6c:	4770      	bx	lr

08004f6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b085      	sub	sp, #20
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f84:	d103      	bne.n	8004f8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	60fb      	str	r3, [r7, #12]
 8004f8c:	e00c      	b.n	8004fa8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	3308      	adds	r3, #8
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	e002      	b.n	8004f9c <vListInsert+0x2e>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d2f6      	bcs.n	8004f96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	1c5a      	adds	r2, r3, #1
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	601a      	str	r2, [r3, #0]
}
 8004fd4:	bf00      	nop
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bc80      	pop	{r7}
 8004fdc:	4770      	bx	lr

08004fde <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b085      	sub	sp, #20
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	6892      	ldr	r2, [r2, #8]
 8004ff4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6852      	ldr	r2, [r2, #4]
 8004ffe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	429a      	cmp	r2, r3
 8005008:	d103      	bne.n	8005012 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689a      	ldr	r2, [r3, #8]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	1e5a      	subs	r2, r3, #1
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	bc80      	pop	{r7}
 800502e:	4770      	bx	lr

08005030 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005030:	b580      	push	{r7, lr}
 8005032:	b08e      	sub	sp, #56	; 0x38
 8005034:	af04      	add	r7, sp, #16
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
 800503c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800503e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10a      	bne.n	800505a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005048:	f383 8811 	msr	BASEPRI, r3
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	623b      	str	r3, [r7, #32]
}
 8005056:	bf00      	nop
 8005058:	e7fe      	b.n	8005058 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800505a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10a      	bne.n	8005076 <xTaskCreateStatic+0x46>
	__asm volatile
 8005060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	61fb      	str	r3, [r7, #28]
}
 8005072:	bf00      	nop
 8005074:	e7fe      	b.n	8005074 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005076:	2354      	movs	r3, #84	; 0x54
 8005078:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	2b54      	cmp	r3, #84	; 0x54
 800507e:	d00a      	beq.n	8005096 <xTaskCreateStatic+0x66>
	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	61bb      	str	r3, [r7, #24]
}
 8005092:	bf00      	nop
 8005094:	e7fe      	b.n	8005094 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005098:	2b00      	cmp	r3, #0
 800509a:	d01e      	beq.n	80050da <xTaskCreateStatic+0xaa>
 800509c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d01b      	beq.n	80050da <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050aa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050b4:	2300      	movs	r3, #0
 80050b6:	9303      	str	r3, [sp, #12]
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	9302      	str	r3, [sp, #8]
 80050bc:	f107 0314 	add.w	r3, r7, #20
 80050c0:	9301      	str	r3, [sp, #4]
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	68b9      	ldr	r1, [r7, #8]
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 f850 	bl	8005172 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050d4:	f000 f8cc 	bl	8005270 <prvAddNewTaskToReadyList>
 80050d8:	e001      	b.n	80050de <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80050da:	2300      	movs	r3, #0
 80050dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80050de:	697b      	ldr	r3, [r7, #20]
	}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3728      	adds	r7, #40	; 0x28
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08c      	sub	sp, #48	; 0x30
 80050ec:	af04      	add	r7, sp, #16
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	603b      	str	r3, [r7, #0]
 80050f4:	4613      	mov	r3, r2
 80050f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050f8:	88fb      	ldrh	r3, [r7, #6]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4618      	mov	r0, r3
 80050fe:	f000 fedf 	bl	8005ec0 <pvPortMalloc>
 8005102:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00e      	beq.n	8005128 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800510a:	2054      	movs	r0, #84	; 0x54
 800510c:	f000 fed8 	bl	8005ec0 <pvPortMalloc>
 8005110:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	631a      	str	r2, [r3, #48]	; 0x30
 800511e:	e005      	b.n	800512c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005120:	6978      	ldr	r0, [r7, #20]
 8005122:	f000 ff91 	bl	8006048 <vPortFree>
 8005126:	e001      	b.n	800512c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005128:	2300      	movs	r3, #0
 800512a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d017      	beq.n	8005162 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800513a:	88fa      	ldrh	r2, [r7, #6]
 800513c:	2300      	movs	r3, #0
 800513e:	9303      	str	r3, [sp, #12]
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	9302      	str	r3, [sp, #8]
 8005144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005146:	9301      	str	r3, [sp, #4]
 8005148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	68b9      	ldr	r1, [r7, #8]
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 f80e 	bl	8005172 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005156:	69f8      	ldr	r0, [r7, #28]
 8005158:	f000 f88a 	bl	8005270 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800515c:	2301      	movs	r3, #1
 800515e:	61bb      	str	r3, [r7, #24]
 8005160:	e002      	b.n	8005168 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005162:	f04f 33ff 	mov.w	r3, #4294967295
 8005166:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005168:	69bb      	ldr	r3, [r7, #24]
	}
 800516a:	4618      	mov	r0, r3
 800516c:	3720      	adds	r7, #32
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b088      	sub	sp, #32
 8005176:	af00      	add	r7, sp, #0
 8005178:	60f8      	str	r0, [r7, #12]
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	607a      	str	r2, [r7, #4]
 800517e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005182:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800518a:	3b01      	subs	r3, #1
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4413      	add	r3, r2
 8005190:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	f023 0307 	bic.w	r3, r3, #7
 8005198:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00a      	beq.n	80051ba <prvInitialiseNewTask+0x48>
	__asm volatile
 80051a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	617b      	str	r3, [r7, #20]
}
 80051b6:	bf00      	nop
 80051b8:	e7fe      	b.n	80051b8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051ba:	2300      	movs	r3, #0
 80051bc:	61fb      	str	r3, [r7, #28]
 80051be:	e012      	b.n	80051e6 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	4413      	add	r3, r2
 80051c6:	7819      	ldrb	r1, [r3, #0]
 80051c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	4413      	add	r3, r2
 80051ce:	3334      	adds	r3, #52	; 0x34
 80051d0:	460a      	mov	r2, r1
 80051d2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	4413      	add	r3, r2
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d006      	beq.n	80051ee <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	3301      	adds	r3, #1
 80051e4:	61fb      	str	r3, [r7, #28]
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	2b0f      	cmp	r3, #15
 80051ea:	d9e9      	bls.n	80051c0 <prvInitialiseNewTask+0x4e>
 80051ec:	e000      	b.n	80051f0 <prvInitialiseNewTask+0x7e>
		{
			break;
 80051ee:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fa:	2b06      	cmp	r3, #6
 80051fc:	d901      	bls.n	8005202 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051fe:	2306      	movs	r3, #6
 8005200:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005206:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800520c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800520e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005210:	2200      	movs	r2, #0
 8005212:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005216:	3304      	adds	r3, #4
 8005218:	4618      	mov	r0, r3
 800521a:	f7ff fe79 	bl	8004f10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800521e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005220:	3318      	adds	r3, #24
 8005222:	4618      	mov	r0, r3
 8005224:	f7ff fe74 	bl	8004f10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800522c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800522e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005230:	f1c3 0207 	rsb	r2, r3, #7
 8005234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005236:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800523c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800523e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005240:	2200      	movs	r2, #0
 8005242:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	68f9      	ldr	r1, [r7, #12]
 8005250:	69b8      	ldr	r0, [r7, #24]
 8005252:	f000 fc7f 	bl	8005b54 <pxPortInitialiseStack>
 8005256:	4602      	mov	r2, r0
 8005258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800525c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005266:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005268:	bf00      	nop
 800526a:	3720      	adds	r7, #32
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005278:	f000 fd60 	bl	8005d3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800527c:	4b2a      	ldr	r3, [pc, #168]	; (8005328 <prvAddNewTaskToReadyList+0xb8>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3301      	adds	r3, #1
 8005282:	4a29      	ldr	r2, [pc, #164]	; (8005328 <prvAddNewTaskToReadyList+0xb8>)
 8005284:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005286:	4b29      	ldr	r3, [pc, #164]	; (800532c <prvAddNewTaskToReadyList+0xbc>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d109      	bne.n	80052a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800528e:	4a27      	ldr	r2, [pc, #156]	; (800532c <prvAddNewTaskToReadyList+0xbc>)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005294:	4b24      	ldr	r3, [pc, #144]	; (8005328 <prvAddNewTaskToReadyList+0xb8>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d110      	bne.n	80052be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800529c:	f000 fafc 	bl	8005898 <prvInitialiseTaskLists>
 80052a0:	e00d      	b.n	80052be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052a2:	4b23      	ldr	r3, [pc, #140]	; (8005330 <prvAddNewTaskToReadyList+0xc0>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d109      	bne.n	80052be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052aa:	4b20      	ldr	r3, [pc, #128]	; (800532c <prvAddNewTaskToReadyList+0xbc>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d802      	bhi.n	80052be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052b8:	4a1c      	ldr	r2, [pc, #112]	; (800532c <prvAddNewTaskToReadyList+0xbc>)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052be:	4b1d      	ldr	r3, [pc, #116]	; (8005334 <prvAddNewTaskToReadyList+0xc4>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3301      	adds	r3, #1
 80052c4:	4a1b      	ldr	r2, [pc, #108]	; (8005334 <prvAddNewTaskToReadyList+0xc4>)
 80052c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052cc:	2201      	movs	r2, #1
 80052ce:	409a      	lsls	r2, r3
 80052d0:	4b19      	ldr	r3, [pc, #100]	; (8005338 <prvAddNewTaskToReadyList+0xc8>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	4a18      	ldr	r2, [pc, #96]	; (8005338 <prvAddNewTaskToReadyList+0xc8>)
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4a15      	ldr	r2, [pc, #84]	; (800533c <prvAddNewTaskToReadyList+0xcc>)
 80052e8:	441a      	add	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	3304      	adds	r3, #4
 80052ee:	4619      	mov	r1, r3
 80052f0:	4610      	mov	r0, r2
 80052f2:	f7ff fe19 	bl	8004f28 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80052f6:	f000 fd51 	bl	8005d9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80052fa:	4b0d      	ldr	r3, [pc, #52]	; (8005330 <prvAddNewTaskToReadyList+0xc0>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00e      	beq.n	8005320 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005302:	4b0a      	ldr	r3, [pc, #40]	; (800532c <prvAddNewTaskToReadyList+0xbc>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	429a      	cmp	r2, r3
 800530e:	d207      	bcs.n	8005320 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005310:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <prvAddNewTaskToReadyList+0xd0>)
 8005312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005320:	bf00      	nop
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	20000514 	.word	0x20000514
 800532c:	20000414 	.word	0x20000414
 8005330:	20000520 	.word	0x20000520
 8005334:	20000530 	.word	0x20000530
 8005338:	2000051c 	.word	0x2000051c
 800533c:	20000418 	.word	0x20000418
 8005340:	e000ed04 	.word	0xe000ed04

08005344 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800534c:	2300      	movs	r3, #0
 800534e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d017      	beq.n	8005386 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005356:	4b13      	ldr	r3, [pc, #76]	; (80053a4 <vTaskDelay+0x60>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <vTaskDelay+0x30>
	__asm volatile
 800535e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005362:	f383 8811 	msr	BASEPRI, r3
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	60bb      	str	r3, [r7, #8]
}
 8005370:	bf00      	nop
 8005372:	e7fe      	b.n	8005372 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005374:	f000 f87a 	bl	800546c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005378:	2100      	movs	r1, #0
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 fb84 	bl	8005a88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005380:	f000 f882 	bl	8005488 <xTaskResumeAll>
 8005384:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d107      	bne.n	800539c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800538c:	4b06      	ldr	r3, [pc, #24]	; (80053a8 <vTaskDelay+0x64>)
 800538e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800539c:	bf00      	nop
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	2000053c 	.word	0x2000053c
 80053a8:	e000ed04 	.word	0xe000ed04

080053ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b08a      	sub	sp, #40	; 0x28
 80053b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80053b2:	2300      	movs	r3, #0
 80053b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80053b6:	2300      	movs	r3, #0
 80053b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80053ba:	463a      	mov	r2, r7
 80053bc:	1d39      	adds	r1, r7, #4
 80053be:	f107 0308 	add.w	r3, r7, #8
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fb ff6c 	bl	80012a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80053c8:	6839      	ldr	r1, [r7, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	9202      	str	r2, [sp, #8]
 80053d0:	9301      	str	r3, [sp, #4]
 80053d2:	2300      	movs	r3, #0
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	2300      	movs	r3, #0
 80053d8:	460a      	mov	r2, r1
 80053da:	491e      	ldr	r1, [pc, #120]	; (8005454 <vTaskStartScheduler+0xa8>)
 80053dc:	481e      	ldr	r0, [pc, #120]	; (8005458 <vTaskStartScheduler+0xac>)
 80053de:	f7ff fe27 	bl	8005030 <xTaskCreateStatic>
 80053e2:	4603      	mov	r3, r0
 80053e4:	4a1d      	ldr	r2, [pc, #116]	; (800545c <vTaskStartScheduler+0xb0>)
 80053e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80053e8:	4b1c      	ldr	r3, [pc, #112]	; (800545c <vTaskStartScheduler+0xb0>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d002      	beq.n	80053f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80053f0:	2301      	movs	r3, #1
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	e001      	b.n	80053fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80053f6:	2300      	movs	r3, #0
 80053f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d116      	bne.n	800542e <vTaskStartScheduler+0x82>
	__asm volatile
 8005400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005404:	f383 8811 	msr	BASEPRI, r3
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	613b      	str	r3, [r7, #16]
}
 8005412:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005414:	4b12      	ldr	r3, [pc, #72]	; (8005460 <vTaskStartScheduler+0xb4>)
 8005416:	f04f 32ff 	mov.w	r2, #4294967295
 800541a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800541c:	4b11      	ldr	r3, [pc, #68]	; (8005464 <vTaskStartScheduler+0xb8>)
 800541e:	2201      	movs	r2, #1
 8005420:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005422:	4b11      	ldr	r3, [pc, #68]	; (8005468 <vTaskStartScheduler+0xbc>)
 8005424:	2200      	movs	r2, #0
 8005426:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005428:	f000 fc16 	bl	8005c58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800542c:	e00e      	b.n	800544c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005434:	d10a      	bne.n	800544c <vTaskStartScheduler+0xa0>
	__asm volatile
 8005436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543a:	f383 8811 	msr	BASEPRI, r3
 800543e:	f3bf 8f6f 	isb	sy
 8005442:	f3bf 8f4f 	dsb	sy
 8005446:	60fb      	str	r3, [r7, #12]
}
 8005448:	bf00      	nop
 800544a:	e7fe      	b.n	800544a <vTaskStartScheduler+0x9e>
}
 800544c:	bf00      	nop
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	08008778 	.word	0x08008778
 8005458:	08005869 	.word	0x08005869
 800545c:	20000538 	.word	0x20000538
 8005460:	20000534 	.word	0x20000534
 8005464:	20000520 	.word	0x20000520
 8005468:	20000518 	.word	0x20000518

0800546c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005470:	4b04      	ldr	r3, [pc, #16]	; (8005484 <vTaskSuspendAll+0x18>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	3301      	adds	r3, #1
 8005476:	4a03      	ldr	r2, [pc, #12]	; (8005484 <vTaskSuspendAll+0x18>)
 8005478:	6013      	str	r3, [r2, #0]
}
 800547a:	bf00      	nop
 800547c:	46bd      	mov	sp, r7
 800547e:	bc80      	pop	{r7}
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	2000053c 	.word	0x2000053c

08005488 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800548e:	2300      	movs	r3, #0
 8005490:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005492:	2300      	movs	r3, #0
 8005494:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005496:	4b41      	ldr	r3, [pc, #260]	; (800559c <xTaskResumeAll+0x114>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10a      	bne.n	80054b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	603b      	str	r3, [r7, #0]
}
 80054b0:	bf00      	nop
 80054b2:	e7fe      	b.n	80054b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80054b4:	f000 fc42 	bl	8005d3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80054b8:	4b38      	ldr	r3, [pc, #224]	; (800559c <xTaskResumeAll+0x114>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3b01      	subs	r3, #1
 80054be:	4a37      	ldr	r2, [pc, #220]	; (800559c <xTaskResumeAll+0x114>)
 80054c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054c2:	4b36      	ldr	r3, [pc, #216]	; (800559c <xTaskResumeAll+0x114>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d161      	bne.n	800558e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054ca:	4b35      	ldr	r3, [pc, #212]	; (80055a0 <xTaskResumeAll+0x118>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d05d      	beq.n	800558e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054d2:	e02e      	b.n	8005532 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80054d4:	4b33      	ldr	r3, [pc, #204]	; (80055a4 <xTaskResumeAll+0x11c>)
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	3318      	adds	r3, #24
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff fd7c 	bl	8004fde <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	3304      	adds	r3, #4
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff fd77 	bl	8004fde <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f4:	2201      	movs	r2, #1
 80054f6:	409a      	lsls	r2, r3
 80054f8:	4b2b      	ldr	r3, [pc, #172]	; (80055a8 <xTaskResumeAll+0x120>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	4a2a      	ldr	r2, [pc, #168]	; (80055a8 <xTaskResumeAll+0x120>)
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005506:	4613      	mov	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4a27      	ldr	r2, [pc, #156]	; (80055ac <xTaskResumeAll+0x124>)
 8005510:	441a      	add	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	3304      	adds	r3, #4
 8005516:	4619      	mov	r1, r3
 8005518:	4610      	mov	r0, r2
 800551a:	f7ff fd05 	bl	8004f28 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005522:	4b23      	ldr	r3, [pc, #140]	; (80055b0 <xTaskResumeAll+0x128>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005528:	429a      	cmp	r2, r3
 800552a:	d302      	bcc.n	8005532 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800552c:	4b21      	ldr	r3, [pc, #132]	; (80055b4 <xTaskResumeAll+0x12c>)
 800552e:	2201      	movs	r2, #1
 8005530:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005532:	4b1c      	ldr	r3, [pc, #112]	; (80055a4 <xTaskResumeAll+0x11c>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1cc      	bne.n	80054d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005540:	f000 fa48 	bl	80059d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005544:	4b1c      	ldr	r3, [pc, #112]	; (80055b8 <xTaskResumeAll+0x130>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d010      	beq.n	8005572 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005550:	f000 f836 	bl	80055c0 <xTaskIncrementTick>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800555a:	4b16      	ldr	r3, [pc, #88]	; (80055b4 <xTaskResumeAll+0x12c>)
 800555c:	2201      	movs	r2, #1
 800555e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	3b01      	subs	r3, #1
 8005564:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1f1      	bne.n	8005550 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800556c:	4b12      	ldr	r3, [pc, #72]	; (80055b8 <xTaskResumeAll+0x130>)
 800556e:	2200      	movs	r2, #0
 8005570:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005572:	4b10      	ldr	r3, [pc, #64]	; (80055b4 <xTaskResumeAll+0x12c>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d009      	beq.n	800558e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800557a:	2301      	movs	r3, #1
 800557c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800557e:	4b0f      	ldr	r3, [pc, #60]	; (80055bc <xTaskResumeAll+0x134>)
 8005580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800558e:	f000 fc05 	bl	8005d9c <vPortExitCritical>

	return xAlreadyYielded;
 8005592:	68bb      	ldr	r3, [r7, #8]
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	2000053c 	.word	0x2000053c
 80055a0:	20000514 	.word	0x20000514
 80055a4:	200004d4 	.word	0x200004d4
 80055a8:	2000051c 	.word	0x2000051c
 80055ac:	20000418 	.word	0x20000418
 80055b0:	20000414 	.word	0x20000414
 80055b4:	20000528 	.word	0x20000528
 80055b8:	20000524 	.word	0x20000524
 80055bc:	e000ed04 	.word	0xe000ed04

080055c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80055c6:	2300      	movs	r3, #0
 80055c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055ca:	4b51      	ldr	r3, [pc, #324]	; (8005710 <xTaskIncrementTick+0x150>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f040 808d 	bne.w	80056ee <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80055d4:	4b4f      	ldr	r3, [pc, #316]	; (8005714 <xTaskIncrementTick+0x154>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3301      	adds	r3, #1
 80055da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80055dc:	4a4d      	ldr	r2, [pc, #308]	; (8005714 <xTaskIncrementTick+0x154>)
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d120      	bne.n	800562a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80055e8:	4b4b      	ldr	r3, [pc, #300]	; (8005718 <xTaskIncrementTick+0x158>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00a      	beq.n	8005608 <xTaskIncrementTick+0x48>
	__asm volatile
 80055f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f6:	f383 8811 	msr	BASEPRI, r3
 80055fa:	f3bf 8f6f 	isb	sy
 80055fe:	f3bf 8f4f 	dsb	sy
 8005602:	603b      	str	r3, [r7, #0]
}
 8005604:	bf00      	nop
 8005606:	e7fe      	b.n	8005606 <xTaskIncrementTick+0x46>
 8005608:	4b43      	ldr	r3, [pc, #268]	; (8005718 <xTaskIncrementTick+0x158>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	4b43      	ldr	r3, [pc, #268]	; (800571c <xTaskIncrementTick+0x15c>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a41      	ldr	r2, [pc, #260]	; (8005718 <xTaskIncrementTick+0x158>)
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	4a41      	ldr	r2, [pc, #260]	; (800571c <xTaskIncrementTick+0x15c>)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6013      	str	r3, [r2, #0]
 800561c:	4b40      	ldr	r3, [pc, #256]	; (8005720 <xTaskIncrementTick+0x160>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3301      	adds	r3, #1
 8005622:	4a3f      	ldr	r2, [pc, #252]	; (8005720 <xTaskIncrementTick+0x160>)
 8005624:	6013      	str	r3, [r2, #0]
 8005626:	f000 f9d5 	bl	80059d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800562a:	4b3e      	ldr	r3, [pc, #248]	; (8005724 <xTaskIncrementTick+0x164>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	429a      	cmp	r2, r3
 8005632:	d34d      	bcc.n	80056d0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005634:	4b38      	ldr	r3, [pc, #224]	; (8005718 <xTaskIncrementTick+0x158>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <xTaskIncrementTick+0x82>
 800563e:	2301      	movs	r3, #1
 8005640:	e000      	b.n	8005644 <xTaskIncrementTick+0x84>
 8005642:	2300      	movs	r3, #0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d004      	beq.n	8005652 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005648:	4b36      	ldr	r3, [pc, #216]	; (8005724 <xTaskIncrementTick+0x164>)
 800564a:	f04f 32ff 	mov.w	r2, #4294967295
 800564e:	601a      	str	r2, [r3, #0]
					break;
 8005650:	e03e      	b.n	80056d0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005652:	4b31      	ldr	r3, [pc, #196]	; (8005718 <xTaskIncrementTick+0x158>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	429a      	cmp	r2, r3
 8005668:	d203      	bcs.n	8005672 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800566a:	4a2e      	ldr	r2, [pc, #184]	; (8005724 <xTaskIncrementTick+0x164>)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6013      	str	r3, [r2, #0]
						break;
 8005670:	e02e      	b.n	80056d0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	3304      	adds	r3, #4
 8005676:	4618      	mov	r0, r3
 8005678:	f7ff fcb1 	bl	8004fde <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005680:	2b00      	cmp	r3, #0
 8005682:	d004      	beq.n	800568e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	3318      	adds	r3, #24
 8005688:	4618      	mov	r0, r3
 800568a:	f7ff fca8 	bl	8004fde <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005692:	2201      	movs	r2, #1
 8005694:	409a      	lsls	r2, r3
 8005696:	4b24      	ldr	r3, [pc, #144]	; (8005728 <xTaskIncrementTick+0x168>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4313      	orrs	r3, r2
 800569c:	4a22      	ldr	r2, [pc, #136]	; (8005728 <xTaskIncrementTick+0x168>)
 800569e:	6013      	str	r3, [r2, #0]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a4:	4613      	mov	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4a1f      	ldr	r2, [pc, #124]	; (800572c <xTaskIncrementTick+0x16c>)
 80056ae:	441a      	add	r2, r3
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	3304      	adds	r3, #4
 80056b4:	4619      	mov	r1, r3
 80056b6:	4610      	mov	r0, r2
 80056b8:	f7ff fc36 	bl	8004f28 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c0:	4b1b      	ldr	r3, [pc, #108]	; (8005730 <xTaskIncrementTick+0x170>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d3b4      	bcc.n	8005634 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80056ca:	2301      	movs	r3, #1
 80056cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056ce:	e7b1      	b.n	8005634 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80056d0:	4b17      	ldr	r3, [pc, #92]	; (8005730 <xTaskIncrementTick+0x170>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d6:	4915      	ldr	r1, [pc, #84]	; (800572c <xTaskIncrementTick+0x16c>)
 80056d8:	4613      	mov	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	440b      	add	r3, r1
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d907      	bls.n	80056f8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80056e8:	2301      	movs	r3, #1
 80056ea:	617b      	str	r3, [r7, #20]
 80056ec:	e004      	b.n	80056f8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80056ee:	4b11      	ldr	r3, [pc, #68]	; (8005734 <xTaskIncrementTick+0x174>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	3301      	adds	r3, #1
 80056f4:	4a0f      	ldr	r2, [pc, #60]	; (8005734 <xTaskIncrementTick+0x174>)
 80056f6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80056f8:	4b0f      	ldr	r3, [pc, #60]	; (8005738 <xTaskIncrementTick+0x178>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005700:	2301      	movs	r3, #1
 8005702:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005704:	697b      	ldr	r3, [r7, #20]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3718      	adds	r7, #24
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	2000053c 	.word	0x2000053c
 8005714:	20000518 	.word	0x20000518
 8005718:	200004cc 	.word	0x200004cc
 800571c:	200004d0 	.word	0x200004d0
 8005720:	2000052c 	.word	0x2000052c
 8005724:	20000534 	.word	0x20000534
 8005728:	2000051c 	.word	0x2000051c
 800572c:	20000418 	.word	0x20000418
 8005730:	20000414 	.word	0x20000414
 8005734:	20000524 	.word	0x20000524
 8005738:	20000528 	.word	0x20000528

0800573c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800573c:	b480      	push	{r7}
 800573e:	b087      	sub	sp, #28
 8005740:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005742:	4b26      	ldr	r3, [pc, #152]	; (80057dc <vTaskSwitchContext+0xa0>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800574a:	4b25      	ldr	r3, [pc, #148]	; (80057e0 <vTaskSwitchContext+0xa4>)
 800574c:	2201      	movs	r2, #1
 800574e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005750:	e03f      	b.n	80057d2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005752:	4b23      	ldr	r3, [pc, #140]	; (80057e0 <vTaskSwitchContext+0xa4>)
 8005754:	2200      	movs	r2, #0
 8005756:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005758:	4b22      	ldr	r3, [pc, #136]	; (80057e4 <vTaskSwitchContext+0xa8>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	fab3 f383 	clz	r3, r3
 8005764:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005766:	7afb      	ldrb	r3, [r7, #11]
 8005768:	f1c3 031f 	rsb	r3, r3, #31
 800576c:	617b      	str	r3, [r7, #20]
 800576e:	491e      	ldr	r1, [pc, #120]	; (80057e8 <vTaskSwitchContext+0xac>)
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	4613      	mov	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	440b      	add	r3, r1
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10a      	bne.n	8005798 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005786:	f383 8811 	msr	BASEPRI, r3
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	607b      	str	r3, [r7, #4]
}
 8005794:	bf00      	nop
 8005796:	e7fe      	b.n	8005796 <vTaskSwitchContext+0x5a>
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	4613      	mov	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4a11      	ldr	r2, [pc, #68]	; (80057e8 <vTaskSwitchContext+0xac>)
 80057a4:	4413      	add	r3, r2
 80057a6:	613b      	str	r3, [r7, #16]
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	605a      	str	r2, [r3, #4]
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	3308      	adds	r3, #8
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d104      	bne.n	80057c8 <vTaskSwitchContext+0x8c>
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	605a      	str	r2, [r3, #4]
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	4a07      	ldr	r2, [pc, #28]	; (80057ec <vTaskSwitchContext+0xb0>)
 80057d0:	6013      	str	r3, [r2, #0]
}
 80057d2:	bf00      	nop
 80057d4:	371c      	adds	r7, #28
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bc80      	pop	{r7}
 80057da:	4770      	bx	lr
 80057dc:	2000053c 	.word	0x2000053c
 80057e0:	20000528 	.word	0x20000528
 80057e4:	2000051c 	.word	0x2000051c
 80057e8:	20000418 	.word	0x20000418
 80057ec:	20000414 	.word	0x20000414

080057f0 <vTaskPlaceOnUnorderedEventList>:
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10a      	bne.n	8005818 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8005802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005806:	f383 8811 	msr	BASEPRI, r3
 800580a:	f3bf 8f6f 	isb	sy
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	617b      	str	r3, [r7, #20]
}
 8005814:	bf00      	nop
 8005816:	e7fe      	b.n	8005816 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8005818:	4b11      	ldr	r3, [pc, #68]	; (8005860 <vTaskPlaceOnUnorderedEventList+0x70>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10a      	bne.n	8005836 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	613b      	str	r3, [r7, #16]
}
 8005832:	bf00      	nop
 8005834:	e7fe      	b.n	8005834 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005836:	4b0b      	ldr	r3, [pc, #44]	; (8005864 <vTaskPlaceOnUnorderedEventList+0x74>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005840:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005842:	4b08      	ldr	r3, [pc, #32]	; (8005864 <vTaskPlaceOnUnorderedEventList+0x74>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3318      	adds	r3, #24
 8005848:	4619      	mov	r1, r3
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f7ff fb6c 	bl	8004f28 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005850:	2101      	movs	r1, #1
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f918 	bl	8005a88 <prvAddCurrentTaskToDelayedList>
}
 8005858:	bf00      	nop
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	2000053c 	.word	0x2000053c
 8005864:	20000414 	.word	0x20000414

08005868 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005870:	f000 f852 	bl	8005918 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005874:	4b06      	ldr	r3, [pc, #24]	; (8005890 <prvIdleTask+0x28>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d9f9      	bls.n	8005870 <prvIdleTask+0x8>
			{
				taskYIELD();
 800587c:	4b05      	ldr	r3, [pc, #20]	; (8005894 <prvIdleTask+0x2c>)
 800587e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800588c:	e7f0      	b.n	8005870 <prvIdleTask+0x8>
 800588e:	bf00      	nop
 8005890:	20000418 	.word	0x20000418
 8005894:	e000ed04 	.word	0xe000ed04

08005898 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800589e:	2300      	movs	r3, #0
 80058a0:	607b      	str	r3, [r7, #4]
 80058a2:	e00c      	b.n	80058be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	4613      	mov	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4a12      	ldr	r2, [pc, #72]	; (80058f8 <prvInitialiseTaskLists+0x60>)
 80058b0:	4413      	add	r3, r2
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7ff fb0d 	bl	8004ed2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3301      	adds	r3, #1
 80058bc:	607b      	str	r3, [r7, #4]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b06      	cmp	r3, #6
 80058c2:	d9ef      	bls.n	80058a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80058c4:	480d      	ldr	r0, [pc, #52]	; (80058fc <prvInitialiseTaskLists+0x64>)
 80058c6:	f7ff fb04 	bl	8004ed2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80058ca:	480d      	ldr	r0, [pc, #52]	; (8005900 <prvInitialiseTaskLists+0x68>)
 80058cc:	f7ff fb01 	bl	8004ed2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80058d0:	480c      	ldr	r0, [pc, #48]	; (8005904 <prvInitialiseTaskLists+0x6c>)
 80058d2:	f7ff fafe 	bl	8004ed2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80058d6:	480c      	ldr	r0, [pc, #48]	; (8005908 <prvInitialiseTaskLists+0x70>)
 80058d8:	f7ff fafb 	bl	8004ed2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80058dc:	480b      	ldr	r0, [pc, #44]	; (800590c <prvInitialiseTaskLists+0x74>)
 80058de:	f7ff faf8 	bl	8004ed2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80058e2:	4b0b      	ldr	r3, [pc, #44]	; (8005910 <prvInitialiseTaskLists+0x78>)
 80058e4:	4a05      	ldr	r2, [pc, #20]	; (80058fc <prvInitialiseTaskLists+0x64>)
 80058e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80058e8:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <prvInitialiseTaskLists+0x7c>)
 80058ea:	4a05      	ldr	r2, [pc, #20]	; (8005900 <prvInitialiseTaskLists+0x68>)
 80058ec:	601a      	str	r2, [r3, #0]
}
 80058ee:	bf00      	nop
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	20000418 	.word	0x20000418
 80058fc:	200004a4 	.word	0x200004a4
 8005900:	200004b8 	.word	0x200004b8
 8005904:	200004d4 	.word	0x200004d4
 8005908:	200004e8 	.word	0x200004e8
 800590c:	20000500 	.word	0x20000500
 8005910:	200004cc 	.word	0x200004cc
 8005914:	200004d0 	.word	0x200004d0

08005918 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800591e:	e019      	b.n	8005954 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005920:	f000 fa0c 	bl	8005d3c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005924:	4b10      	ldr	r3, [pc, #64]	; (8005968 <prvCheckTasksWaitingTermination+0x50>)
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	3304      	adds	r3, #4
 8005930:	4618      	mov	r0, r3
 8005932:	f7ff fb54 	bl	8004fde <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005936:	4b0d      	ldr	r3, [pc, #52]	; (800596c <prvCheckTasksWaitingTermination+0x54>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	3b01      	subs	r3, #1
 800593c:	4a0b      	ldr	r2, [pc, #44]	; (800596c <prvCheckTasksWaitingTermination+0x54>)
 800593e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005940:	4b0b      	ldr	r3, [pc, #44]	; (8005970 <prvCheckTasksWaitingTermination+0x58>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3b01      	subs	r3, #1
 8005946:	4a0a      	ldr	r2, [pc, #40]	; (8005970 <prvCheckTasksWaitingTermination+0x58>)
 8005948:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800594a:	f000 fa27 	bl	8005d9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f810 	bl	8005974 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005954:	4b06      	ldr	r3, [pc, #24]	; (8005970 <prvCheckTasksWaitingTermination+0x58>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1e1      	bne.n	8005920 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800595c:	bf00      	nop
 800595e:	bf00      	nop
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	200004e8 	.word	0x200004e8
 800596c:	20000514 	.word	0x20000514
 8005970:	200004fc 	.word	0x200004fc

08005974 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005982:	2b00      	cmp	r3, #0
 8005984:	d108      	bne.n	8005998 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598a:	4618      	mov	r0, r3
 800598c:	f000 fb5c 	bl	8006048 <vPortFree>
				vPortFree( pxTCB );
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 fb59 	bl	8006048 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005996:	e018      	b.n	80059ca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d103      	bne.n	80059aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fb50 	bl	8006048 <vPortFree>
	}
 80059a8:	e00f      	b.n	80059ca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d00a      	beq.n	80059ca <prvDeleteTCB+0x56>
	__asm volatile
 80059b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b8:	f383 8811 	msr	BASEPRI, r3
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f3bf 8f4f 	dsb	sy
 80059c4:	60fb      	str	r3, [r7, #12]
}
 80059c6:	bf00      	nop
 80059c8:	e7fe      	b.n	80059c8 <prvDeleteTCB+0x54>
	}
 80059ca:	bf00      	nop
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
	...

080059d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059da:	4b0e      	ldr	r3, [pc, #56]	; (8005a14 <prvResetNextTaskUnblockTime+0x40>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d101      	bne.n	80059e8 <prvResetNextTaskUnblockTime+0x14>
 80059e4:	2301      	movs	r3, #1
 80059e6:	e000      	b.n	80059ea <prvResetNextTaskUnblockTime+0x16>
 80059e8:	2300      	movs	r3, #0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d004      	beq.n	80059f8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80059ee:	4b0a      	ldr	r3, [pc, #40]	; (8005a18 <prvResetNextTaskUnblockTime+0x44>)
 80059f0:	f04f 32ff 	mov.w	r2, #4294967295
 80059f4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80059f6:	e008      	b.n	8005a0a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80059f8:	4b06      	ldr	r3, [pc, #24]	; (8005a14 <prvResetNextTaskUnblockTime+0x40>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	4a04      	ldr	r2, [pc, #16]	; (8005a18 <prvResetNextTaskUnblockTime+0x44>)
 8005a08:	6013      	str	r3, [r2, #0]
}
 8005a0a:	bf00      	nop
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bc80      	pop	{r7}
 8005a12:	4770      	bx	lr
 8005a14:	200004cc 	.word	0x200004cc
 8005a18:	20000534 	.word	0x20000534

08005a1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a22:	4b0b      	ldr	r3, [pc, #44]	; (8005a50 <xTaskGetSchedulerState+0x34>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d102      	bne.n	8005a30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	607b      	str	r3, [r7, #4]
 8005a2e:	e008      	b.n	8005a42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a30:	4b08      	ldr	r3, [pc, #32]	; (8005a54 <xTaskGetSchedulerState+0x38>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d102      	bne.n	8005a3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a38:	2302      	movs	r3, #2
 8005a3a:	607b      	str	r3, [r7, #4]
 8005a3c:	e001      	b.n	8005a42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a42:	687b      	ldr	r3, [r7, #4]
	}
 8005a44:	4618      	mov	r0, r3
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bc80      	pop	{r7}
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	20000520 	.word	0x20000520
 8005a54:	2000053c 	.word	0x2000053c

08005a58 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8005a5e:	4b09      	ldr	r3, [pc, #36]	; (8005a84 <uxTaskResetEventItemValue+0x2c>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a66:	4b07      	ldr	r3, [pc, #28]	; (8005a84 <uxTaskResetEventItemValue+0x2c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6c:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <uxTaskResetEventItemValue+0x2c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f1c2 0207 	rsb	r2, r2, #7
 8005a74:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8005a76:	687b      	ldr	r3, [r7, #4]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bc80      	pop	{r7}
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	20000414 	.word	0x20000414

08005a88 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a92:	4b29      	ldr	r3, [pc, #164]	; (8005b38 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a98:	4b28      	ldr	r3, [pc, #160]	; (8005b3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7ff fa9d 	bl	8004fde <uxListRemove>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10b      	bne.n	8005ac2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005aaa:	4b24      	ldr	r3, [pc, #144]	; (8005b3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab6:	43da      	mvns	r2, r3
 8005ab8:	4b21      	ldr	r3, [pc, #132]	; (8005b40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4013      	ands	r3, r2
 8005abe:	4a20      	ldr	r2, [pc, #128]	; (8005b40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ac0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac8:	d10a      	bne.n	8005ae0 <prvAddCurrentTaskToDelayedList+0x58>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d007      	beq.n	8005ae0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ad0:	4b1a      	ldr	r3, [pc, #104]	; (8005b3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	481a      	ldr	r0, [pc, #104]	; (8005b44 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005ada:	f7ff fa25 	bl	8004f28 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ade:	e026      	b.n	8005b2e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ae8:	4b14      	ldr	r3, [pc, #80]	; (8005b3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d209      	bcs.n	8005b0c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005af8:	4b13      	ldr	r3, [pc, #76]	; (8005b48 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	4b0f      	ldr	r3, [pc, #60]	; (8005b3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	3304      	adds	r3, #4
 8005b02:	4619      	mov	r1, r3
 8005b04:	4610      	mov	r0, r2
 8005b06:	f7ff fa32 	bl	8004f6e <vListInsert>
}
 8005b0a:	e010      	b.n	8005b2e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b0c:	4b0f      	ldr	r3, [pc, #60]	; (8005b4c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	4b0a      	ldr	r3, [pc, #40]	; (8005b3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	3304      	adds	r3, #4
 8005b16:	4619      	mov	r1, r3
 8005b18:	4610      	mov	r0, r2
 8005b1a:	f7ff fa28 	bl	8004f6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b1e:	4b0c      	ldr	r3, [pc, #48]	; (8005b50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d202      	bcs.n	8005b2e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005b28:	4a09      	ldr	r2, [pc, #36]	; (8005b50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	6013      	str	r3, [r2, #0]
}
 8005b2e:	bf00      	nop
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20000518 	.word	0x20000518
 8005b3c:	20000414 	.word	0x20000414
 8005b40:	2000051c 	.word	0x2000051c
 8005b44:	20000500 	.word	0x20000500
 8005b48:	200004d0 	.word	0x200004d0
 8005b4c:	200004cc 	.word	0x200004cc
 8005b50:	20000534 	.word	0x20000534

08005b54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	3b04      	subs	r3, #4
 8005b64:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	3b04      	subs	r3, #4
 8005b72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	f023 0201 	bic.w	r2, r3, #1
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	3b04      	subs	r3, #4
 8005b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b84:	4a08      	ldr	r2, [pc, #32]	; (8005ba8 <pxPortInitialiseStack+0x54>)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	3b14      	subs	r3, #20
 8005b8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	3b20      	subs	r3, #32
 8005b9a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bc80      	pop	{r7}
 8005ba6:	4770      	bx	lr
 8005ba8:	08005bad 	.word	0x08005bad

08005bac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005bb6:	4b12      	ldr	r3, [pc, #72]	; (8005c00 <prvTaskExitError+0x54>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbe:	d00a      	beq.n	8005bd6 <prvTaskExitError+0x2a>
	__asm volatile
 8005bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	60fb      	str	r3, [r7, #12]
}
 8005bd2:	bf00      	nop
 8005bd4:	e7fe      	b.n	8005bd4 <prvTaskExitError+0x28>
	__asm volatile
 8005bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bda:	f383 8811 	msr	BASEPRI, r3
 8005bde:	f3bf 8f6f 	isb	sy
 8005be2:	f3bf 8f4f 	dsb	sy
 8005be6:	60bb      	str	r3, [r7, #8]
}
 8005be8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005bea:	bf00      	nop
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d0fc      	beq.n	8005bec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005bf2:	bf00      	nop
 8005bf4:	bf00      	nop
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bc80      	pop	{r7}
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	20000018 	.word	0x20000018
	...

08005c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c10:	4b07      	ldr	r3, [pc, #28]	; (8005c30 <pxCurrentTCBConst2>)
 8005c12:	6819      	ldr	r1, [r3, #0]
 8005c14:	6808      	ldr	r0, [r1, #0]
 8005c16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005c1a:	f380 8809 	msr	PSP, r0
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f04f 0000 	mov.w	r0, #0
 8005c26:	f380 8811 	msr	BASEPRI, r0
 8005c2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005c2e:	4770      	bx	lr

08005c30 <pxCurrentTCBConst2>:
 8005c30:	20000414 	.word	0x20000414
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c34:	bf00      	nop
 8005c36:	bf00      	nop

08005c38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005c38:	4806      	ldr	r0, [pc, #24]	; (8005c54 <prvPortStartFirstTask+0x1c>)
 8005c3a:	6800      	ldr	r0, [r0, #0]
 8005c3c:	6800      	ldr	r0, [r0, #0]
 8005c3e:	f380 8808 	msr	MSP, r0
 8005c42:	b662      	cpsie	i
 8005c44:	b661      	cpsie	f
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	df00      	svc	0
 8005c50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c52:	bf00      	nop
 8005c54:	e000ed08 	.word	0xe000ed08

08005c58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c5e:	4b32      	ldr	r3, [pc, #200]	; (8005d28 <xPortStartScheduler+0xd0>)
 8005c60:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	22ff      	movs	r2, #255	; 0xff
 8005c6e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c78:	78fb      	ldrb	r3, [r7, #3]
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	4b2a      	ldr	r3, [pc, #168]	; (8005d2c <xPortStartScheduler+0xd4>)
 8005c84:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c86:	4b2a      	ldr	r3, [pc, #168]	; (8005d30 <xPortStartScheduler+0xd8>)
 8005c88:	2207      	movs	r2, #7
 8005c8a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c8c:	e009      	b.n	8005ca2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005c8e:	4b28      	ldr	r3, [pc, #160]	; (8005d30 <xPortStartScheduler+0xd8>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	3b01      	subs	r3, #1
 8005c94:	4a26      	ldr	r2, [pc, #152]	; (8005d30 <xPortStartScheduler+0xd8>)
 8005c96:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c98:	78fb      	ldrb	r3, [r7, #3]
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	005b      	lsls	r3, r3, #1
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ca2:	78fb      	ldrb	r3, [r7, #3]
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005caa:	2b80      	cmp	r3, #128	; 0x80
 8005cac:	d0ef      	beq.n	8005c8e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005cae:	4b20      	ldr	r3, [pc, #128]	; (8005d30 <xPortStartScheduler+0xd8>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f1c3 0307 	rsb	r3, r3, #7
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d00a      	beq.n	8005cd0 <xPortStartScheduler+0x78>
	__asm volatile
 8005cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbe:	f383 8811 	msr	BASEPRI, r3
 8005cc2:	f3bf 8f6f 	isb	sy
 8005cc6:	f3bf 8f4f 	dsb	sy
 8005cca:	60bb      	str	r3, [r7, #8]
}
 8005ccc:	bf00      	nop
 8005cce:	e7fe      	b.n	8005cce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005cd0:	4b17      	ldr	r3, [pc, #92]	; (8005d30 <xPortStartScheduler+0xd8>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	021b      	lsls	r3, r3, #8
 8005cd6:	4a16      	ldr	r2, [pc, #88]	; (8005d30 <xPortStartScheduler+0xd8>)
 8005cd8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005cda:	4b15      	ldr	r3, [pc, #84]	; (8005d30 <xPortStartScheduler+0xd8>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ce2:	4a13      	ldr	r2, [pc, #76]	; (8005d30 <xPortStartScheduler+0xd8>)
 8005ce4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005cee:	4b11      	ldr	r3, [pc, #68]	; (8005d34 <xPortStartScheduler+0xdc>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a10      	ldr	r2, [pc, #64]	; (8005d34 <xPortStartScheduler+0xdc>)
 8005cf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005cf8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005cfa:	4b0e      	ldr	r3, [pc, #56]	; (8005d34 <xPortStartScheduler+0xdc>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a0d      	ldr	r2, [pc, #52]	; (8005d34 <xPortStartScheduler+0xdc>)
 8005d00:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005d04:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d06:	f000 f8b9 	bl	8005e7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d0a:	4b0b      	ldr	r3, [pc, #44]	; (8005d38 <xPortStartScheduler+0xe0>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d10:	f7ff ff92 	bl	8005c38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d14:	f7ff fd12 	bl	800573c <vTaskSwitchContext>
	prvTaskExitError();
 8005d18:	f7ff ff48 	bl	8005bac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	e000e400 	.word	0xe000e400
 8005d2c:	20000540 	.word	0x20000540
 8005d30:	20000544 	.word	0x20000544
 8005d34:	e000ed20 	.word	0xe000ed20
 8005d38:	20000018 	.word	0x20000018

08005d3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
	__asm volatile
 8005d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d46:	f383 8811 	msr	BASEPRI, r3
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	607b      	str	r3, [r7, #4]
}
 8005d54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d56:	4b0f      	ldr	r3, [pc, #60]	; (8005d94 <vPortEnterCritical+0x58>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	4a0d      	ldr	r2, [pc, #52]	; (8005d94 <vPortEnterCritical+0x58>)
 8005d5e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d60:	4b0c      	ldr	r3, [pc, #48]	; (8005d94 <vPortEnterCritical+0x58>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d10f      	bne.n	8005d88 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d68:	4b0b      	ldr	r3, [pc, #44]	; (8005d98 <vPortEnterCritical+0x5c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00a      	beq.n	8005d88 <vPortEnterCritical+0x4c>
	__asm volatile
 8005d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d76:	f383 8811 	msr	BASEPRI, r3
 8005d7a:	f3bf 8f6f 	isb	sy
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	603b      	str	r3, [r7, #0]
}
 8005d84:	bf00      	nop
 8005d86:	e7fe      	b.n	8005d86 <vPortEnterCritical+0x4a>
	}
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bc80      	pop	{r7}
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	20000018 	.word	0x20000018
 8005d98:	e000ed04 	.word	0xe000ed04

08005d9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005da2:	4b11      	ldr	r3, [pc, #68]	; (8005de8 <vPortExitCritical+0x4c>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10a      	bne.n	8005dc0 <vPortExitCritical+0x24>
	__asm volatile
 8005daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dae:	f383 8811 	msr	BASEPRI, r3
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	607b      	str	r3, [r7, #4]
}
 8005dbc:	bf00      	nop
 8005dbe:	e7fe      	b.n	8005dbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005dc0:	4b09      	ldr	r3, [pc, #36]	; (8005de8 <vPortExitCritical+0x4c>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	4a08      	ldr	r2, [pc, #32]	; (8005de8 <vPortExitCritical+0x4c>)
 8005dc8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005dca:	4b07      	ldr	r3, [pc, #28]	; (8005de8 <vPortExitCritical+0x4c>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d105      	bne.n	8005dde <vPortExitCritical+0x42>
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005ddc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005dde:	bf00      	nop
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bc80      	pop	{r7}
 8005de6:	4770      	bx	lr
 8005de8:	20000018 	.word	0x20000018
 8005dec:	00000000 	.word	0x00000000

08005df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005df0:	f3ef 8009 	mrs	r0, PSP
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	4b0d      	ldr	r3, [pc, #52]	; (8005e30 <pxCurrentTCBConst>)
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005e00:	6010      	str	r0, [r2, #0]
 8005e02:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005e06:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e0a:	f380 8811 	msr	BASEPRI, r0
 8005e0e:	f7ff fc95 	bl	800573c <vTaskSwitchContext>
 8005e12:	f04f 0000 	mov.w	r0, #0
 8005e16:	f380 8811 	msr	BASEPRI, r0
 8005e1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005e1e:	6819      	ldr	r1, [r3, #0]
 8005e20:	6808      	ldr	r0, [r1, #0]
 8005e22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005e26:	f380 8809 	msr	PSP, r0
 8005e2a:	f3bf 8f6f 	isb	sy
 8005e2e:	4770      	bx	lr

08005e30 <pxCurrentTCBConst>:
 8005e30:	20000414 	.word	0x20000414
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e34:	bf00      	nop
 8005e36:	bf00      	nop

08005e38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	607b      	str	r3, [r7, #4]
}
 8005e50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e52:	f7ff fbb5 	bl	80055c0 <xTaskIncrementTick>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d003      	beq.n	8005e64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e5c:	4b06      	ldr	r3, [pc, #24]	; (8005e78 <SysTick_Handler+0x40>)
 8005e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	2300      	movs	r3, #0
 8005e66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	f383 8811 	msr	BASEPRI, r3
}
 8005e6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e70:	bf00      	nop
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	e000ed04 	.word	0xe000ed04

08005e7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e80:	4b0a      	ldr	r3, [pc, #40]	; (8005eac <vPortSetupTimerInterrupt+0x30>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e86:	4b0a      	ldr	r3, [pc, #40]	; (8005eb0 <vPortSetupTimerInterrupt+0x34>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e8c:	4b09      	ldr	r3, [pc, #36]	; (8005eb4 <vPortSetupTimerInterrupt+0x38>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a09      	ldr	r2, [pc, #36]	; (8005eb8 <vPortSetupTimerInterrupt+0x3c>)
 8005e92:	fba2 2303 	umull	r2, r3, r2, r3
 8005e96:	099b      	lsrs	r3, r3, #6
 8005e98:	4a08      	ldr	r2, [pc, #32]	; (8005ebc <vPortSetupTimerInterrupt+0x40>)
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e9e:	4b03      	ldr	r3, [pc, #12]	; (8005eac <vPortSetupTimerInterrupt+0x30>)
 8005ea0:	2207      	movs	r2, #7
 8005ea2:	601a      	str	r2, [r3, #0]
}
 8005ea4:	bf00      	nop
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bc80      	pop	{r7}
 8005eaa:	4770      	bx	lr
 8005eac:	e000e010 	.word	0xe000e010
 8005eb0:	e000e018 	.word	0xe000e018
 8005eb4:	2000000c 	.word	0x2000000c
 8005eb8:	10624dd3 	.word	0x10624dd3
 8005ebc:	e000e014 	.word	0xe000e014

08005ec0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b08a      	sub	sp, #40	; 0x28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ecc:	f7ff face 	bl	800546c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ed0:	4b58      	ldr	r3, [pc, #352]	; (8006034 <pvPortMalloc+0x174>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ed8:	f000 f910 	bl	80060fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005edc:	4b56      	ldr	r3, [pc, #344]	; (8006038 <pvPortMalloc+0x178>)
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f040 808e 	bne.w	8006006 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d01d      	beq.n	8005f2c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005ef0:	2208      	movs	r2, #8
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f003 0307 	and.w	r3, r3, #7
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d014      	beq.n	8005f2c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f023 0307 	bic.w	r3, r3, #7
 8005f08:	3308      	adds	r3, #8
 8005f0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f003 0307 	and.w	r3, r3, #7
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00a      	beq.n	8005f2c <pvPortMalloc+0x6c>
	__asm volatile
 8005f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1a:	f383 8811 	msr	BASEPRI, r3
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	617b      	str	r3, [r7, #20]
}
 8005f28:	bf00      	nop
 8005f2a:	e7fe      	b.n	8005f2a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d069      	beq.n	8006006 <pvPortMalloc+0x146>
 8005f32:	4b42      	ldr	r3, [pc, #264]	; (800603c <pvPortMalloc+0x17c>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d864      	bhi.n	8006006 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f3c:	4b40      	ldr	r3, [pc, #256]	; (8006040 <pvPortMalloc+0x180>)
 8005f3e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f40:	4b3f      	ldr	r3, [pc, #252]	; (8006040 <pvPortMalloc+0x180>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f46:	e004      	b.n	8005f52 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d903      	bls.n	8005f64 <pvPortMalloc+0xa4>
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1f1      	bne.n	8005f48 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f64:	4b33      	ldr	r3, [pc, #204]	; (8006034 <pvPortMalloc+0x174>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d04b      	beq.n	8006006 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2208      	movs	r2, #8
 8005f74:	4413      	add	r3, r2
 8005f76:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	6a3b      	ldr	r3, [r7, #32]
 8005f7e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	1ad2      	subs	r2, r2, r3
 8005f88:	2308      	movs	r3, #8
 8005f8a:	005b      	lsls	r3, r3, #1
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d91f      	bls.n	8005fd0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4413      	add	r3, r2
 8005f96:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	f003 0307 	and.w	r3, r3, #7
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00a      	beq.n	8005fb8 <pvPortMalloc+0xf8>
	__asm volatile
 8005fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa6:	f383 8811 	msr	BASEPRI, r3
 8005faa:	f3bf 8f6f 	isb	sy
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	613b      	str	r3, [r7, #16]
}
 8005fb4:	bf00      	nop
 8005fb6:	e7fe      	b.n	8005fb6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	1ad2      	subs	r2, r2, r3
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005fca:	69b8      	ldr	r0, [r7, #24]
 8005fcc:	f000 f8f8 	bl	80061c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005fd0:	4b1a      	ldr	r3, [pc, #104]	; (800603c <pvPortMalloc+0x17c>)
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	4a18      	ldr	r2, [pc, #96]	; (800603c <pvPortMalloc+0x17c>)
 8005fdc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005fde:	4b17      	ldr	r3, [pc, #92]	; (800603c <pvPortMalloc+0x17c>)
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	4b18      	ldr	r3, [pc, #96]	; (8006044 <pvPortMalloc+0x184>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d203      	bcs.n	8005ff2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005fea:	4b14      	ldr	r3, [pc, #80]	; (800603c <pvPortMalloc+0x17c>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a15      	ldr	r2, [pc, #84]	; (8006044 <pvPortMalloc+0x184>)
 8005ff0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	4b10      	ldr	r3, [pc, #64]	; (8006038 <pvPortMalloc+0x178>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006006:	f7ff fa3f 	bl	8005488 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	f003 0307 	and.w	r3, r3, #7
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00a      	beq.n	800602a <pvPortMalloc+0x16a>
	__asm volatile
 8006014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006018:	f383 8811 	msr	BASEPRI, r3
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	60fb      	str	r3, [r7, #12]
}
 8006026:	bf00      	nop
 8006028:	e7fe      	b.n	8006028 <pvPortMalloc+0x168>
	return pvReturn;
 800602a:	69fb      	ldr	r3, [r7, #28]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3728      	adds	r7, #40	; 0x28
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	20001150 	.word	0x20001150
 8006038:	2000115c 	.word	0x2000115c
 800603c:	20001154 	.word	0x20001154
 8006040:	20001148 	.word	0x20001148
 8006044:	20001158 	.word	0x20001158

08006048 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d048      	beq.n	80060ec <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800605a:	2308      	movs	r3, #8
 800605c:	425b      	negs	r3, r3
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	4413      	add	r3, r2
 8006062:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	4b21      	ldr	r3, [pc, #132]	; (80060f4 <vPortFree+0xac>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4013      	ands	r3, r2
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10a      	bne.n	800608c <vPortFree+0x44>
	__asm volatile
 8006076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607a:	f383 8811 	msr	BASEPRI, r3
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	60fb      	str	r3, [r7, #12]
}
 8006088:	bf00      	nop
 800608a:	e7fe      	b.n	800608a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00a      	beq.n	80060aa <vPortFree+0x62>
	__asm volatile
 8006094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	60bb      	str	r3, [r7, #8]
}
 80060a6:	bf00      	nop
 80060a8:	e7fe      	b.n	80060a8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	4b11      	ldr	r3, [pc, #68]	; (80060f4 <vPortFree+0xac>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4013      	ands	r3, r2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d019      	beq.n	80060ec <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d115      	bne.n	80060ec <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	4b0b      	ldr	r3, [pc, #44]	; (80060f4 <vPortFree+0xac>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	43db      	mvns	r3, r3
 80060ca:	401a      	ands	r2, r3
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80060d0:	f7ff f9cc 	bl	800546c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	4b07      	ldr	r3, [pc, #28]	; (80060f8 <vPortFree+0xb0>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4413      	add	r3, r2
 80060de:	4a06      	ldr	r2, [pc, #24]	; (80060f8 <vPortFree+0xb0>)
 80060e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060e2:	6938      	ldr	r0, [r7, #16]
 80060e4:	f000 f86c 	bl	80061c0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80060e8:	f7ff f9ce 	bl	8005488 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80060ec:	bf00      	nop
 80060ee:	3718      	adds	r7, #24
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	2000115c 	.word	0x2000115c
 80060f8:	20001154 	.word	0x20001154

080060fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006102:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006106:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006108:	4b27      	ldr	r3, [pc, #156]	; (80061a8 <prvHeapInit+0xac>)
 800610a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f003 0307 	and.w	r3, r3, #7
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00c      	beq.n	8006130 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3307      	adds	r3, #7
 800611a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f023 0307 	bic.w	r3, r3, #7
 8006122:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	4a1f      	ldr	r2, [pc, #124]	; (80061a8 <prvHeapInit+0xac>)
 800612c:	4413      	add	r3, r2
 800612e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006134:	4a1d      	ldr	r2, [pc, #116]	; (80061ac <prvHeapInit+0xb0>)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800613a:	4b1c      	ldr	r3, [pc, #112]	; (80061ac <prvHeapInit+0xb0>)
 800613c:	2200      	movs	r2, #0
 800613e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	4413      	add	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006148:	2208      	movs	r2, #8
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	1a9b      	subs	r3, r3, r2
 800614e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f023 0307 	bic.w	r3, r3, #7
 8006156:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4a15      	ldr	r2, [pc, #84]	; (80061b0 <prvHeapInit+0xb4>)
 800615c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800615e:	4b14      	ldr	r3, [pc, #80]	; (80061b0 <prvHeapInit+0xb4>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2200      	movs	r2, #0
 8006164:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006166:	4b12      	ldr	r3, [pc, #72]	; (80061b0 <prvHeapInit+0xb4>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2200      	movs	r2, #0
 800616c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	1ad2      	subs	r2, r2, r3
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800617c:	4b0c      	ldr	r3, [pc, #48]	; (80061b0 <prvHeapInit+0xb4>)
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	4a0a      	ldr	r2, [pc, #40]	; (80061b4 <prvHeapInit+0xb8>)
 800618a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	4a09      	ldr	r2, [pc, #36]	; (80061b8 <prvHeapInit+0xbc>)
 8006192:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006194:	4b09      	ldr	r3, [pc, #36]	; (80061bc <prvHeapInit+0xc0>)
 8006196:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800619a:	601a      	str	r2, [r3, #0]
}
 800619c:	bf00      	nop
 800619e:	3714      	adds	r7, #20
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bc80      	pop	{r7}
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	20000548 	.word	0x20000548
 80061ac:	20001148 	.word	0x20001148
 80061b0:	20001150 	.word	0x20001150
 80061b4:	20001158 	.word	0x20001158
 80061b8:	20001154 	.word	0x20001154
 80061bc:	2000115c 	.word	0x2000115c

080061c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80061c8:	4b27      	ldr	r3, [pc, #156]	; (8006268 <prvInsertBlockIntoFreeList+0xa8>)
 80061ca:	60fb      	str	r3, [r7, #12]
 80061cc:	e002      	b.n	80061d4 <prvInsertBlockIntoFreeList+0x14>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	60fb      	str	r3, [r7, #12]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d8f7      	bhi.n	80061ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	4413      	add	r3, r2
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d108      	bne.n	8006202 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	441a      	add	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	441a      	add	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	429a      	cmp	r2, r3
 8006214:	d118      	bne.n	8006248 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	4b14      	ldr	r3, [pc, #80]	; (800626c <prvInsertBlockIntoFreeList+0xac>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	429a      	cmp	r2, r3
 8006220:	d00d      	beq.n	800623e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	441a      	add	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	601a      	str	r2, [r3, #0]
 800623c:	e008      	b.n	8006250 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800623e:	4b0b      	ldr	r3, [pc, #44]	; (800626c <prvInsertBlockIntoFreeList+0xac>)
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	e003      	b.n	8006250 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	429a      	cmp	r2, r3
 8006256:	d002      	beq.n	800625e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800625e:	bf00      	nop
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	bc80      	pop	{r7}
 8006266:	4770      	bx	lr
 8006268:	20001148 	.word	0x20001148
 800626c:	20001150 	.word	0x20001150

08006270 <__errno>:
 8006270:	4b01      	ldr	r3, [pc, #4]	; (8006278 <__errno+0x8>)
 8006272:	6818      	ldr	r0, [r3, #0]
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	2000001c 	.word	0x2000001c

0800627c <__libc_init_array>:
 800627c:	b570      	push	{r4, r5, r6, lr}
 800627e:	2600      	movs	r6, #0
 8006280:	4d0c      	ldr	r5, [pc, #48]	; (80062b4 <__libc_init_array+0x38>)
 8006282:	4c0d      	ldr	r4, [pc, #52]	; (80062b8 <__libc_init_array+0x3c>)
 8006284:	1b64      	subs	r4, r4, r5
 8006286:	10a4      	asrs	r4, r4, #2
 8006288:	42a6      	cmp	r6, r4
 800628a:	d109      	bne.n	80062a0 <__libc_init_array+0x24>
 800628c:	f002 f982 	bl	8008594 <_init>
 8006290:	2600      	movs	r6, #0
 8006292:	4d0a      	ldr	r5, [pc, #40]	; (80062bc <__libc_init_array+0x40>)
 8006294:	4c0a      	ldr	r4, [pc, #40]	; (80062c0 <__libc_init_array+0x44>)
 8006296:	1b64      	subs	r4, r4, r5
 8006298:	10a4      	asrs	r4, r4, #2
 800629a:	42a6      	cmp	r6, r4
 800629c:	d105      	bne.n	80062aa <__libc_init_array+0x2e>
 800629e:	bd70      	pop	{r4, r5, r6, pc}
 80062a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80062a4:	4798      	blx	r3
 80062a6:	3601      	adds	r6, #1
 80062a8:	e7ee      	b.n	8006288 <__libc_init_array+0xc>
 80062aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80062ae:	4798      	blx	r3
 80062b0:	3601      	adds	r6, #1
 80062b2:	e7f2      	b.n	800629a <__libc_init_array+0x1e>
 80062b4:	08008918 	.word	0x08008918
 80062b8:	08008918 	.word	0x08008918
 80062bc:	08008918 	.word	0x08008918
 80062c0:	0800891c 	.word	0x0800891c

080062c4 <memcpy>:
 80062c4:	440a      	add	r2, r1
 80062c6:	4291      	cmp	r1, r2
 80062c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80062cc:	d100      	bne.n	80062d0 <memcpy+0xc>
 80062ce:	4770      	bx	lr
 80062d0:	b510      	push	{r4, lr}
 80062d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062d6:	4291      	cmp	r1, r2
 80062d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062dc:	d1f9      	bne.n	80062d2 <memcpy+0xe>
 80062de:	bd10      	pop	{r4, pc}

080062e0 <memset>:
 80062e0:	4603      	mov	r3, r0
 80062e2:	4402      	add	r2, r0
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d100      	bne.n	80062ea <memset+0xa>
 80062e8:	4770      	bx	lr
 80062ea:	f803 1b01 	strb.w	r1, [r3], #1
 80062ee:	e7f9      	b.n	80062e4 <memset+0x4>

080062f0 <srand>:
 80062f0:	b538      	push	{r3, r4, r5, lr}
 80062f2:	4b10      	ldr	r3, [pc, #64]	; (8006334 <srand+0x44>)
 80062f4:	4604      	mov	r4, r0
 80062f6:	681d      	ldr	r5, [r3, #0]
 80062f8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80062fa:	b9b3      	cbnz	r3, 800632a <srand+0x3a>
 80062fc:	2018      	movs	r0, #24
 80062fe:	f000 f8df 	bl	80064c0 <malloc>
 8006302:	4602      	mov	r2, r0
 8006304:	63a8      	str	r0, [r5, #56]	; 0x38
 8006306:	b920      	cbnz	r0, 8006312 <srand+0x22>
 8006308:	2142      	movs	r1, #66	; 0x42
 800630a:	4b0b      	ldr	r3, [pc, #44]	; (8006338 <srand+0x48>)
 800630c:	480b      	ldr	r0, [pc, #44]	; (800633c <srand+0x4c>)
 800630e:	f000 f895 	bl	800643c <__assert_func>
 8006312:	490b      	ldr	r1, [pc, #44]	; (8006340 <srand+0x50>)
 8006314:	4b0b      	ldr	r3, [pc, #44]	; (8006344 <srand+0x54>)
 8006316:	e9c0 1300 	strd	r1, r3, [r0]
 800631a:	4b0b      	ldr	r3, [pc, #44]	; (8006348 <srand+0x58>)
 800631c:	2100      	movs	r1, #0
 800631e:	6083      	str	r3, [r0, #8]
 8006320:	230b      	movs	r3, #11
 8006322:	8183      	strh	r3, [r0, #12]
 8006324:	2001      	movs	r0, #1
 8006326:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800632a:	2200      	movs	r2, #0
 800632c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800632e:	611c      	str	r4, [r3, #16]
 8006330:	615a      	str	r2, [r3, #20]
 8006332:	bd38      	pop	{r3, r4, r5, pc}
 8006334:	2000001c 	.word	0x2000001c
 8006338:	0800879c 	.word	0x0800879c
 800633c:	080087b3 	.word	0x080087b3
 8006340:	abcd330e 	.word	0xabcd330e
 8006344:	e66d1234 	.word	0xe66d1234
 8006348:	0005deec 	.word	0x0005deec

0800634c <rand>:
 800634c:	4b16      	ldr	r3, [pc, #88]	; (80063a8 <rand+0x5c>)
 800634e:	b510      	push	{r4, lr}
 8006350:	681c      	ldr	r4, [r3, #0]
 8006352:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006354:	b9b3      	cbnz	r3, 8006384 <rand+0x38>
 8006356:	2018      	movs	r0, #24
 8006358:	f000 f8b2 	bl	80064c0 <malloc>
 800635c:	4602      	mov	r2, r0
 800635e:	63a0      	str	r0, [r4, #56]	; 0x38
 8006360:	b920      	cbnz	r0, 800636c <rand+0x20>
 8006362:	214e      	movs	r1, #78	; 0x4e
 8006364:	4b11      	ldr	r3, [pc, #68]	; (80063ac <rand+0x60>)
 8006366:	4812      	ldr	r0, [pc, #72]	; (80063b0 <rand+0x64>)
 8006368:	f000 f868 	bl	800643c <__assert_func>
 800636c:	4911      	ldr	r1, [pc, #68]	; (80063b4 <rand+0x68>)
 800636e:	4b12      	ldr	r3, [pc, #72]	; (80063b8 <rand+0x6c>)
 8006370:	e9c0 1300 	strd	r1, r3, [r0]
 8006374:	4b11      	ldr	r3, [pc, #68]	; (80063bc <rand+0x70>)
 8006376:	2100      	movs	r1, #0
 8006378:	6083      	str	r3, [r0, #8]
 800637a:	230b      	movs	r3, #11
 800637c:	8183      	strh	r3, [r0, #12]
 800637e:	2001      	movs	r0, #1
 8006380:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006384:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8006386:	4a0e      	ldr	r2, [pc, #56]	; (80063c0 <rand+0x74>)
 8006388:	6920      	ldr	r0, [r4, #16]
 800638a:	6963      	ldr	r3, [r4, #20]
 800638c:	4342      	muls	r2, r0
 800638e:	490d      	ldr	r1, [pc, #52]	; (80063c4 <rand+0x78>)
 8006390:	fb01 2203 	mla	r2, r1, r3, r2
 8006394:	fba0 0101 	umull	r0, r1, r0, r1
 8006398:	1c43      	adds	r3, r0, #1
 800639a:	eb42 0001 	adc.w	r0, r2, r1
 800639e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80063a2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80063a6:	bd10      	pop	{r4, pc}
 80063a8:	2000001c 	.word	0x2000001c
 80063ac:	0800879c 	.word	0x0800879c
 80063b0:	080087b3 	.word	0x080087b3
 80063b4:	abcd330e 	.word	0xabcd330e
 80063b8:	e66d1234 	.word	0xe66d1234
 80063bc:	0005deec 	.word	0x0005deec
 80063c0:	5851f42d 	.word	0x5851f42d
 80063c4:	4c957f2d 	.word	0x4c957f2d

080063c8 <siprintf>:
 80063c8:	b40e      	push	{r1, r2, r3}
 80063ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80063ce:	b500      	push	{lr}
 80063d0:	b09c      	sub	sp, #112	; 0x70
 80063d2:	ab1d      	add	r3, sp, #116	; 0x74
 80063d4:	9002      	str	r0, [sp, #8]
 80063d6:	9006      	str	r0, [sp, #24]
 80063d8:	9107      	str	r1, [sp, #28]
 80063da:	9104      	str	r1, [sp, #16]
 80063dc:	4808      	ldr	r0, [pc, #32]	; (8006400 <siprintf+0x38>)
 80063de:	4909      	ldr	r1, [pc, #36]	; (8006404 <siprintf+0x3c>)
 80063e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80063e4:	9105      	str	r1, [sp, #20]
 80063e6:	6800      	ldr	r0, [r0, #0]
 80063e8:	a902      	add	r1, sp, #8
 80063ea:	9301      	str	r3, [sp, #4]
 80063ec:	f000 f9a8 	bl	8006740 <_svfiprintf_r>
 80063f0:	2200      	movs	r2, #0
 80063f2:	9b02      	ldr	r3, [sp, #8]
 80063f4:	701a      	strb	r2, [r3, #0]
 80063f6:	b01c      	add	sp, #112	; 0x70
 80063f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80063fc:	b003      	add	sp, #12
 80063fe:	4770      	bx	lr
 8006400:	2000001c 	.word	0x2000001c
 8006404:	ffff0208 	.word	0xffff0208

08006408 <time>:
 8006408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800640a:	4b0b      	ldr	r3, [pc, #44]	; (8006438 <time+0x30>)
 800640c:	4604      	mov	r4, r0
 800640e:	2200      	movs	r2, #0
 8006410:	4669      	mov	r1, sp
 8006412:	6818      	ldr	r0, [r3, #0]
 8006414:	f000 f842 	bl	800649c <_gettimeofday_r>
 8006418:	2800      	cmp	r0, #0
 800641a:	da05      	bge.n	8006428 <time+0x20>
 800641c:	f04f 32ff 	mov.w	r2, #4294967295
 8006420:	f04f 33ff 	mov.w	r3, #4294967295
 8006424:	e9cd 2300 	strd	r2, r3, [sp]
 8006428:	e9dd 0100 	ldrd	r0, r1, [sp]
 800642c:	b10c      	cbz	r4, 8006432 <time+0x2a>
 800642e:	e9c4 0100 	strd	r0, r1, [r4]
 8006432:	b004      	add	sp, #16
 8006434:	bd10      	pop	{r4, pc}
 8006436:	bf00      	nop
 8006438:	2000001c 	.word	0x2000001c

0800643c <__assert_func>:
 800643c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800643e:	4614      	mov	r4, r2
 8006440:	461a      	mov	r2, r3
 8006442:	4b09      	ldr	r3, [pc, #36]	; (8006468 <__assert_func+0x2c>)
 8006444:	4605      	mov	r5, r0
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68d8      	ldr	r0, [r3, #12]
 800644a:	b14c      	cbz	r4, 8006460 <__assert_func+0x24>
 800644c:	4b07      	ldr	r3, [pc, #28]	; (800646c <__assert_func+0x30>)
 800644e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006452:	9100      	str	r1, [sp, #0]
 8006454:	462b      	mov	r3, r5
 8006456:	4906      	ldr	r1, [pc, #24]	; (8006470 <__assert_func+0x34>)
 8006458:	f000 f80e 	bl	8006478 <fiprintf>
 800645c:	f000 fe2e 	bl	80070bc <abort>
 8006460:	4b04      	ldr	r3, [pc, #16]	; (8006474 <__assert_func+0x38>)
 8006462:	461c      	mov	r4, r3
 8006464:	e7f3      	b.n	800644e <__assert_func+0x12>
 8006466:	bf00      	nop
 8006468:	2000001c 	.word	0x2000001c
 800646c:	0800880e 	.word	0x0800880e
 8006470:	0800881b 	.word	0x0800881b
 8006474:	08008849 	.word	0x08008849

08006478 <fiprintf>:
 8006478:	b40e      	push	{r1, r2, r3}
 800647a:	b503      	push	{r0, r1, lr}
 800647c:	4601      	mov	r1, r0
 800647e:	ab03      	add	r3, sp, #12
 8006480:	4805      	ldr	r0, [pc, #20]	; (8006498 <fiprintf+0x20>)
 8006482:	f853 2b04 	ldr.w	r2, [r3], #4
 8006486:	6800      	ldr	r0, [r0, #0]
 8006488:	9301      	str	r3, [sp, #4]
 800648a:	f000 fa81 	bl	8006990 <_vfiprintf_r>
 800648e:	b002      	add	sp, #8
 8006490:	f85d eb04 	ldr.w	lr, [sp], #4
 8006494:	b003      	add	sp, #12
 8006496:	4770      	bx	lr
 8006498:	2000001c 	.word	0x2000001c

0800649c <_gettimeofday_r>:
 800649c:	b538      	push	{r3, r4, r5, lr}
 800649e:	2300      	movs	r3, #0
 80064a0:	4d06      	ldr	r5, [pc, #24]	; (80064bc <_gettimeofday_r+0x20>)
 80064a2:	4604      	mov	r4, r0
 80064a4:	4608      	mov	r0, r1
 80064a6:	4611      	mov	r1, r2
 80064a8:	602b      	str	r3, [r5, #0]
 80064aa:	f002 f86b 	bl	8008584 <_gettimeofday>
 80064ae:	1c43      	adds	r3, r0, #1
 80064b0:	d102      	bne.n	80064b8 <_gettimeofday_r+0x1c>
 80064b2:	682b      	ldr	r3, [r5, #0]
 80064b4:	b103      	cbz	r3, 80064b8 <_gettimeofday_r+0x1c>
 80064b6:	6023      	str	r3, [r4, #0]
 80064b8:	bd38      	pop	{r3, r4, r5, pc}
 80064ba:	bf00      	nop
 80064bc:	20001168 	.word	0x20001168

080064c0 <malloc>:
 80064c0:	4b02      	ldr	r3, [pc, #8]	; (80064cc <malloc+0xc>)
 80064c2:	4601      	mov	r1, r0
 80064c4:	6818      	ldr	r0, [r3, #0]
 80064c6:	f000 b86b 	b.w	80065a0 <_malloc_r>
 80064ca:	bf00      	nop
 80064cc:	2000001c 	.word	0x2000001c

080064d0 <_free_r>:
 80064d0:	b538      	push	{r3, r4, r5, lr}
 80064d2:	4605      	mov	r5, r0
 80064d4:	2900      	cmp	r1, #0
 80064d6:	d040      	beq.n	800655a <_free_r+0x8a>
 80064d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064dc:	1f0c      	subs	r4, r1, #4
 80064de:	2b00      	cmp	r3, #0
 80064e0:	bfb8      	it	lt
 80064e2:	18e4      	addlt	r4, r4, r3
 80064e4:	f001 f836 	bl	8007554 <__malloc_lock>
 80064e8:	4a1c      	ldr	r2, [pc, #112]	; (800655c <_free_r+0x8c>)
 80064ea:	6813      	ldr	r3, [r2, #0]
 80064ec:	b933      	cbnz	r3, 80064fc <_free_r+0x2c>
 80064ee:	6063      	str	r3, [r4, #4]
 80064f0:	6014      	str	r4, [r2, #0]
 80064f2:	4628      	mov	r0, r5
 80064f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064f8:	f001 b832 	b.w	8007560 <__malloc_unlock>
 80064fc:	42a3      	cmp	r3, r4
 80064fe:	d908      	bls.n	8006512 <_free_r+0x42>
 8006500:	6820      	ldr	r0, [r4, #0]
 8006502:	1821      	adds	r1, r4, r0
 8006504:	428b      	cmp	r3, r1
 8006506:	bf01      	itttt	eq
 8006508:	6819      	ldreq	r1, [r3, #0]
 800650a:	685b      	ldreq	r3, [r3, #4]
 800650c:	1809      	addeq	r1, r1, r0
 800650e:	6021      	streq	r1, [r4, #0]
 8006510:	e7ed      	b.n	80064ee <_free_r+0x1e>
 8006512:	461a      	mov	r2, r3
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	b10b      	cbz	r3, 800651c <_free_r+0x4c>
 8006518:	42a3      	cmp	r3, r4
 800651a:	d9fa      	bls.n	8006512 <_free_r+0x42>
 800651c:	6811      	ldr	r1, [r2, #0]
 800651e:	1850      	adds	r0, r2, r1
 8006520:	42a0      	cmp	r0, r4
 8006522:	d10b      	bne.n	800653c <_free_r+0x6c>
 8006524:	6820      	ldr	r0, [r4, #0]
 8006526:	4401      	add	r1, r0
 8006528:	1850      	adds	r0, r2, r1
 800652a:	4283      	cmp	r3, r0
 800652c:	6011      	str	r1, [r2, #0]
 800652e:	d1e0      	bne.n	80064f2 <_free_r+0x22>
 8006530:	6818      	ldr	r0, [r3, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	4401      	add	r1, r0
 8006536:	6011      	str	r1, [r2, #0]
 8006538:	6053      	str	r3, [r2, #4]
 800653a:	e7da      	b.n	80064f2 <_free_r+0x22>
 800653c:	d902      	bls.n	8006544 <_free_r+0x74>
 800653e:	230c      	movs	r3, #12
 8006540:	602b      	str	r3, [r5, #0]
 8006542:	e7d6      	b.n	80064f2 <_free_r+0x22>
 8006544:	6820      	ldr	r0, [r4, #0]
 8006546:	1821      	adds	r1, r4, r0
 8006548:	428b      	cmp	r3, r1
 800654a:	bf01      	itttt	eq
 800654c:	6819      	ldreq	r1, [r3, #0]
 800654e:	685b      	ldreq	r3, [r3, #4]
 8006550:	1809      	addeq	r1, r1, r0
 8006552:	6021      	streq	r1, [r4, #0]
 8006554:	6063      	str	r3, [r4, #4]
 8006556:	6054      	str	r4, [r2, #4]
 8006558:	e7cb      	b.n	80064f2 <_free_r+0x22>
 800655a:	bd38      	pop	{r3, r4, r5, pc}
 800655c:	20001160 	.word	0x20001160

08006560 <sbrk_aligned>:
 8006560:	b570      	push	{r4, r5, r6, lr}
 8006562:	4e0e      	ldr	r6, [pc, #56]	; (800659c <sbrk_aligned+0x3c>)
 8006564:	460c      	mov	r4, r1
 8006566:	6831      	ldr	r1, [r6, #0]
 8006568:	4605      	mov	r5, r0
 800656a:	b911      	cbnz	r1, 8006572 <sbrk_aligned+0x12>
 800656c:	f000 fcd6 	bl	8006f1c <_sbrk_r>
 8006570:	6030      	str	r0, [r6, #0]
 8006572:	4621      	mov	r1, r4
 8006574:	4628      	mov	r0, r5
 8006576:	f000 fcd1 	bl	8006f1c <_sbrk_r>
 800657a:	1c43      	adds	r3, r0, #1
 800657c:	d00a      	beq.n	8006594 <sbrk_aligned+0x34>
 800657e:	1cc4      	adds	r4, r0, #3
 8006580:	f024 0403 	bic.w	r4, r4, #3
 8006584:	42a0      	cmp	r0, r4
 8006586:	d007      	beq.n	8006598 <sbrk_aligned+0x38>
 8006588:	1a21      	subs	r1, r4, r0
 800658a:	4628      	mov	r0, r5
 800658c:	f000 fcc6 	bl	8006f1c <_sbrk_r>
 8006590:	3001      	adds	r0, #1
 8006592:	d101      	bne.n	8006598 <sbrk_aligned+0x38>
 8006594:	f04f 34ff 	mov.w	r4, #4294967295
 8006598:	4620      	mov	r0, r4
 800659a:	bd70      	pop	{r4, r5, r6, pc}
 800659c:	20001164 	.word	0x20001164

080065a0 <_malloc_r>:
 80065a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065a4:	1ccd      	adds	r5, r1, #3
 80065a6:	f025 0503 	bic.w	r5, r5, #3
 80065aa:	3508      	adds	r5, #8
 80065ac:	2d0c      	cmp	r5, #12
 80065ae:	bf38      	it	cc
 80065b0:	250c      	movcc	r5, #12
 80065b2:	2d00      	cmp	r5, #0
 80065b4:	4607      	mov	r7, r0
 80065b6:	db01      	blt.n	80065bc <_malloc_r+0x1c>
 80065b8:	42a9      	cmp	r1, r5
 80065ba:	d905      	bls.n	80065c8 <_malloc_r+0x28>
 80065bc:	230c      	movs	r3, #12
 80065be:	2600      	movs	r6, #0
 80065c0:	603b      	str	r3, [r7, #0]
 80065c2:	4630      	mov	r0, r6
 80065c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065c8:	4e2e      	ldr	r6, [pc, #184]	; (8006684 <_malloc_r+0xe4>)
 80065ca:	f000 ffc3 	bl	8007554 <__malloc_lock>
 80065ce:	6833      	ldr	r3, [r6, #0]
 80065d0:	461c      	mov	r4, r3
 80065d2:	bb34      	cbnz	r4, 8006622 <_malloc_r+0x82>
 80065d4:	4629      	mov	r1, r5
 80065d6:	4638      	mov	r0, r7
 80065d8:	f7ff ffc2 	bl	8006560 <sbrk_aligned>
 80065dc:	1c43      	adds	r3, r0, #1
 80065de:	4604      	mov	r4, r0
 80065e0:	d14d      	bne.n	800667e <_malloc_r+0xde>
 80065e2:	6834      	ldr	r4, [r6, #0]
 80065e4:	4626      	mov	r6, r4
 80065e6:	2e00      	cmp	r6, #0
 80065e8:	d140      	bne.n	800666c <_malloc_r+0xcc>
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	4631      	mov	r1, r6
 80065ee:	4638      	mov	r0, r7
 80065f0:	eb04 0803 	add.w	r8, r4, r3
 80065f4:	f000 fc92 	bl	8006f1c <_sbrk_r>
 80065f8:	4580      	cmp	r8, r0
 80065fa:	d13a      	bne.n	8006672 <_malloc_r+0xd2>
 80065fc:	6821      	ldr	r1, [r4, #0]
 80065fe:	3503      	adds	r5, #3
 8006600:	1a6d      	subs	r5, r5, r1
 8006602:	f025 0503 	bic.w	r5, r5, #3
 8006606:	3508      	adds	r5, #8
 8006608:	2d0c      	cmp	r5, #12
 800660a:	bf38      	it	cc
 800660c:	250c      	movcc	r5, #12
 800660e:	4638      	mov	r0, r7
 8006610:	4629      	mov	r1, r5
 8006612:	f7ff ffa5 	bl	8006560 <sbrk_aligned>
 8006616:	3001      	adds	r0, #1
 8006618:	d02b      	beq.n	8006672 <_malloc_r+0xd2>
 800661a:	6823      	ldr	r3, [r4, #0]
 800661c:	442b      	add	r3, r5
 800661e:	6023      	str	r3, [r4, #0]
 8006620:	e00e      	b.n	8006640 <_malloc_r+0xa0>
 8006622:	6822      	ldr	r2, [r4, #0]
 8006624:	1b52      	subs	r2, r2, r5
 8006626:	d41e      	bmi.n	8006666 <_malloc_r+0xc6>
 8006628:	2a0b      	cmp	r2, #11
 800662a:	d916      	bls.n	800665a <_malloc_r+0xba>
 800662c:	1961      	adds	r1, r4, r5
 800662e:	42a3      	cmp	r3, r4
 8006630:	6025      	str	r5, [r4, #0]
 8006632:	bf18      	it	ne
 8006634:	6059      	strne	r1, [r3, #4]
 8006636:	6863      	ldr	r3, [r4, #4]
 8006638:	bf08      	it	eq
 800663a:	6031      	streq	r1, [r6, #0]
 800663c:	5162      	str	r2, [r4, r5]
 800663e:	604b      	str	r3, [r1, #4]
 8006640:	4638      	mov	r0, r7
 8006642:	f104 060b 	add.w	r6, r4, #11
 8006646:	f000 ff8b 	bl	8007560 <__malloc_unlock>
 800664a:	f026 0607 	bic.w	r6, r6, #7
 800664e:	1d23      	adds	r3, r4, #4
 8006650:	1af2      	subs	r2, r6, r3
 8006652:	d0b6      	beq.n	80065c2 <_malloc_r+0x22>
 8006654:	1b9b      	subs	r3, r3, r6
 8006656:	50a3      	str	r3, [r4, r2]
 8006658:	e7b3      	b.n	80065c2 <_malloc_r+0x22>
 800665a:	6862      	ldr	r2, [r4, #4]
 800665c:	42a3      	cmp	r3, r4
 800665e:	bf0c      	ite	eq
 8006660:	6032      	streq	r2, [r6, #0]
 8006662:	605a      	strne	r2, [r3, #4]
 8006664:	e7ec      	b.n	8006640 <_malloc_r+0xa0>
 8006666:	4623      	mov	r3, r4
 8006668:	6864      	ldr	r4, [r4, #4]
 800666a:	e7b2      	b.n	80065d2 <_malloc_r+0x32>
 800666c:	4634      	mov	r4, r6
 800666e:	6876      	ldr	r6, [r6, #4]
 8006670:	e7b9      	b.n	80065e6 <_malloc_r+0x46>
 8006672:	230c      	movs	r3, #12
 8006674:	4638      	mov	r0, r7
 8006676:	603b      	str	r3, [r7, #0]
 8006678:	f000 ff72 	bl	8007560 <__malloc_unlock>
 800667c:	e7a1      	b.n	80065c2 <_malloc_r+0x22>
 800667e:	6025      	str	r5, [r4, #0]
 8006680:	e7de      	b.n	8006640 <_malloc_r+0xa0>
 8006682:	bf00      	nop
 8006684:	20001160 	.word	0x20001160

08006688 <__ssputs_r>:
 8006688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800668c:	688e      	ldr	r6, [r1, #8]
 800668e:	4682      	mov	sl, r0
 8006690:	429e      	cmp	r6, r3
 8006692:	460c      	mov	r4, r1
 8006694:	4690      	mov	r8, r2
 8006696:	461f      	mov	r7, r3
 8006698:	d838      	bhi.n	800670c <__ssputs_r+0x84>
 800669a:	898a      	ldrh	r2, [r1, #12]
 800669c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80066a0:	d032      	beq.n	8006708 <__ssputs_r+0x80>
 80066a2:	6825      	ldr	r5, [r4, #0]
 80066a4:	6909      	ldr	r1, [r1, #16]
 80066a6:	3301      	adds	r3, #1
 80066a8:	eba5 0901 	sub.w	r9, r5, r1
 80066ac:	6965      	ldr	r5, [r4, #20]
 80066ae:	444b      	add	r3, r9
 80066b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80066b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80066b8:	106d      	asrs	r5, r5, #1
 80066ba:	429d      	cmp	r5, r3
 80066bc:	bf38      	it	cc
 80066be:	461d      	movcc	r5, r3
 80066c0:	0553      	lsls	r3, r2, #21
 80066c2:	d531      	bpl.n	8006728 <__ssputs_r+0xa0>
 80066c4:	4629      	mov	r1, r5
 80066c6:	f7ff ff6b 	bl	80065a0 <_malloc_r>
 80066ca:	4606      	mov	r6, r0
 80066cc:	b950      	cbnz	r0, 80066e4 <__ssputs_r+0x5c>
 80066ce:	230c      	movs	r3, #12
 80066d0:	f04f 30ff 	mov.w	r0, #4294967295
 80066d4:	f8ca 3000 	str.w	r3, [sl]
 80066d8:	89a3      	ldrh	r3, [r4, #12]
 80066da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066de:	81a3      	strh	r3, [r4, #12]
 80066e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066e4:	464a      	mov	r2, r9
 80066e6:	6921      	ldr	r1, [r4, #16]
 80066e8:	f7ff fdec 	bl	80062c4 <memcpy>
 80066ec:	89a3      	ldrh	r3, [r4, #12]
 80066ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80066f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f6:	81a3      	strh	r3, [r4, #12]
 80066f8:	6126      	str	r6, [r4, #16]
 80066fa:	444e      	add	r6, r9
 80066fc:	6026      	str	r6, [r4, #0]
 80066fe:	463e      	mov	r6, r7
 8006700:	6165      	str	r5, [r4, #20]
 8006702:	eba5 0509 	sub.w	r5, r5, r9
 8006706:	60a5      	str	r5, [r4, #8]
 8006708:	42be      	cmp	r6, r7
 800670a:	d900      	bls.n	800670e <__ssputs_r+0x86>
 800670c:	463e      	mov	r6, r7
 800670e:	4632      	mov	r2, r6
 8006710:	4641      	mov	r1, r8
 8006712:	6820      	ldr	r0, [r4, #0]
 8006714:	f000 ff04 	bl	8007520 <memmove>
 8006718:	68a3      	ldr	r3, [r4, #8]
 800671a:	2000      	movs	r0, #0
 800671c:	1b9b      	subs	r3, r3, r6
 800671e:	60a3      	str	r3, [r4, #8]
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	4433      	add	r3, r6
 8006724:	6023      	str	r3, [r4, #0]
 8006726:	e7db      	b.n	80066e0 <__ssputs_r+0x58>
 8006728:	462a      	mov	r2, r5
 800672a:	f000 ff1f 	bl	800756c <_realloc_r>
 800672e:	4606      	mov	r6, r0
 8006730:	2800      	cmp	r0, #0
 8006732:	d1e1      	bne.n	80066f8 <__ssputs_r+0x70>
 8006734:	4650      	mov	r0, sl
 8006736:	6921      	ldr	r1, [r4, #16]
 8006738:	f7ff feca 	bl	80064d0 <_free_r>
 800673c:	e7c7      	b.n	80066ce <__ssputs_r+0x46>
	...

08006740 <_svfiprintf_r>:
 8006740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006744:	4698      	mov	r8, r3
 8006746:	898b      	ldrh	r3, [r1, #12]
 8006748:	4607      	mov	r7, r0
 800674a:	061b      	lsls	r3, r3, #24
 800674c:	460d      	mov	r5, r1
 800674e:	4614      	mov	r4, r2
 8006750:	b09d      	sub	sp, #116	; 0x74
 8006752:	d50e      	bpl.n	8006772 <_svfiprintf_r+0x32>
 8006754:	690b      	ldr	r3, [r1, #16]
 8006756:	b963      	cbnz	r3, 8006772 <_svfiprintf_r+0x32>
 8006758:	2140      	movs	r1, #64	; 0x40
 800675a:	f7ff ff21 	bl	80065a0 <_malloc_r>
 800675e:	6028      	str	r0, [r5, #0]
 8006760:	6128      	str	r0, [r5, #16]
 8006762:	b920      	cbnz	r0, 800676e <_svfiprintf_r+0x2e>
 8006764:	230c      	movs	r3, #12
 8006766:	603b      	str	r3, [r7, #0]
 8006768:	f04f 30ff 	mov.w	r0, #4294967295
 800676c:	e0d1      	b.n	8006912 <_svfiprintf_r+0x1d2>
 800676e:	2340      	movs	r3, #64	; 0x40
 8006770:	616b      	str	r3, [r5, #20]
 8006772:	2300      	movs	r3, #0
 8006774:	9309      	str	r3, [sp, #36]	; 0x24
 8006776:	2320      	movs	r3, #32
 8006778:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800677c:	2330      	movs	r3, #48	; 0x30
 800677e:	f04f 0901 	mov.w	r9, #1
 8006782:	f8cd 800c 	str.w	r8, [sp, #12]
 8006786:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800692c <_svfiprintf_r+0x1ec>
 800678a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800678e:	4623      	mov	r3, r4
 8006790:	469a      	mov	sl, r3
 8006792:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006796:	b10a      	cbz	r2, 800679c <_svfiprintf_r+0x5c>
 8006798:	2a25      	cmp	r2, #37	; 0x25
 800679a:	d1f9      	bne.n	8006790 <_svfiprintf_r+0x50>
 800679c:	ebba 0b04 	subs.w	fp, sl, r4
 80067a0:	d00b      	beq.n	80067ba <_svfiprintf_r+0x7a>
 80067a2:	465b      	mov	r3, fp
 80067a4:	4622      	mov	r2, r4
 80067a6:	4629      	mov	r1, r5
 80067a8:	4638      	mov	r0, r7
 80067aa:	f7ff ff6d 	bl	8006688 <__ssputs_r>
 80067ae:	3001      	adds	r0, #1
 80067b0:	f000 80aa 	beq.w	8006908 <_svfiprintf_r+0x1c8>
 80067b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067b6:	445a      	add	r2, fp
 80067b8:	9209      	str	r2, [sp, #36]	; 0x24
 80067ba:	f89a 3000 	ldrb.w	r3, [sl]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f000 80a2 	beq.w	8006908 <_svfiprintf_r+0x1c8>
 80067c4:	2300      	movs	r3, #0
 80067c6:	f04f 32ff 	mov.w	r2, #4294967295
 80067ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067ce:	f10a 0a01 	add.w	sl, sl, #1
 80067d2:	9304      	str	r3, [sp, #16]
 80067d4:	9307      	str	r3, [sp, #28]
 80067d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067da:	931a      	str	r3, [sp, #104]	; 0x68
 80067dc:	4654      	mov	r4, sl
 80067de:	2205      	movs	r2, #5
 80067e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067e4:	4851      	ldr	r0, [pc, #324]	; (800692c <_svfiprintf_r+0x1ec>)
 80067e6:	f000 fe8d 	bl	8007504 <memchr>
 80067ea:	9a04      	ldr	r2, [sp, #16]
 80067ec:	b9d8      	cbnz	r0, 8006826 <_svfiprintf_r+0xe6>
 80067ee:	06d0      	lsls	r0, r2, #27
 80067f0:	bf44      	itt	mi
 80067f2:	2320      	movmi	r3, #32
 80067f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067f8:	0711      	lsls	r1, r2, #28
 80067fa:	bf44      	itt	mi
 80067fc:	232b      	movmi	r3, #43	; 0x2b
 80067fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006802:	f89a 3000 	ldrb.w	r3, [sl]
 8006806:	2b2a      	cmp	r3, #42	; 0x2a
 8006808:	d015      	beq.n	8006836 <_svfiprintf_r+0xf6>
 800680a:	4654      	mov	r4, sl
 800680c:	2000      	movs	r0, #0
 800680e:	f04f 0c0a 	mov.w	ip, #10
 8006812:	9a07      	ldr	r2, [sp, #28]
 8006814:	4621      	mov	r1, r4
 8006816:	f811 3b01 	ldrb.w	r3, [r1], #1
 800681a:	3b30      	subs	r3, #48	; 0x30
 800681c:	2b09      	cmp	r3, #9
 800681e:	d94e      	bls.n	80068be <_svfiprintf_r+0x17e>
 8006820:	b1b0      	cbz	r0, 8006850 <_svfiprintf_r+0x110>
 8006822:	9207      	str	r2, [sp, #28]
 8006824:	e014      	b.n	8006850 <_svfiprintf_r+0x110>
 8006826:	eba0 0308 	sub.w	r3, r0, r8
 800682a:	fa09 f303 	lsl.w	r3, r9, r3
 800682e:	4313      	orrs	r3, r2
 8006830:	46a2      	mov	sl, r4
 8006832:	9304      	str	r3, [sp, #16]
 8006834:	e7d2      	b.n	80067dc <_svfiprintf_r+0x9c>
 8006836:	9b03      	ldr	r3, [sp, #12]
 8006838:	1d19      	adds	r1, r3, #4
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	9103      	str	r1, [sp, #12]
 800683e:	2b00      	cmp	r3, #0
 8006840:	bfbb      	ittet	lt
 8006842:	425b      	neglt	r3, r3
 8006844:	f042 0202 	orrlt.w	r2, r2, #2
 8006848:	9307      	strge	r3, [sp, #28]
 800684a:	9307      	strlt	r3, [sp, #28]
 800684c:	bfb8      	it	lt
 800684e:	9204      	strlt	r2, [sp, #16]
 8006850:	7823      	ldrb	r3, [r4, #0]
 8006852:	2b2e      	cmp	r3, #46	; 0x2e
 8006854:	d10c      	bne.n	8006870 <_svfiprintf_r+0x130>
 8006856:	7863      	ldrb	r3, [r4, #1]
 8006858:	2b2a      	cmp	r3, #42	; 0x2a
 800685a:	d135      	bne.n	80068c8 <_svfiprintf_r+0x188>
 800685c:	9b03      	ldr	r3, [sp, #12]
 800685e:	3402      	adds	r4, #2
 8006860:	1d1a      	adds	r2, r3, #4
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	9203      	str	r2, [sp, #12]
 8006866:	2b00      	cmp	r3, #0
 8006868:	bfb8      	it	lt
 800686a:	f04f 33ff 	movlt.w	r3, #4294967295
 800686e:	9305      	str	r3, [sp, #20]
 8006870:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006930 <_svfiprintf_r+0x1f0>
 8006874:	2203      	movs	r2, #3
 8006876:	4650      	mov	r0, sl
 8006878:	7821      	ldrb	r1, [r4, #0]
 800687a:	f000 fe43 	bl	8007504 <memchr>
 800687e:	b140      	cbz	r0, 8006892 <_svfiprintf_r+0x152>
 8006880:	2340      	movs	r3, #64	; 0x40
 8006882:	eba0 000a 	sub.w	r0, r0, sl
 8006886:	fa03 f000 	lsl.w	r0, r3, r0
 800688a:	9b04      	ldr	r3, [sp, #16]
 800688c:	3401      	adds	r4, #1
 800688e:	4303      	orrs	r3, r0
 8006890:	9304      	str	r3, [sp, #16]
 8006892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006896:	2206      	movs	r2, #6
 8006898:	4826      	ldr	r0, [pc, #152]	; (8006934 <_svfiprintf_r+0x1f4>)
 800689a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800689e:	f000 fe31 	bl	8007504 <memchr>
 80068a2:	2800      	cmp	r0, #0
 80068a4:	d038      	beq.n	8006918 <_svfiprintf_r+0x1d8>
 80068a6:	4b24      	ldr	r3, [pc, #144]	; (8006938 <_svfiprintf_r+0x1f8>)
 80068a8:	bb1b      	cbnz	r3, 80068f2 <_svfiprintf_r+0x1b2>
 80068aa:	9b03      	ldr	r3, [sp, #12]
 80068ac:	3307      	adds	r3, #7
 80068ae:	f023 0307 	bic.w	r3, r3, #7
 80068b2:	3308      	adds	r3, #8
 80068b4:	9303      	str	r3, [sp, #12]
 80068b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068b8:	4433      	add	r3, r6
 80068ba:	9309      	str	r3, [sp, #36]	; 0x24
 80068bc:	e767      	b.n	800678e <_svfiprintf_r+0x4e>
 80068be:	460c      	mov	r4, r1
 80068c0:	2001      	movs	r0, #1
 80068c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80068c6:	e7a5      	b.n	8006814 <_svfiprintf_r+0xd4>
 80068c8:	2300      	movs	r3, #0
 80068ca:	f04f 0c0a 	mov.w	ip, #10
 80068ce:	4619      	mov	r1, r3
 80068d0:	3401      	adds	r4, #1
 80068d2:	9305      	str	r3, [sp, #20]
 80068d4:	4620      	mov	r0, r4
 80068d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068da:	3a30      	subs	r2, #48	; 0x30
 80068dc:	2a09      	cmp	r2, #9
 80068de:	d903      	bls.n	80068e8 <_svfiprintf_r+0x1a8>
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d0c5      	beq.n	8006870 <_svfiprintf_r+0x130>
 80068e4:	9105      	str	r1, [sp, #20]
 80068e6:	e7c3      	b.n	8006870 <_svfiprintf_r+0x130>
 80068e8:	4604      	mov	r4, r0
 80068ea:	2301      	movs	r3, #1
 80068ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80068f0:	e7f0      	b.n	80068d4 <_svfiprintf_r+0x194>
 80068f2:	ab03      	add	r3, sp, #12
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	462a      	mov	r2, r5
 80068f8:	4638      	mov	r0, r7
 80068fa:	4b10      	ldr	r3, [pc, #64]	; (800693c <_svfiprintf_r+0x1fc>)
 80068fc:	a904      	add	r1, sp, #16
 80068fe:	f3af 8000 	nop.w
 8006902:	1c42      	adds	r2, r0, #1
 8006904:	4606      	mov	r6, r0
 8006906:	d1d6      	bne.n	80068b6 <_svfiprintf_r+0x176>
 8006908:	89ab      	ldrh	r3, [r5, #12]
 800690a:	065b      	lsls	r3, r3, #25
 800690c:	f53f af2c 	bmi.w	8006768 <_svfiprintf_r+0x28>
 8006910:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006912:	b01d      	add	sp, #116	; 0x74
 8006914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006918:	ab03      	add	r3, sp, #12
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	462a      	mov	r2, r5
 800691e:	4638      	mov	r0, r7
 8006920:	4b06      	ldr	r3, [pc, #24]	; (800693c <_svfiprintf_r+0x1fc>)
 8006922:	a904      	add	r1, sp, #16
 8006924:	f000 f9d4 	bl	8006cd0 <_printf_i>
 8006928:	e7eb      	b.n	8006902 <_svfiprintf_r+0x1c2>
 800692a:	bf00      	nop
 800692c:	0800884a 	.word	0x0800884a
 8006930:	08008850 	.word	0x08008850
 8006934:	08008854 	.word	0x08008854
 8006938:	00000000 	.word	0x00000000
 800693c:	08006689 	.word	0x08006689

08006940 <__sfputc_r>:
 8006940:	6893      	ldr	r3, [r2, #8]
 8006942:	b410      	push	{r4}
 8006944:	3b01      	subs	r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	6093      	str	r3, [r2, #8]
 800694a:	da07      	bge.n	800695c <__sfputc_r+0x1c>
 800694c:	6994      	ldr	r4, [r2, #24]
 800694e:	42a3      	cmp	r3, r4
 8006950:	db01      	blt.n	8006956 <__sfputc_r+0x16>
 8006952:	290a      	cmp	r1, #10
 8006954:	d102      	bne.n	800695c <__sfputc_r+0x1c>
 8006956:	bc10      	pop	{r4}
 8006958:	f000 baf0 	b.w	8006f3c <__swbuf_r>
 800695c:	6813      	ldr	r3, [r2, #0]
 800695e:	1c58      	adds	r0, r3, #1
 8006960:	6010      	str	r0, [r2, #0]
 8006962:	7019      	strb	r1, [r3, #0]
 8006964:	4608      	mov	r0, r1
 8006966:	bc10      	pop	{r4}
 8006968:	4770      	bx	lr

0800696a <__sfputs_r>:
 800696a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800696c:	4606      	mov	r6, r0
 800696e:	460f      	mov	r7, r1
 8006970:	4614      	mov	r4, r2
 8006972:	18d5      	adds	r5, r2, r3
 8006974:	42ac      	cmp	r4, r5
 8006976:	d101      	bne.n	800697c <__sfputs_r+0x12>
 8006978:	2000      	movs	r0, #0
 800697a:	e007      	b.n	800698c <__sfputs_r+0x22>
 800697c:	463a      	mov	r2, r7
 800697e:	4630      	mov	r0, r6
 8006980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006984:	f7ff ffdc 	bl	8006940 <__sfputc_r>
 8006988:	1c43      	adds	r3, r0, #1
 800698a:	d1f3      	bne.n	8006974 <__sfputs_r+0xa>
 800698c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006990 <_vfiprintf_r>:
 8006990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006994:	460d      	mov	r5, r1
 8006996:	4614      	mov	r4, r2
 8006998:	4698      	mov	r8, r3
 800699a:	4606      	mov	r6, r0
 800699c:	b09d      	sub	sp, #116	; 0x74
 800699e:	b118      	cbz	r0, 80069a8 <_vfiprintf_r+0x18>
 80069a0:	6983      	ldr	r3, [r0, #24]
 80069a2:	b90b      	cbnz	r3, 80069a8 <_vfiprintf_r+0x18>
 80069a4:	f000 fca8 	bl	80072f8 <__sinit>
 80069a8:	4b89      	ldr	r3, [pc, #548]	; (8006bd0 <_vfiprintf_r+0x240>)
 80069aa:	429d      	cmp	r5, r3
 80069ac:	d11b      	bne.n	80069e6 <_vfiprintf_r+0x56>
 80069ae:	6875      	ldr	r5, [r6, #4]
 80069b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069b2:	07d9      	lsls	r1, r3, #31
 80069b4:	d405      	bmi.n	80069c2 <_vfiprintf_r+0x32>
 80069b6:	89ab      	ldrh	r3, [r5, #12]
 80069b8:	059a      	lsls	r2, r3, #22
 80069ba:	d402      	bmi.n	80069c2 <_vfiprintf_r+0x32>
 80069bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069be:	f000 fd39 	bl	8007434 <__retarget_lock_acquire_recursive>
 80069c2:	89ab      	ldrh	r3, [r5, #12]
 80069c4:	071b      	lsls	r3, r3, #28
 80069c6:	d501      	bpl.n	80069cc <_vfiprintf_r+0x3c>
 80069c8:	692b      	ldr	r3, [r5, #16]
 80069ca:	b9eb      	cbnz	r3, 8006a08 <_vfiprintf_r+0x78>
 80069cc:	4629      	mov	r1, r5
 80069ce:	4630      	mov	r0, r6
 80069d0:	f000 fb06 	bl	8006fe0 <__swsetup_r>
 80069d4:	b1c0      	cbz	r0, 8006a08 <_vfiprintf_r+0x78>
 80069d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069d8:	07dc      	lsls	r4, r3, #31
 80069da:	d50e      	bpl.n	80069fa <_vfiprintf_r+0x6a>
 80069dc:	f04f 30ff 	mov.w	r0, #4294967295
 80069e0:	b01d      	add	sp, #116	; 0x74
 80069e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e6:	4b7b      	ldr	r3, [pc, #492]	; (8006bd4 <_vfiprintf_r+0x244>)
 80069e8:	429d      	cmp	r5, r3
 80069ea:	d101      	bne.n	80069f0 <_vfiprintf_r+0x60>
 80069ec:	68b5      	ldr	r5, [r6, #8]
 80069ee:	e7df      	b.n	80069b0 <_vfiprintf_r+0x20>
 80069f0:	4b79      	ldr	r3, [pc, #484]	; (8006bd8 <_vfiprintf_r+0x248>)
 80069f2:	429d      	cmp	r5, r3
 80069f4:	bf08      	it	eq
 80069f6:	68f5      	ldreq	r5, [r6, #12]
 80069f8:	e7da      	b.n	80069b0 <_vfiprintf_r+0x20>
 80069fa:	89ab      	ldrh	r3, [r5, #12]
 80069fc:	0598      	lsls	r0, r3, #22
 80069fe:	d4ed      	bmi.n	80069dc <_vfiprintf_r+0x4c>
 8006a00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a02:	f000 fd18 	bl	8007436 <__retarget_lock_release_recursive>
 8006a06:	e7e9      	b.n	80069dc <_vfiprintf_r+0x4c>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a0c:	2320      	movs	r3, #32
 8006a0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a12:	2330      	movs	r3, #48	; 0x30
 8006a14:	f04f 0901 	mov.w	r9, #1
 8006a18:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a1c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006bdc <_vfiprintf_r+0x24c>
 8006a20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a24:	4623      	mov	r3, r4
 8006a26:	469a      	mov	sl, r3
 8006a28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a2c:	b10a      	cbz	r2, 8006a32 <_vfiprintf_r+0xa2>
 8006a2e:	2a25      	cmp	r2, #37	; 0x25
 8006a30:	d1f9      	bne.n	8006a26 <_vfiprintf_r+0x96>
 8006a32:	ebba 0b04 	subs.w	fp, sl, r4
 8006a36:	d00b      	beq.n	8006a50 <_vfiprintf_r+0xc0>
 8006a38:	465b      	mov	r3, fp
 8006a3a:	4622      	mov	r2, r4
 8006a3c:	4629      	mov	r1, r5
 8006a3e:	4630      	mov	r0, r6
 8006a40:	f7ff ff93 	bl	800696a <__sfputs_r>
 8006a44:	3001      	adds	r0, #1
 8006a46:	f000 80aa 	beq.w	8006b9e <_vfiprintf_r+0x20e>
 8006a4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a4c:	445a      	add	r2, fp
 8006a4e:	9209      	str	r2, [sp, #36]	; 0x24
 8006a50:	f89a 3000 	ldrb.w	r3, [sl]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 80a2 	beq.w	8006b9e <_vfiprintf_r+0x20e>
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a64:	f10a 0a01 	add.w	sl, sl, #1
 8006a68:	9304      	str	r3, [sp, #16]
 8006a6a:	9307      	str	r3, [sp, #28]
 8006a6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a70:	931a      	str	r3, [sp, #104]	; 0x68
 8006a72:	4654      	mov	r4, sl
 8006a74:	2205      	movs	r2, #5
 8006a76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a7a:	4858      	ldr	r0, [pc, #352]	; (8006bdc <_vfiprintf_r+0x24c>)
 8006a7c:	f000 fd42 	bl	8007504 <memchr>
 8006a80:	9a04      	ldr	r2, [sp, #16]
 8006a82:	b9d8      	cbnz	r0, 8006abc <_vfiprintf_r+0x12c>
 8006a84:	06d1      	lsls	r1, r2, #27
 8006a86:	bf44      	itt	mi
 8006a88:	2320      	movmi	r3, #32
 8006a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a8e:	0713      	lsls	r3, r2, #28
 8006a90:	bf44      	itt	mi
 8006a92:	232b      	movmi	r3, #43	; 0x2b
 8006a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a98:	f89a 3000 	ldrb.w	r3, [sl]
 8006a9c:	2b2a      	cmp	r3, #42	; 0x2a
 8006a9e:	d015      	beq.n	8006acc <_vfiprintf_r+0x13c>
 8006aa0:	4654      	mov	r4, sl
 8006aa2:	2000      	movs	r0, #0
 8006aa4:	f04f 0c0a 	mov.w	ip, #10
 8006aa8:	9a07      	ldr	r2, [sp, #28]
 8006aaa:	4621      	mov	r1, r4
 8006aac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ab0:	3b30      	subs	r3, #48	; 0x30
 8006ab2:	2b09      	cmp	r3, #9
 8006ab4:	d94e      	bls.n	8006b54 <_vfiprintf_r+0x1c4>
 8006ab6:	b1b0      	cbz	r0, 8006ae6 <_vfiprintf_r+0x156>
 8006ab8:	9207      	str	r2, [sp, #28]
 8006aba:	e014      	b.n	8006ae6 <_vfiprintf_r+0x156>
 8006abc:	eba0 0308 	sub.w	r3, r0, r8
 8006ac0:	fa09 f303 	lsl.w	r3, r9, r3
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	46a2      	mov	sl, r4
 8006ac8:	9304      	str	r3, [sp, #16]
 8006aca:	e7d2      	b.n	8006a72 <_vfiprintf_r+0xe2>
 8006acc:	9b03      	ldr	r3, [sp, #12]
 8006ace:	1d19      	adds	r1, r3, #4
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	9103      	str	r1, [sp, #12]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	bfbb      	ittet	lt
 8006ad8:	425b      	neglt	r3, r3
 8006ada:	f042 0202 	orrlt.w	r2, r2, #2
 8006ade:	9307      	strge	r3, [sp, #28]
 8006ae0:	9307      	strlt	r3, [sp, #28]
 8006ae2:	bfb8      	it	lt
 8006ae4:	9204      	strlt	r2, [sp, #16]
 8006ae6:	7823      	ldrb	r3, [r4, #0]
 8006ae8:	2b2e      	cmp	r3, #46	; 0x2e
 8006aea:	d10c      	bne.n	8006b06 <_vfiprintf_r+0x176>
 8006aec:	7863      	ldrb	r3, [r4, #1]
 8006aee:	2b2a      	cmp	r3, #42	; 0x2a
 8006af0:	d135      	bne.n	8006b5e <_vfiprintf_r+0x1ce>
 8006af2:	9b03      	ldr	r3, [sp, #12]
 8006af4:	3402      	adds	r4, #2
 8006af6:	1d1a      	adds	r2, r3, #4
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	9203      	str	r2, [sp, #12]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	bfb8      	it	lt
 8006b00:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b04:	9305      	str	r3, [sp, #20]
 8006b06:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006be0 <_vfiprintf_r+0x250>
 8006b0a:	2203      	movs	r2, #3
 8006b0c:	4650      	mov	r0, sl
 8006b0e:	7821      	ldrb	r1, [r4, #0]
 8006b10:	f000 fcf8 	bl	8007504 <memchr>
 8006b14:	b140      	cbz	r0, 8006b28 <_vfiprintf_r+0x198>
 8006b16:	2340      	movs	r3, #64	; 0x40
 8006b18:	eba0 000a 	sub.w	r0, r0, sl
 8006b1c:	fa03 f000 	lsl.w	r0, r3, r0
 8006b20:	9b04      	ldr	r3, [sp, #16]
 8006b22:	3401      	adds	r4, #1
 8006b24:	4303      	orrs	r3, r0
 8006b26:	9304      	str	r3, [sp, #16]
 8006b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b2c:	2206      	movs	r2, #6
 8006b2e:	482d      	ldr	r0, [pc, #180]	; (8006be4 <_vfiprintf_r+0x254>)
 8006b30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b34:	f000 fce6 	bl	8007504 <memchr>
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	d03f      	beq.n	8006bbc <_vfiprintf_r+0x22c>
 8006b3c:	4b2a      	ldr	r3, [pc, #168]	; (8006be8 <_vfiprintf_r+0x258>)
 8006b3e:	bb1b      	cbnz	r3, 8006b88 <_vfiprintf_r+0x1f8>
 8006b40:	9b03      	ldr	r3, [sp, #12]
 8006b42:	3307      	adds	r3, #7
 8006b44:	f023 0307 	bic.w	r3, r3, #7
 8006b48:	3308      	adds	r3, #8
 8006b4a:	9303      	str	r3, [sp, #12]
 8006b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b4e:	443b      	add	r3, r7
 8006b50:	9309      	str	r3, [sp, #36]	; 0x24
 8006b52:	e767      	b.n	8006a24 <_vfiprintf_r+0x94>
 8006b54:	460c      	mov	r4, r1
 8006b56:	2001      	movs	r0, #1
 8006b58:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b5c:	e7a5      	b.n	8006aaa <_vfiprintf_r+0x11a>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	f04f 0c0a 	mov.w	ip, #10
 8006b64:	4619      	mov	r1, r3
 8006b66:	3401      	adds	r4, #1
 8006b68:	9305      	str	r3, [sp, #20]
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b70:	3a30      	subs	r2, #48	; 0x30
 8006b72:	2a09      	cmp	r2, #9
 8006b74:	d903      	bls.n	8006b7e <_vfiprintf_r+0x1ee>
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d0c5      	beq.n	8006b06 <_vfiprintf_r+0x176>
 8006b7a:	9105      	str	r1, [sp, #20]
 8006b7c:	e7c3      	b.n	8006b06 <_vfiprintf_r+0x176>
 8006b7e:	4604      	mov	r4, r0
 8006b80:	2301      	movs	r3, #1
 8006b82:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b86:	e7f0      	b.n	8006b6a <_vfiprintf_r+0x1da>
 8006b88:	ab03      	add	r3, sp, #12
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	462a      	mov	r2, r5
 8006b8e:	4630      	mov	r0, r6
 8006b90:	4b16      	ldr	r3, [pc, #88]	; (8006bec <_vfiprintf_r+0x25c>)
 8006b92:	a904      	add	r1, sp, #16
 8006b94:	f3af 8000 	nop.w
 8006b98:	4607      	mov	r7, r0
 8006b9a:	1c78      	adds	r0, r7, #1
 8006b9c:	d1d6      	bne.n	8006b4c <_vfiprintf_r+0x1bc>
 8006b9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ba0:	07d9      	lsls	r1, r3, #31
 8006ba2:	d405      	bmi.n	8006bb0 <_vfiprintf_r+0x220>
 8006ba4:	89ab      	ldrh	r3, [r5, #12]
 8006ba6:	059a      	lsls	r2, r3, #22
 8006ba8:	d402      	bmi.n	8006bb0 <_vfiprintf_r+0x220>
 8006baa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bac:	f000 fc43 	bl	8007436 <__retarget_lock_release_recursive>
 8006bb0:	89ab      	ldrh	r3, [r5, #12]
 8006bb2:	065b      	lsls	r3, r3, #25
 8006bb4:	f53f af12 	bmi.w	80069dc <_vfiprintf_r+0x4c>
 8006bb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bba:	e711      	b.n	80069e0 <_vfiprintf_r+0x50>
 8006bbc:	ab03      	add	r3, sp, #12
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	462a      	mov	r2, r5
 8006bc2:	4630      	mov	r0, r6
 8006bc4:	4b09      	ldr	r3, [pc, #36]	; (8006bec <_vfiprintf_r+0x25c>)
 8006bc6:	a904      	add	r1, sp, #16
 8006bc8:	f000 f882 	bl	8006cd0 <_printf_i>
 8006bcc:	e7e4      	b.n	8006b98 <_vfiprintf_r+0x208>
 8006bce:	bf00      	nop
 8006bd0:	080088a0 	.word	0x080088a0
 8006bd4:	080088c0 	.word	0x080088c0
 8006bd8:	08008880 	.word	0x08008880
 8006bdc:	0800884a 	.word	0x0800884a
 8006be0:	08008850 	.word	0x08008850
 8006be4:	08008854 	.word	0x08008854
 8006be8:	00000000 	.word	0x00000000
 8006bec:	0800696b 	.word	0x0800696b

08006bf0 <_printf_common>:
 8006bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bf4:	4616      	mov	r6, r2
 8006bf6:	4699      	mov	r9, r3
 8006bf8:	688a      	ldr	r2, [r1, #8]
 8006bfa:	690b      	ldr	r3, [r1, #16]
 8006bfc:	4607      	mov	r7, r0
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	bfb8      	it	lt
 8006c02:	4613      	movlt	r3, r2
 8006c04:	6033      	str	r3, [r6, #0]
 8006c06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c0a:	460c      	mov	r4, r1
 8006c0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c10:	b10a      	cbz	r2, 8006c16 <_printf_common+0x26>
 8006c12:	3301      	adds	r3, #1
 8006c14:	6033      	str	r3, [r6, #0]
 8006c16:	6823      	ldr	r3, [r4, #0]
 8006c18:	0699      	lsls	r1, r3, #26
 8006c1a:	bf42      	ittt	mi
 8006c1c:	6833      	ldrmi	r3, [r6, #0]
 8006c1e:	3302      	addmi	r3, #2
 8006c20:	6033      	strmi	r3, [r6, #0]
 8006c22:	6825      	ldr	r5, [r4, #0]
 8006c24:	f015 0506 	ands.w	r5, r5, #6
 8006c28:	d106      	bne.n	8006c38 <_printf_common+0x48>
 8006c2a:	f104 0a19 	add.w	sl, r4, #25
 8006c2e:	68e3      	ldr	r3, [r4, #12]
 8006c30:	6832      	ldr	r2, [r6, #0]
 8006c32:	1a9b      	subs	r3, r3, r2
 8006c34:	42ab      	cmp	r3, r5
 8006c36:	dc28      	bgt.n	8006c8a <_printf_common+0x9a>
 8006c38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c3c:	1e13      	subs	r3, r2, #0
 8006c3e:	6822      	ldr	r2, [r4, #0]
 8006c40:	bf18      	it	ne
 8006c42:	2301      	movne	r3, #1
 8006c44:	0692      	lsls	r2, r2, #26
 8006c46:	d42d      	bmi.n	8006ca4 <_printf_common+0xb4>
 8006c48:	4649      	mov	r1, r9
 8006c4a:	4638      	mov	r0, r7
 8006c4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c50:	47c0      	blx	r8
 8006c52:	3001      	adds	r0, #1
 8006c54:	d020      	beq.n	8006c98 <_printf_common+0xa8>
 8006c56:	6823      	ldr	r3, [r4, #0]
 8006c58:	68e5      	ldr	r5, [r4, #12]
 8006c5a:	f003 0306 	and.w	r3, r3, #6
 8006c5e:	2b04      	cmp	r3, #4
 8006c60:	bf18      	it	ne
 8006c62:	2500      	movne	r5, #0
 8006c64:	6832      	ldr	r2, [r6, #0]
 8006c66:	f04f 0600 	mov.w	r6, #0
 8006c6a:	68a3      	ldr	r3, [r4, #8]
 8006c6c:	bf08      	it	eq
 8006c6e:	1aad      	subeq	r5, r5, r2
 8006c70:	6922      	ldr	r2, [r4, #16]
 8006c72:	bf08      	it	eq
 8006c74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	bfc4      	itt	gt
 8006c7c:	1a9b      	subgt	r3, r3, r2
 8006c7e:	18ed      	addgt	r5, r5, r3
 8006c80:	341a      	adds	r4, #26
 8006c82:	42b5      	cmp	r5, r6
 8006c84:	d11a      	bne.n	8006cbc <_printf_common+0xcc>
 8006c86:	2000      	movs	r0, #0
 8006c88:	e008      	b.n	8006c9c <_printf_common+0xac>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	4652      	mov	r2, sl
 8006c8e:	4649      	mov	r1, r9
 8006c90:	4638      	mov	r0, r7
 8006c92:	47c0      	blx	r8
 8006c94:	3001      	adds	r0, #1
 8006c96:	d103      	bne.n	8006ca0 <_printf_common+0xb0>
 8006c98:	f04f 30ff 	mov.w	r0, #4294967295
 8006c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ca0:	3501      	adds	r5, #1
 8006ca2:	e7c4      	b.n	8006c2e <_printf_common+0x3e>
 8006ca4:	2030      	movs	r0, #48	; 0x30
 8006ca6:	18e1      	adds	r1, r4, r3
 8006ca8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006cac:	1c5a      	adds	r2, r3, #1
 8006cae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006cb2:	4422      	add	r2, r4
 8006cb4:	3302      	adds	r3, #2
 8006cb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006cba:	e7c5      	b.n	8006c48 <_printf_common+0x58>
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	4622      	mov	r2, r4
 8006cc0:	4649      	mov	r1, r9
 8006cc2:	4638      	mov	r0, r7
 8006cc4:	47c0      	blx	r8
 8006cc6:	3001      	adds	r0, #1
 8006cc8:	d0e6      	beq.n	8006c98 <_printf_common+0xa8>
 8006cca:	3601      	adds	r6, #1
 8006ccc:	e7d9      	b.n	8006c82 <_printf_common+0x92>
	...

08006cd0 <_printf_i>:
 8006cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd4:	7e0f      	ldrb	r7, [r1, #24]
 8006cd6:	4691      	mov	r9, r2
 8006cd8:	2f78      	cmp	r7, #120	; 0x78
 8006cda:	4680      	mov	r8, r0
 8006cdc:	460c      	mov	r4, r1
 8006cde:	469a      	mov	sl, r3
 8006ce0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ce2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ce6:	d807      	bhi.n	8006cf8 <_printf_i+0x28>
 8006ce8:	2f62      	cmp	r7, #98	; 0x62
 8006cea:	d80a      	bhi.n	8006d02 <_printf_i+0x32>
 8006cec:	2f00      	cmp	r7, #0
 8006cee:	f000 80d9 	beq.w	8006ea4 <_printf_i+0x1d4>
 8006cf2:	2f58      	cmp	r7, #88	; 0x58
 8006cf4:	f000 80a4 	beq.w	8006e40 <_printf_i+0x170>
 8006cf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d00:	e03a      	b.n	8006d78 <_printf_i+0xa8>
 8006d02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d06:	2b15      	cmp	r3, #21
 8006d08:	d8f6      	bhi.n	8006cf8 <_printf_i+0x28>
 8006d0a:	a101      	add	r1, pc, #4	; (adr r1, 8006d10 <_printf_i+0x40>)
 8006d0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d10:	08006d69 	.word	0x08006d69
 8006d14:	08006d7d 	.word	0x08006d7d
 8006d18:	08006cf9 	.word	0x08006cf9
 8006d1c:	08006cf9 	.word	0x08006cf9
 8006d20:	08006cf9 	.word	0x08006cf9
 8006d24:	08006cf9 	.word	0x08006cf9
 8006d28:	08006d7d 	.word	0x08006d7d
 8006d2c:	08006cf9 	.word	0x08006cf9
 8006d30:	08006cf9 	.word	0x08006cf9
 8006d34:	08006cf9 	.word	0x08006cf9
 8006d38:	08006cf9 	.word	0x08006cf9
 8006d3c:	08006e8b 	.word	0x08006e8b
 8006d40:	08006dad 	.word	0x08006dad
 8006d44:	08006e6d 	.word	0x08006e6d
 8006d48:	08006cf9 	.word	0x08006cf9
 8006d4c:	08006cf9 	.word	0x08006cf9
 8006d50:	08006ead 	.word	0x08006ead
 8006d54:	08006cf9 	.word	0x08006cf9
 8006d58:	08006dad 	.word	0x08006dad
 8006d5c:	08006cf9 	.word	0x08006cf9
 8006d60:	08006cf9 	.word	0x08006cf9
 8006d64:	08006e75 	.word	0x08006e75
 8006d68:	682b      	ldr	r3, [r5, #0]
 8006d6a:	1d1a      	adds	r2, r3, #4
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	602a      	str	r2, [r5, #0]
 8006d70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e0a4      	b.n	8006ec6 <_printf_i+0x1f6>
 8006d7c:	6820      	ldr	r0, [r4, #0]
 8006d7e:	6829      	ldr	r1, [r5, #0]
 8006d80:	0606      	lsls	r6, r0, #24
 8006d82:	f101 0304 	add.w	r3, r1, #4
 8006d86:	d50a      	bpl.n	8006d9e <_printf_i+0xce>
 8006d88:	680e      	ldr	r6, [r1, #0]
 8006d8a:	602b      	str	r3, [r5, #0]
 8006d8c:	2e00      	cmp	r6, #0
 8006d8e:	da03      	bge.n	8006d98 <_printf_i+0xc8>
 8006d90:	232d      	movs	r3, #45	; 0x2d
 8006d92:	4276      	negs	r6, r6
 8006d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d98:	230a      	movs	r3, #10
 8006d9a:	485e      	ldr	r0, [pc, #376]	; (8006f14 <_printf_i+0x244>)
 8006d9c:	e019      	b.n	8006dd2 <_printf_i+0x102>
 8006d9e:	680e      	ldr	r6, [r1, #0]
 8006da0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006da4:	602b      	str	r3, [r5, #0]
 8006da6:	bf18      	it	ne
 8006da8:	b236      	sxthne	r6, r6
 8006daa:	e7ef      	b.n	8006d8c <_printf_i+0xbc>
 8006dac:	682b      	ldr	r3, [r5, #0]
 8006dae:	6820      	ldr	r0, [r4, #0]
 8006db0:	1d19      	adds	r1, r3, #4
 8006db2:	6029      	str	r1, [r5, #0]
 8006db4:	0601      	lsls	r1, r0, #24
 8006db6:	d501      	bpl.n	8006dbc <_printf_i+0xec>
 8006db8:	681e      	ldr	r6, [r3, #0]
 8006dba:	e002      	b.n	8006dc2 <_printf_i+0xf2>
 8006dbc:	0646      	lsls	r6, r0, #25
 8006dbe:	d5fb      	bpl.n	8006db8 <_printf_i+0xe8>
 8006dc0:	881e      	ldrh	r6, [r3, #0]
 8006dc2:	2f6f      	cmp	r7, #111	; 0x6f
 8006dc4:	bf0c      	ite	eq
 8006dc6:	2308      	moveq	r3, #8
 8006dc8:	230a      	movne	r3, #10
 8006dca:	4852      	ldr	r0, [pc, #328]	; (8006f14 <_printf_i+0x244>)
 8006dcc:	2100      	movs	r1, #0
 8006dce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006dd2:	6865      	ldr	r5, [r4, #4]
 8006dd4:	2d00      	cmp	r5, #0
 8006dd6:	bfa8      	it	ge
 8006dd8:	6821      	ldrge	r1, [r4, #0]
 8006dda:	60a5      	str	r5, [r4, #8]
 8006ddc:	bfa4      	itt	ge
 8006dde:	f021 0104 	bicge.w	r1, r1, #4
 8006de2:	6021      	strge	r1, [r4, #0]
 8006de4:	b90e      	cbnz	r6, 8006dea <_printf_i+0x11a>
 8006de6:	2d00      	cmp	r5, #0
 8006de8:	d04d      	beq.n	8006e86 <_printf_i+0x1b6>
 8006dea:	4615      	mov	r5, r2
 8006dec:	fbb6 f1f3 	udiv	r1, r6, r3
 8006df0:	fb03 6711 	mls	r7, r3, r1, r6
 8006df4:	5dc7      	ldrb	r7, [r0, r7]
 8006df6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006dfa:	4637      	mov	r7, r6
 8006dfc:	42bb      	cmp	r3, r7
 8006dfe:	460e      	mov	r6, r1
 8006e00:	d9f4      	bls.n	8006dec <_printf_i+0x11c>
 8006e02:	2b08      	cmp	r3, #8
 8006e04:	d10b      	bne.n	8006e1e <_printf_i+0x14e>
 8006e06:	6823      	ldr	r3, [r4, #0]
 8006e08:	07de      	lsls	r6, r3, #31
 8006e0a:	d508      	bpl.n	8006e1e <_printf_i+0x14e>
 8006e0c:	6923      	ldr	r3, [r4, #16]
 8006e0e:	6861      	ldr	r1, [r4, #4]
 8006e10:	4299      	cmp	r1, r3
 8006e12:	bfde      	ittt	le
 8006e14:	2330      	movle	r3, #48	; 0x30
 8006e16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e1e:	1b52      	subs	r2, r2, r5
 8006e20:	6122      	str	r2, [r4, #16]
 8006e22:	464b      	mov	r3, r9
 8006e24:	4621      	mov	r1, r4
 8006e26:	4640      	mov	r0, r8
 8006e28:	f8cd a000 	str.w	sl, [sp]
 8006e2c:	aa03      	add	r2, sp, #12
 8006e2e:	f7ff fedf 	bl	8006bf0 <_printf_common>
 8006e32:	3001      	adds	r0, #1
 8006e34:	d14c      	bne.n	8006ed0 <_printf_i+0x200>
 8006e36:	f04f 30ff 	mov.w	r0, #4294967295
 8006e3a:	b004      	add	sp, #16
 8006e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e40:	4834      	ldr	r0, [pc, #208]	; (8006f14 <_printf_i+0x244>)
 8006e42:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006e46:	6829      	ldr	r1, [r5, #0]
 8006e48:	6823      	ldr	r3, [r4, #0]
 8006e4a:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e4e:	6029      	str	r1, [r5, #0]
 8006e50:	061d      	lsls	r5, r3, #24
 8006e52:	d514      	bpl.n	8006e7e <_printf_i+0x1ae>
 8006e54:	07df      	lsls	r7, r3, #31
 8006e56:	bf44      	itt	mi
 8006e58:	f043 0320 	orrmi.w	r3, r3, #32
 8006e5c:	6023      	strmi	r3, [r4, #0]
 8006e5e:	b91e      	cbnz	r6, 8006e68 <_printf_i+0x198>
 8006e60:	6823      	ldr	r3, [r4, #0]
 8006e62:	f023 0320 	bic.w	r3, r3, #32
 8006e66:	6023      	str	r3, [r4, #0]
 8006e68:	2310      	movs	r3, #16
 8006e6a:	e7af      	b.n	8006dcc <_printf_i+0xfc>
 8006e6c:	6823      	ldr	r3, [r4, #0]
 8006e6e:	f043 0320 	orr.w	r3, r3, #32
 8006e72:	6023      	str	r3, [r4, #0]
 8006e74:	2378      	movs	r3, #120	; 0x78
 8006e76:	4828      	ldr	r0, [pc, #160]	; (8006f18 <_printf_i+0x248>)
 8006e78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e7c:	e7e3      	b.n	8006e46 <_printf_i+0x176>
 8006e7e:	0659      	lsls	r1, r3, #25
 8006e80:	bf48      	it	mi
 8006e82:	b2b6      	uxthmi	r6, r6
 8006e84:	e7e6      	b.n	8006e54 <_printf_i+0x184>
 8006e86:	4615      	mov	r5, r2
 8006e88:	e7bb      	b.n	8006e02 <_printf_i+0x132>
 8006e8a:	682b      	ldr	r3, [r5, #0]
 8006e8c:	6826      	ldr	r6, [r4, #0]
 8006e8e:	1d18      	adds	r0, r3, #4
 8006e90:	6961      	ldr	r1, [r4, #20]
 8006e92:	6028      	str	r0, [r5, #0]
 8006e94:	0635      	lsls	r5, r6, #24
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	d501      	bpl.n	8006e9e <_printf_i+0x1ce>
 8006e9a:	6019      	str	r1, [r3, #0]
 8006e9c:	e002      	b.n	8006ea4 <_printf_i+0x1d4>
 8006e9e:	0670      	lsls	r0, r6, #25
 8006ea0:	d5fb      	bpl.n	8006e9a <_printf_i+0x1ca>
 8006ea2:	8019      	strh	r1, [r3, #0]
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	4615      	mov	r5, r2
 8006ea8:	6123      	str	r3, [r4, #16]
 8006eaa:	e7ba      	b.n	8006e22 <_printf_i+0x152>
 8006eac:	682b      	ldr	r3, [r5, #0]
 8006eae:	2100      	movs	r1, #0
 8006eb0:	1d1a      	adds	r2, r3, #4
 8006eb2:	602a      	str	r2, [r5, #0]
 8006eb4:	681d      	ldr	r5, [r3, #0]
 8006eb6:	6862      	ldr	r2, [r4, #4]
 8006eb8:	4628      	mov	r0, r5
 8006eba:	f000 fb23 	bl	8007504 <memchr>
 8006ebe:	b108      	cbz	r0, 8006ec4 <_printf_i+0x1f4>
 8006ec0:	1b40      	subs	r0, r0, r5
 8006ec2:	6060      	str	r0, [r4, #4]
 8006ec4:	6863      	ldr	r3, [r4, #4]
 8006ec6:	6123      	str	r3, [r4, #16]
 8006ec8:	2300      	movs	r3, #0
 8006eca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ece:	e7a8      	b.n	8006e22 <_printf_i+0x152>
 8006ed0:	462a      	mov	r2, r5
 8006ed2:	4649      	mov	r1, r9
 8006ed4:	4640      	mov	r0, r8
 8006ed6:	6923      	ldr	r3, [r4, #16]
 8006ed8:	47d0      	blx	sl
 8006eda:	3001      	adds	r0, #1
 8006edc:	d0ab      	beq.n	8006e36 <_printf_i+0x166>
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	079b      	lsls	r3, r3, #30
 8006ee2:	d413      	bmi.n	8006f0c <_printf_i+0x23c>
 8006ee4:	68e0      	ldr	r0, [r4, #12]
 8006ee6:	9b03      	ldr	r3, [sp, #12]
 8006ee8:	4298      	cmp	r0, r3
 8006eea:	bfb8      	it	lt
 8006eec:	4618      	movlt	r0, r3
 8006eee:	e7a4      	b.n	8006e3a <_printf_i+0x16a>
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	4632      	mov	r2, r6
 8006ef4:	4649      	mov	r1, r9
 8006ef6:	4640      	mov	r0, r8
 8006ef8:	47d0      	blx	sl
 8006efa:	3001      	adds	r0, #1
 8006efc:	d09b      	beq.n	8006e36 <_printf_i+0x166>
 8006efe:	3501      	adds	r5, #1
 8006f00:	68e3      	ldr	r3, [r4, #12]
 8006f02:	9903      	ldr	r1, [sp, #12]
 8006f04:	1a5b      	subs	r3, r3, r1
 8006f06:	42ab      	cmp	r3, r5
 8006f08:	dcf2      	bgt.n	8006ef0 <_printf_i+0x220>
 8006f0a:	e7eb      	b.n	8006ee4 <_printf_i+0x214>
 8006f0c:	2500      	movs	r5, #0
 8006f0e:	f104 0619 	add.w	r6, r4, #25
 8006f12:	e7f5      	b.n	8006f00 <_printf_i+0x230>
 8006f14:	0800885b 	.word	0x0800885b
 8006f18:	0800886c 	.word	0x0800886c

08006f1c <_sbrk_r>:
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	2300      	movs	r3, #0
 8006f20:	4d05      	ldr	r5, [pc, #20]	; (8006f38 <_sbrk_r+0x1c>)
 8006f22:	4604      	mov	r4, r0
 8006f24:	4608      	mov	r0, r1
 8006f26:	602b      	str	r3, [r5, #0]
 8006f28:	f7fb fa8e 	bl	8002448 <_sbrk>
 8006f2c:	1c43      	adds	r3, r0, #1
 8006f2e:	d102      	bne.n	8006f36 <_sbrk_r+0x1a>
 8006f30:	682b      	ldr	r3, [r5, #0]
 8006f32:	b103      	cbz	r3, 8006f36 <_sbrk_r+0x1a>
 8006f34:	6023      	str	r3, [r4, #0]
 8006f36:	bd38      	pop	{r3, r4, r5, pc}
 8006f38:	20001168 	.word	0x20001168

08006f3c <__swbuf_r>:
 8006f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3e:	460e      	mov	r6, r1
 8006f40:	4614      	mov	r4, r2
 8006f42:	4605      	mov	r5, r0
 8006f44:	b118      	cbz	r0, 8006f4e <__swbuf_r+0x12>
 8006f46:	6983      	ldr	r3, [r0, #24]
 8006f48:	b90b      	cbnz	r3, 8006f4e <__swbuf_r+0x12>
 8006f4a:	f000 f9d5 	bl	80072f8 <__sinit>
 8006f4e:	4b21      	ldr	r3, [pc, #132]	; (8006fd4 <__swbuf_r+0x98>)
 8006f50:	429c      	cmp	r4, r3
 8006f52:	d12b      	bne.n	8006fac <__swbuf_r+0x70>
 8006f54:	686c      	ldr	r4, [r5, #4]
 8006f56:	69a3      	ldr	r3, [r4, #24]
 8006f58:	60a3      	str	r3, [r4, #8]
 8006f5a:	89a3      	ldrh	r3, [r4, #12]
 8006f5c:	071a      	lsls	r2, r3, #28
 8006f5e:	d52f      	bpl.n	8006fc0 <__swbuf_r+0x84>
 8006f60:	6923      	ldr	r3, [r4, #16]
 8006f62:	b36b      	cbz	r3, 8006fc0 <__swbuf_r+0x84>
 8006f64:	6923      	ldr	r3, [r4, #16]
 8006f66:	6820      	ldr	r0, [r4, #0]
 8006f68:	b2f6      	uxtb	r6, r6
 8006f6a:	1ac0      	subs	r0, r0, r3
 8006f6c:	6963      	ldr	r3, [r4, #20]
 8006f6e:	4637      	mov	r7, r6
 8006f70:	4283      	cmp	r3, r0
 8006f72:	dc04      	bgt.n	8006f7e <__swbuf_r+0x42>
 8006f74:	4621      	mov	r1, r4
 8006f76:	4628      	mov	r0, r5
 8006f78:	f000 f92a 	bl	80071d0 <_fflush_r>
 8006f7c:	bb30      	cbnz	r0, 8006fcc <__swbuf_r+0x90>
 8006f7e:	68a3      	ldr	r3, [r4, #8]
 8006f80:	3001      	adds	r0, #1
 8006f82:	3b01      	subs	r3, #1
 8006f84:	60a3      	str	r3, [r4, #8]
 8006f86:	6823      	ldr	r3, [r4, #0]
 8006f88:	1c5a      	adds	r2, r3, #1
 8006f8a:	6022      	str	r2, [r4, #0]
 8006f8c:	701e      	strb	r6, [r3, #0]
 8006f8e:	6963      	ldr	r3, [r4, #20]
 8006f90:	4283      	cmp	r3, r0
 8006f92:	d004      	beq.n	8006f9e <__swbuf_r+0x62>
 8006f94:	89a3      	ldrh	r3, [r4, #12]
 8006f96:	07db      	lsls	r3, r3, #31
 8006f98:	d506      	bpl.n	8006fa8 <__swbuf_r+0x6c>
 8006f9a:	2e0a      	cmp	r6, #10
 8006f9c:	d104      	bne.n	8006fa8 <__swbuf_r+0x6c>
 8006f9e:	4621      	mov	r1, r4
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	f000 f915 	bl	80071d0 <_fflush_r>
 8006fa6:	b988      	cbnz	r0, 8006fcc <__swbuf_r+0x90>
 8006fa8:	4638      	mov	r0, r7
 8006faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fac:	4b0a      	ldr	r3, [pc, #40]	; (8006fd8 <__swbuf_r+0x9c>)
 8006fae:	429c      	cmp	r4, r3
 8006fb0:	d101      	bne.n	8006fb6 <__swbuf_r+0x7a>
 8006fb2:	68ac      	ldr	r4, [r5, #8]
 8006fb4:	e7cf      	b.n	8006f56 <__swbuf_r+0x1a>
 8006fb6:	4b09      	ldr	r3, [pc, #36]	; (8006fdc <__swbuf_r+0xa0>)
 8006fb8:	429c      	cmp	r4, r3
 8006fba:	bf08      	it	eq
 8006fbc:	68ec      	ldreq	r4, [r5, #12]
 8006fbe:	e7ca      	b.n	8006f56 <__swbuf_r+0x1a>
 8006fc0:	4621      	mov	r1, r4
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	f000 f80c 	bl	8006fe0 <__swsetup_r>
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	d0cb      	beq.n	8006f64 <__swbuf_r+0x28>
 8006fcc:	f04f 37ff 	mov.w	r7, #4294967295
 8006fd0:	e7ea      	b.n	8006fa8 <__swbuf_r+0x6c>
 8006fd2:	bf00      	nop
 8006fd4:	080088a0 	.word	0x080088a0
 8006fd8:	080088c0 	.word	0x080088c0
 8006fdc:	08008880 	.word	0x08008880

08006fe0 <__swsetup_r>:
 8006fe0:	4b32      	ldr	r3, [pc, #200]	; (80070ac <__swsetup_r+0xcc>)
 8006fe2:	b570      	push	{r4, r5, r6, lr}
 8006fe4:	681d      	ldr	r5, [r3, #0]
 8006fe6:	4606      	mov	r6, r0
 8006fe8:	460c      	mov	r4, r1
 8006fea:	b125      	cbz	r5, 8006ff6 <__swsetup_r+0x16>
 8006fec:	69ab      	ldr	r3, [r5, #24]
 8006fee:	b913      	cbnz	r3, 8006ff6 <__swsetup_r+0x16>
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	f000 f981 	bl	80072f8 <__sinit>
 8006ff6:	4b2e      	ldr	r3, [pc, #184]	; (80070b0 <__swsetup_r+0xd0>)
 8006ff8:	429c      	cmp	r4, r3
 8006ffa:	d10f      	bne.n	800701c <__swsetup_r+0x3c>
 8006ffc:	686c      	ldr	r4, [r5, #4]
 8006ffe:	89a3      	ldrh	r3, [r4, #12]
 8007000:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007004:	0719      	lsls	r1, r3, #28
 8007006:	d42c      	bmi.n	8007062 <__swsetup_r+0x82>
 8007008:	06dd      	lsls	r5, r3, #27
 800700a:	d411      	bmi.n	8007030 <__swsetup_r+0x50>
 800700c:	2309      	movs	r3, #9
 800700e:	6033      	str	r3, [r6, #0]
 8007010:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007014:	f04f 30ff 	mov.w	r0, #4294967295
 8007018:	81a3      	strh	r3, [r4, #12]
 800701a:	e03e      	b.n	800709a <__swsetup_r+0xba>
 800701c:	4b25      	ldr	r3, [pc, #148]	; (80070b4 <__swsetup_r+0xd4>)
 800701e:	429c      	cmp	r4, r3
 8007020:	d101      	bne.n	8007026 <__swsetup_r+0x46>
 8007022:	68ac      	ldr	r4, [r5, #8]
 8007024:	e7eb      	b.n	8006ffe <__swsetup_r+0x1e>
 8007026:	4b24      	ldr	r3, [pc, #144]	; (80070b8 <__swsetup_r+0xd8>)
 8007028:	429c      	cmp	r4, r3
 800702a:	bf08      	it	eq
 800702c:	68ec      	ldreq	r4, [r5, #12]
 800702e:	e7e6      	b.n	8006ffe <__swsetup_r+0x1e>
 8007030:	0758      	lsls	r0, r3, #29
 8007032:	d512      	bpl.n	800705a <__swsetup_r+0x7a>
 8007034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007036:	b141      	cbz	r1, 800704a <__swsetup_r+0x6a>
 8007038:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800703c:	4299      	cmp	r1, r3
 800703e:	d002      	beq.n	8007046 <__swsetup_r+0x66>
 8007040:	4630      	mov	r0, r6
 8007042:	f7ff fa45 	bl	80064d0 <_free_r>
 8007046:	2300      	movs	r3, #0
 8007048:	6363      	str	r3, [r4, #52]	; 0x34
 800704a:	89a3      	ldrh	r3, [r4, #12]
 800704c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007050:	81a3      	strh	r3, [r4, #12]
 8007052:	2300      	movs	r3, #0
 8007054:	6063      	str	r3, [r4, #4]
 8007056:	6923      	ldr	r3, [r4, #16]
 8007058:	6023      	str	r3, [r4, #0]
 800705a:	89a3      	ldrh	r3, [r4, #12]
 800705c:	f043 0308 	orr.w	r3, r3, #8
 8007060:	81a3      	strh	r3, [r4, #12]
 8007062:	6923      	ldr	r3, [r4, #16]
 8007064:	b94b      	cbnz	r3, 800707a <__swsetup_r+0x9a>
 8007066:	89a3      	ldrh	r3, [r4, #12]
 8007068:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800706c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007070:	d003      	beq.n	800707a <__swsetup_r+0x9a>
 8007072:	4621      	mov	r1, r4
 8007074:	4630      	mov	r0, r6
 8007076:	f000 fa05 	bl	8007484 <__smakebuf_r>
 800707a:	89a0      	ldrh	r0, [r4, #12]
 800707c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007080:	f010 0301 	ands.w	r3, r0, #1
 8007084:	d00a      	beq.n	800709c <__swsetup_r+0xbc>
 8007086:	2300      	movs	r3, #0
 8007088:	60a3      	str	r3, [r4, #8]
 800708a:	6963      	ldr	r3, [r4, #20]
 800708c:	425b      	negs	r3, r3
 800708e:	61a3      	str	r3, [r4, #24]
 8007090:	6923      	ldr	r3, [r4, #16]
 8007092:	b943      	cbnz	r3, 80070a6 <__swsetup_r+0xc6>
 8007094:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007098:	d1ba      	bne.n	8007010 <__swsetup_r+0x30>
 800709a:	bd70      	pop	{r4, r5, r6, pc}
 800709c:	0781      	lsls	r1, r0, #30
 800709e:	bf58      	it	pl
 80070a0:	6963      	ldrpl	r3, [r4, #20]
 80070a2:	60a3      	str	r3, [r4, #8]
 80070a4:	e7f4      	b.n	8007090 <__swsetup_r+0xb0>
 80070a6:	2000      	movs	r0, #0
 80070a8:	e7f7      	b.n	800709a <__swsetup_r+0xba>
 80070aa:	bf00      	nop
 80070ac:	2000001c 	.word	0x2000001c
 80070b0:	080088a0 	.word	0x080088a0
 80070b4:	080088c0 	.word	0x080088c0
 80070b8:	08008880 	.word	0x08008880

080070bc <abort>:
 80070bc:	2006      	movs	r0, #6
 80070be:	b508      	push	{r3, lr}
 80070c0:	f000 faac 	bl	800761c <raise>
 80070c4:	2001      	movs	r0, #1
 80070c6:	f7fb f94c 	bl	8002362 <_exit>
	...

080070cc <__sflush_r>:
 80070cc:	898a      	ldrh	r2, [r1, #12]
 80070ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d0:	4605      	mov	r5, r0
 80070d2:	0710      	lsls	r0, r2, #28
 80070d4:	460c      	mov	r4, r1
 80070d6:	d457      	bmi.n	8007188 <__sflush_r+0xbc>
 80070d8:	684b      	ldr	r3, [r1, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	dc04      	bgt.n	80070e8 <__sflush_r+0x1c>
 80070de:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	dc01      	bgt.n	80070e8 <__sflush_r+0x1c>
 80070e4:	2000      	movs	r0, #0
 80070e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070ea:	2e00      	cmp	r6, #0
 80070ec:	d0fa      	beq.n	80070e4 <__sflush_r+0x18>
 80070ee:	2300      	movs	r3, #0
 80070f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80070f4:	682f      	ldr	r7, [r5, #0]
 80070f6:	602b      	str	r3, [r5, #0]
 80070f8:	d032      	beq.n	8007160 <__sflush_r+0x94>
 80070fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80070fc:	89a3      	ldrh	r3, [r4, #12]
 80070fe:	075a      	lsls	r2, r3, #29
 8007100:	d505      	bpl.n	800710e <__sflush_r+0x42>
 8007102:	6863      	ldr	r3, [r4, #4]
 8007104:	1ac0      	subs	r0, r0, r3
 8007106:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007108:	b10b      	cbz	r3, 800710e <__sflush_r+0x42>
 800710a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800710c:	1ac0      	subs	r0, r0, r3
 800710e:	2300      	movs	r3, #0
 8007110:	4602      	mov	r2, r0
 8007112:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007114:	4628      	mov	r0, r5
 8007116:	6a21      	ldr	r1, [r4, #32]
 8007118:	47b0      	blx	r6
 800711a:	1c43      	adds	r3, r0, #1
 800711c:	89a3      	ldrh	r3, [r4, #12]
 800711e:	d106      	bne.n	800712e <__sflush_r+0x62>
 8007120:	6829      	ldr	r1, [r5, #0]
 8007122:	291d      	cmp	r1, #29
 8007124:	d82c      	bhi.n	8007180 <__sflush_r+0xb4>
 8007126:	4a29      	ldr	r2, [pc, #164]	; (80071cc <__sflush_r+0x100>)
 8007128:	40ca      	lsrs	r2, r1
 800712a:	07d6      	lsls	r6, r2, #31
 800712c:	d528      	bpl.n	8007180 <__sflush_r+0xb4>
 800712e:	2200      	movs	r2, #0
 8007130:	6062      	str	r2, [r4, #4]
 8007132:	6922      	ldr	r2, [r4, #16]
 8007134:	04d9      	lsls	r1, r3, #19
 8007136:	6022      	str	r2, [r4, #0]
 8007138:	d504      	bpl.n	8007144 <__sflush_r+0x78>
 800713a:	1c42      	adds	r2, r0, #1
 800713c:	d101      	bne.n	8007142 <__sflush_r+0x76>
 800713e:	682b      	ldr	r3, [r5, #0]
 8007140:	b903      	cbnz	r3, 8007144 <__sflush_r+0x78>
 8007142:	6560      	str	r0, [r4, #84]	; 0x54
 8007144:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007146:	602f      	str	r7, [r5, #0]
 8007148:	2900      	cmp	r1, #0
 800714a:	d0cb      	beq.n	80070e4 <__sflush_r+0x18>
 800714c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007150:	4299      	cmp	r1, r3
 8007152:	d002      	beq.n	800715a <__sflush_r+0x8e>
 8007154:	4628      	mov	r0, r5
 8007156:	f7ff f9bb 	bl	80064d0 <_free_r>
 800715a:	2000      	movs	r0, #0
 800715c:	6360      	str	r0, [r4, #52]	; 0x34
 800715e:	e7c2      	b.n	80070e6 <__sflush_r+0x1a>
 8007160:	6a21      	ldr	r1, [r4, #32]
 8007162:	2301      	movs	r3, #1
 8007164:	4628      	mov	r0, r5
 8007166:	47b0      	blx	r6
 8007168:	1c41      	adds	r1, r0, #1
 800716a:	d1c7      	bne.n	80070fc <__sflush_r+0x30>
 800716c:	682b      	ldr	r3, [r5, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d0c4      	beq.n	80070fc <__sflush_r+0x30>
 8007172:	2b1d      	cmp	r3, #29
 8007174:	d001      	beq.n	800717a <__sflush_r+0xae>
 8007176:	2b16      	cmp	r3, #22
 8007178:	d101      	bne.n	800717e <__sflush_r+0xb2>
 800717a:	602f      	str	r7, [r5, #0]
 800717c:	e7b2      	b.n	80070e4 <__sflush_r+0x18>
 800717e:	89a3      	ldrh	r3, [r4, #12]
 8007180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007184:	81a3      	strh	r3, [r4, #12]
 8007186:	e7ae      	b.n	80070e6 <__sflush_r+0x1a>
 8007188:	690f      	ldr	r7, [r1, #16]
 800718a:	2f00      	cmp	r7, #0
 800718c:	d0aa      	beq.n	80070e4 <__sflush_r+0x18>
 800718e:	0793      	lsls	r3, r2, #30
 8007190:	bf18      	it	ne
 8007192:	2300      	movne	r3, #0
 8007194:	680e      	ldr	r6, [r1, #0]
 8007196:	bf08      	it	eq
 8007198:	694b      	ldreq	r3, [r1, #20]
 800719a:	1bf6      	subs	r6, r6, r7
 800719c:	600f      	str	r7, [r1, #0]
 800719e:	608b      	str	r3, [r1, #8]
 80071a0:	2e00      	cmp	r6, #0
 80071a2:	dd9f      	ble.n	80070e4 <__sflush_r+0x18>
 80071a4:	4633      	mov	r3, r6
 80071a6:	463a      	mov	r2, r7
 80071a8:	4628      	mov	r0, r5
 80071aa:	6a21      	ldr	r1, [r4, #32]
 80071ac:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80071b0:	47e0      	blx	ip
 80071b2:	2800      	cmp	r0, #0
 80071b4:	dc06      	bgt.n	80071c4 <__sflush_r+0xf8>
 80071b6:	89a3      	ldrh	r3, [r4, #12]
 80071b8:	f04f 30ff 	mov.w	r0, #4294967295
 80071bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071c0:	81a3      	strh	r3, [r4, #12]
 80071c2:	e790      	b.n	80070e6 <__sflush_r+0x1a>
 80071c4:	4407      	add	r7, r0
 80071c6:	1a36      	subs	r6, r6, r0
 80071c8:	e7ea      	b.n	80071a0 <__sflush_r+0xd4>
 80071ca:	bf00      	nop
 80071cc:	20400001 	.word	0x20400001

080071d0 <_fflush_r>:
 80071d0:	b538      	push	{r3, r4, r5, lr}
 80071d2:	690b      	ldr	r3, [r1, #16]
 80071d4:	4605      	mov	r5, r0
 80071d6:	460c      	mov	r4, r1
 80071d8:	b913      	cbnz	r3, 80071e0 <_fflush_r+0x10>
 80071da:	2500      	movs	r5, #0
 80071dc:	4628      	mov	r0, r5
 80071de:	bd38      	pop	{r3, r4, r5, pc}
 80071e0:	b118      	cbz	r0, 80071ea <_fflush_r+0x1a>
 80071e2:	6983      	ldr	r3, [r0, #24]
 80071e4:	b90b      	cbnz	r3, 80071ea <_fflush_r+0x1a>
 80071e6:	f000 f887 	bl	80072f8 <__sinit>
 80071ea:	4b14      	ldr	r3, [pc, #80]	; (800723c <_fflush_r+0x6c>)
 80071ec:	429c      	cmp	r4, r3
 80071ee:	d11b      	bne.n	8007228 <_fflush_r+0x58>
 80071f0:	686c      	ldr	r4, [r5, #4]
 80071f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d0ef      	beq.n	80071da <_fflush_r+0xa>
 80071fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80071fc:	07d0      	lsls	r0, r2, #31
 80071fe:	d404      	bmi.n	800720a <_fflush_r+0x3a>
 8007200:	0599      	lsls	r1, r3, #22
 8007202:	d402      	bmi.n	800720a <_fflush_r+0x3a>
 8007204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007206:	f000 f915 	bl	8007434 <__retarget_lock_acquire_recursive>
 800720a:	4628      	mov	r0, r5
 800720c:	4621      	mov	r1, r4
 800720e:	f7ff ff5d 	bl	80070cc <__sflush_r>
 8007212:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007214:	4605      	mov	r5, r0
 8007216:	07da      	lsls	r2, r3, #31
 8007218:	d4e0      	bmi.n	80071dc <_fflush_r+0xc>
 800721a:	89a3      	ldrh	r3, [r4, #12]
 800721c:	059b      	lsls	r3, r3, #22
 800721e:	d4dd      	bmi.n	80071dc <_fflush_r+0xc>
 8007220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007222:	f000 f908 	bl	8007436 <__retarget_lock_release_recursive>
 8007226:	e7d9      	b.n	80071dc <_fflush_r+0xc>
 8007228:	4b05      	ldr	r3, [pc, #20]	; (8007240 <_fflush_r+0x70>)
 800722a:	429c      	cmp	r4, r3
 800722c:	d101      	bne.n	8007232 <_fflush_r+0x62>
 800722e:	68ac      	ldr	r4, [r5, #8]
 8007230:	e7df      	b.n	80071f2 <_fflush_r+0x22>
 8007232:	4b04      	ldr	r3, [pc, #16]	; (8007244 <_fflush_r+0x74>)
 8007234:	429c      	cmp	r4, r3
 8007236:	bf08      	it	eq
 8007238:	68ec      	ldreq	r4, [r5, #12]
 800723a:	e7da      	b.n	80071f2 <_fflush_r+0x22>
 800723c:	080088a0 	.word	0x080088a0
 8007240:	080088c0 	.word	0x080088c0
 8007244:	08008880 	.word	0x08008880

08007248 <std>:
 8007248:	2300      	movs	r3, #0
 800724a:	b510      	push	{r4, lr}
 800724c:	4604      	mov	r4, r0
 800724e:	e9c0 3300 	strd	r3, r3, [r0]
 8007252:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007256:	6083      	str	r3, [r0, #8]
 8007258:	8181      	strh	r1, [r0, #12]
 800725a:	6643      	str	r3, [r0, #100]	; 0x64
 800725c:	81c2      	strh	r2, [r0, #14]
 800725e:	6183      	str	r3, [r0, #24]
 8007260:	4619      	mov	r1, r3
 8007262:	2208      	movs	r2, #8
 8007264:	305c      	adds	r0, #92	; 0x5c
 8007266:	f7ff f83b 	bl	80062e0 <memset>
 800726a:	4b05      	ldr	r3, [pc, #20]	; (8007280 <std+0x38>)
 800726c:	6224      	str	r4, [r4, #32]
 800726e:	6263      	str	r3, [r4, #36]	; 0x24
 8007270:	4b04      	ldr	r3, [pc, #16]	; (8007284 <std+0x3c>)
 8007272:	62a3      	str	r3, [r4, #40]	; 0x28
 8007274:	4b04      	ldr	r3, [pc, #16]	; (8007288 <std+0x40>)
 8007276:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007278:	4b04      	ldr	r3, [pc, #16]	; (800728c <std+0x44>)
 800727a:	6323      	str	r3, [r4, #48]	; 0x30
 800727c:	bd10      	pop	{r4, pc}
 800727e:	bf00      	nop
 8007280:	08007655 	.word	0x08007655
 8007284:	08007677 	.word	0x08007677
 8007288:	080076af 	.word	0x080076af
 800728c:	080076d3 	.word	0x080076d3

08007290 <_cleanup_r>:
 8007290:	4901      	ldr	r1, [pc, #4]	; (8007298 <_cleanup_r+0x8>)
 8007292:	f000 b8af 	b.w	80073f4 <_fwalk_reent>
 8007296:	bf00      	nop
 8007298:	080071d1 	.word	0x080071d1

0800729c <__sfmoreglue>:
 800729c:	2268      	movs	r2, #104	; 0x68
 800729e:	b570      	push	{r4, r5, r6, lr}
 80072a0:	1e4d      	subs	r5, r1, #1
 80072a2:	4355      	muls	r5, r2
 80072a4:	460e      	mov	r6, r1
 80072a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80072aa:	f7ff f979 	bl	80065a0 <_malloc_r>
 80072ae:	4604      	mov	r4, r0
 80072b0:	b140      	cbz	r0, 80072c4 <__sfmoreglue+0x28>
 80072b2:	2100      	movs	r1, #0
 80072b4:	e9c0 1600 	strd	r1, r6, [r0]
 80072b8:	300c      	adds	r0, #12
 80072ba:	60a0      	str	r0, [r4, #8]
 80072bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80072c0:	f7ff f80e 	bl	80062e0 <memset>
 80072c4:	4620      	mov	r0, r4
 80072c6:	bd70      	pop	{r4, r5, r6, pc}

080072c8 <__sfp_lock_acquire>:
 80072c8:	4801      	ldr	r0, [pc, #4]	; (80072d0 <__sfp_lock_acquire+0x8>)
 80072ca:	f000 b8b3 	b.w	8007434 <__retarget_lock_acquire_recursive>
 80072ce:	bf00      	nop
 80072d0:	2000116d 	.word	0x2000116d

080072d4 <__sfp_lock_release>:
 80072d4:	4801      	ldr	r0, [pc, #4]	; (80072dc <__sfp_lock_release+0x8>)
 80072d6:	f000 b8ae 	b.w	8007436 <__retarget_lock_release_recursive>
 80072da:	bf00      	nop
 80072dc:	2000116d 	.word	0x2000116d

080072e0 <__sinit_lock_acquire>:
 80072e0:	4801      	ldr	r0, [pc, #4]	; (80072e8 <__sinit_lock_acquire+0x8>)
 80072e2:	f000 b8a7 	b.w	8007434 <__retarget_lock_acquire_recursive>
 80072e6:	bf00      	nop
 80072e8:	2000116e 	.word	0x2000116e

080072ec <__sinit_lock_release>:
 80072ec:	4801      	ldr	r0, [pc, #4]	; (80072f4 <__sinit_lock_release+0x8>)
 80072ee:	f000 b8a2 	b.w	8007436 <__retarget_lock_release_recursive>
 80072f2:	bf00      	nop
 80072f4:	2000116e 	.word	0x2000116e

080072f8 <__sinit>:
 80072f8:	b510      	push	{r4, lr}
 80072fa:	4604      	mov	r4, r0
 80072fc:	f7ff fff0 	bl	80072e0 <__sinit_lock_acquire>
 8007300:	69a3      	ldr	r3, [r4, #24]
 8007302:	b11b      	cbz	r3, 800730c <__sinit+0x14>
 8007304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007308:	f7ff bff0 	b.w	80072ec <__sinit_lock_release>
 800730c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007310:	6523      	str	r3, [r4, #80]	; 0x50
 8007312:	4b13      	ldr	r3, [pc, #76]	; (8007360 <__sinit+0x68>)
 8007314:	4a13      	ldr	r2, [pc, #76]	; (8007364 <__sinit+0x6c>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	62a2      	str	r2, [r4, #40]	; 0x28
 800731a:	42a3      	cmp	r3, r4
 800731c:	bf08      	it	eq
 800731e:	2301      	moveq	r3, #1
 8007320:	4620      	mov	r0, r4
 8007322:	bf08      	it	eq
 8007324:	61a3      	streq	r3, [r4, #24]
 8007326:	f000 f81f 	bl	8007368 <__sfp>
 800732a:	6060      	str	r0, [r4, #4]
 800732c:	4620      	mov	r0, r4
 800732e:	f000 f81b 	bl	8007368 <__sfp>
 8007332:	60a0      	str	r0, [r4, #8]
 8007334:	4620      	mov	r0, r4
 8007336:	f000 f817 	bl	8007368 <__sfp>
 800733a:	2200      	movs	r2, #0
 800733c:	2104      	movs	r1, #4
 800733e:	60e0      	str	r0, [r4, #12]
 8007340:	6860      	ldr	r0, [r4, #4]
 8007342:	f7ff ff81 	bl	8007248 <std>
 8007346:	2201      	movs	r2, #1
 8007348:	2109      	movs	r1, #9
 800734a:	68a0      	ldr	r0, [r4, #8]
 800734c:	f7ff ff7c 	bl	8007248 <std>
 8007350:	2202      	movs	r2, #2
 8007352:	2112      	movs	r1, #18
 8007354:	68e0      	ldr	r0, [r4, #12]
 8007356:	f7ff ff77 	bl	8007248 <std>
 800735a:	2301      	movs	r3, #1
 800735c:	61a3      	str	r3, [r4, #24]
 800735e:	e7d1      	b.n	8007304 <__sinit+0xc>
 8007360:	08008798 	.word	0x08008798
 8007364:	08007291 	.word	0x08007291

08007368 <__sfp>:
 8007368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800736a:	4607      	mov	r7, r0
 800736c:	f7ff ffac 	bl	80072c8 <__sfp_lock_acquire>
 8007370:	4b1e      	ldr	r3, [pc, #120]	; (80073ec <__sfp+0x84>)
 8007372:	681e      	ldr	r6, [r3, #0]
 8007374:	69b3      	ldr	r3, [r6, #24]
 8007376:	b913      	cbnz	r3, 800737e <__sfp+0x16>
 8007378:	4630      	mov	r0, r6
 800737a:	f7ff ffbd 	bl	80072f8 <__sinit>
 800737e:	3648      	adds	r6, #72	; 0x48
 8007380:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007384:	3b01      	subs	r3, #1
 8007386:	d503      	bpl.n	8007390 <__sfp+0x28>
 8007388:	6833      	ldr	r3, [r6, #0]
 800738a:	b30b      	cbz	r3, 80073d0 <__sfp+0x68>
 800738c:	6836      	ldr	r6, [r6, #0]
 800738e:	e7f7      	b.n	8007380 <__sfp+0x18>
 8007390:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007394:	b9d5      	cbnz	r5, 80073cc <__sfp+0x64>
 8007396:	4b16      	ldr	r3, [pc, #88]	; (80073f0 <__sfp+0x88>)
 8007398:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800739c:	60e3      	str	r3, [r4, #12]
 800739e:	6665      	str	r5, [r4, #100]	; 0x64
 80073a0:	f000 f847 	bl	8007432 <__retarget_lock_init_recursive>
 80073a4:	f7ff ff96 	bl	80072d4 <__sfp_lock_release>
 80073a8:	2208      	movs	r2, #8
 80073aa:	4629      	mov	r1, r5
 80073ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80073b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80073b4:	6025      	str	r5, [r4, #0]
 80073b6:	61a5      	str	r5, [r4, #24]
 80073b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80073bc:	f7fe ff90 	bl	80062e0 <memset>
 80073c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80073c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80073c8:	4620      	mov	r0, r4
 80073ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073cc:	3468      	adds	r4, #104	; 0x68
 80073ce:	e7d9      	b.n	8007384 <__sfp+0x1c>
 80073d0:	2104      	movs	r1, #4
 80073d2:	4638      	mov	r0, r7
 80073d4:	f7ff ff62 	bl	800729c <__sfmoreglue>
 80073d8:	4604      	mov	r4, r0
 80073da:	6030      	str	r0, [r6, #0]
 80073dc:	2800      	cmp	r0, #0
 80073de:	d1d5      	bne.n	800738c <__sfp+0x24>
 80073e0:	f7ff ff78 	bl	80072d4 <__sfp_lock_release>
 80073e4:	230c      	movs	r3, #12
 80073e6:	603b      	str	r3, [r7, #0]
 80073e8:	e7ee      	b.n	80073c8 <__sfp+0x60>
 80073ea:	bf00      	nop
 80073ec:	08008798 	.word	0x08008798
 80073f0:	ffff0001 	.word	0xffff0001

080073f4 <_fwalk_reent>:
 80073f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073f8:	4606      	mov	r6, r0
 80073fa:	4688      	mov	r8, r1
 80073fc:	2700      	movs	r7, #0
 80073fe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007402:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007406:	f1b9 0901 	subs.w	r9, r9, #1
 800740a:	d505      	bpl.n	8007418 <_fwalk_reent+0x24>
 800740c:	6824      	ldr	r4, [r4, #0]
 800740e:	2c00      	cmp	r4, #0
 8007410:	d1f7      	bne.n	8007402 <_fwalk_reent+0xe>
 8007412:	4638      	mov	r0, r7
 8007414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007418:	89ab      	ldrh	r3, [r5, #12]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d907      	bls.n	800742e <_fwalk_reent+0x3a>
 800741e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007422:	3301      	adds	r3, #1
 8007424:	d003      	beq.n	800742e <_fwalk_reent+0x3a>
 8007426:	4629      	mov	r1, r5
 8007428:	4630      	mov	r0, r6
 800742a:	47c0      	blx	r8
 800742c:	4307      	orrs	r7, r0
 800742e:	3568      	adds	r5, #104	; 0x68
 8007430:	e7e9      	b.n	8007406 <_fwalk_reent+0x12>

08007432 <__retarget_lock_init_recursive>:
 8007432:	4770      	bx	lr

08007434 <__retarget_lock_acquire_recursive>:
 8007434:	4770      	bx	lr

08007436 <__retarget_lock_release_recursive>:
 8007436:	4770      	bx	lr

08007438 <__swhatbuf_r>:
 8007438:	b570      	push	{r4, r5, r6, lr}
 800743a:	460e      	mov	r6, r1
 800743c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007440:	4614      	mov	r4, r2
 8007442:	2900      	cmp	r1, #0
 8007444:	461d      	mov	r5, r3
 8007446:	b096      	sub	sp, #88	; 0x58
 8007448:	da08      	bge.n	800745c <__swhatbuf_r+0x24>
 800744a:	2200      	movs	r2, #0
 800744c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007450:	602a      	str	r2, [r5, #0]
 8007452:	061a      	lsls	r2, r3, #24
 8007454:	d410      	bmi.n	8007478 <__swhatbuf_r+0x40>
 8007456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800745a:	e00e      	b.n	800747a <__swhatbuf_r+0x42>
 800745c:	466a      	mov	r2, sp
 800745e:	f000 f95f 	bl	8007720 <_fstat_r>
 8007462:	2800      	cmp	r0, #0
 8007464:	dbf1      	blt.n	800744a <__swhatbuf_r+0x12>
 8007466:	9a01      	ldr	r2, [sp, #4]
 8007468:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800746c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007470:	425a      	negs	r2, r3
 8007472:	415a      	adcs	r2, r3
 8007474:	602a      	str	r2, [r5, #0]
 8007476:	e7ee      	b.n	8007456 <__swhatbuf_r+0x1e>
 8007478:	2340      	movs	r3, #64	; 0x40
 800747a:	2000      	movs	r0, #0
 800747c:	6023      	str	r3, [r4, #0]
 800747e:	b016      	add	sp, #88	; 0x58
 8007480:	bd70      	pop	{r4, r5, r6, pc}
	...

08007484 <__smakebuf_r>:
 8007484:	898b      	ldrh	r3, [r1, #12]
 8007486:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007488:	079d      	lsls	r5, r3, #30
 800748a:	4606      	mov	r6, r0
 800748c:	460c      	mov	r4, r1
 800748e:	d507      	bpl.n	80074a0 <__smakebuf_r+0x1c>
 8007490:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007494:	6023      	str	r3, [r4, #0]
 8007496:	6123      	str	r3, [r4, #16]
 8007498:	2301      	movs	r3, #1
 800749a:	6163      	str	r3, [r4, #20]
 800749c:	b002      	add	sp, #8
 800749e:	bd70      	pop	{r4, r5, r6, pc}
 80074a0:	466a      	mov	r2, sp
 80074a2:	ab01      	add	r3, sp, #4
 80074a4:	f7ff ffc8 	bl	8007438 <__swhatbuf_r>
 80074a8:	9900      	ldr	r1, [sp, #0]
 80074aa:	4605      	mov	r5, r0
 80074ac:	4630      	mov	r0, r6
 80074ae:	f7ff f877 	bl	80065a0 <_malloc_r>
 80074b2:	b948      	cbnz	r0, 80074c8 <__smakebuf_r+0x44>
 80074b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074b8:	059a      	lsls	r2, r3, #22
 80074ba:	d4ef      	bmi.n	800749c <__smakebuf_r+0x18>
 80074bc:	f023 0303 	bic.w	r3, r3, #3
 80074c0:	f043 0302 	orr.w	r3, r3, #2
 80074c4:	81a3      	strh	r3, [r4, #12]
 80074c6:	e7e3      	b.n	8007490 <__smakebuf_r+0xc>
 80074c8:	4b0d      	ldr	r3, [pc, #52]	; (8007500 <__smakebuf_r+0x7c>)
 80074ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80074cc:	89a3      	ldrh	r3, [r4, #12]
 80074ce:	6020      	str	r0, [r4, #0]
 80074d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074d4:	81a3      	strh	r3, [r4, #12]
 80074d6:	9b00      	ldr	r3, [sp, #0]
 80074d8:	6120      	str	r0, [r4, #16]
 80074da:	6163      	str	r3, [r4, #20]
 80074dc:	9b01      	ldr	r3, [sp, #4]
 80074de:	b15b      	cbz	r3, 80074f8 <__smakebuf_r+0x74>
 80074e0:	4630      	mov	r0, r6
 80074e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074e6:	f000 f92d 	bl	8007744 <_isatty_r>
 80074ea:	b128      	cbz	r0, 80074f8 <__smakebuf_r+0x74>
 80074ec:	89a3      	ldrh	r3, [r4, #12]
 80074ee:	f023 0303 	bic.w	r3, r3, #3
 80074f2:	f043 0301 	orr.w	r3, r3, #1
 80074f6:	81a3      	strh	r3, [r4, #12]
 80074f8:	89a0      	ldrh	r0, [r4, #12]
 80074fa:	4305      	orrs	r5, r0
 80074fc:	81a5      	strh	r5, [r4, #12]
 80074fe:	e7cd      	b.n	800749c <__smakebuf_r+0x18>
 8007500:	08007291 	.word	0x08007291

08007504 <memchr>:
 8007504:	4603      	mov	r3, r0
 8007506:	b510      	push	{r4, lr}
 8007508:	b2c9      	uxtb	r1, r1
 800750a:	4402      	add	r2, r0
 800750c:	4293      	cmp	r3, r2
 800750e:	4618      	mov	r0, r3
 8007510:	d101      	bne.n	8007516 <memchr+0x12>
 8007512:	2000      	movs	r0, #0
 8007514:	e003      	b.n	800751e <memchr+0x1a>
 8007516:	7804      	ldrb	r4, [r0, #0]
 8007518:	3301      	adds	r3, #1
 800751a:	428c      	cmp	r4, r1
 800751c:	d1f6      	bne.n	800750c <memchr+0x8>
 800751e:	bd10      	pop	{r4, pc}

08007520 <memmove>:
 8007520:	4288      	cmp	r0, r1
 8007522:	b510      	push	{r4, lr}
 8007524:	eb01 0402 	add.w	r4, r1, r2
 8007528:	d902      	bls.n	8007530 <memmove+0x10>
 800752a:	4284      	cmp	r4, r0
 800752c:	4623      	mov	r3, r4
 800752e:	d807      	bhi.n	8007540 <memmove+0x20>
 8007530:	1e43      	subs	r3, r0, #1
 8007532:	42a1      	cmp	r1, r4
 8007534:	d008      	beq.n	8007548 <memmove+0x28>
 8007536:	f811 2b01 	ldrb.w	r2, [r1], #1
 800753a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800753e:	e7f8      	b.n	8007532 <memmove+0x12>
 8007540:	4601      	mov	r1, r0
 8007542:	4402      	add	r2, r0
 8007544:	428a      	cmp	r2, r1
 8007546:	d100      	bne.n	800754a <memmove+0x2a>
 8007548:	bd10      	pop	{r4, pc}
 800754a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800754e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007552:	e7f7      	b.n	8007544 <memmove+0x24>

08007554 <__malloc_lock>:
 8007554:	4801      	ldr	r0, [pc, #4]	; (800755c <__malloc_lock+0x8>)
 8007556:	f7ff bf6d 	b.w	8007434 <__retarget_lock_acquire_recursive>
 800755a:	bf00      	nop
 800755c:	2000116c 	.word	0x2000116c

08007560 <__malloc_unlock>:
 8007560:	4801      	ldr	r0, [pc, #4]	; (8007568 <__malloc_unlock+0x8>)
 8007562:	f7ff bf68 	b.w	8007436 <__retarget_lock_release_recursive>
 8007566:	bf00      	nop
 8007568:	2000116c 	.word	0x2000116c

0800756c <_realloc_r>:
 800756c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007570:	4680      	mov	r8, r0
 8007572:	4614      	mov	r4, r2
 8007574:	460e      	mov	r6, r1
 8007576:	b921      	cbnz	r1, 8007582 <_realloc_r+0x16>
 8007578:	4611      	mov	r1, r2
 800757a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800757e:	f7ff b80f 	b.w	80065a0 <_malloc_r>
 8007582:	b92a      	cbnz	r2, 8007590 <_realloc_r+0x24>
 8007584:	f7fe ffa4 	bl	80064d0 <_free_r>
 8007588:	4625      	mov	r5, r4
 800758a:	4628      	mov	r0, r5
 800758c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007590:	f000 f8fa 	bl	8007788 <_malloc_usable_size_r>
 8007594:	4284      	cmp	r4, r0
 8007596:	4607      	mov	r7, r0
 8007598:	d802      	bhi.n	80075a0 <_realloc_r+0x34>
 800759a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800759e:	d812      	bhi.n	80075c6 <_realloc_r+0x5a>
 80075a0:	4621      	mov	r1, r4
 80075a2:	4640      	mov	r0, r8
 80075a4:	f7fe fffc 	bl	80065a0 <_malloc_r>
 80075a8:	4605      	mov	r5, r0
 80075aa:	2800      	cmp	r0, #0
 80075ac:	d0ed      	beq.n	800758a <_realloc_r+0x1e>
 80075ae:	42bc      	cmp	r4, r7
 80075b0:	4622      	mov	r2, r4
 80075b2:	4631      	mov	r1, r6
 80075b4:	bf28      	it	cs
 80075b6:	463a      	movcs	r2, r7
 80075b8:	f7fe fe84 	bl	80062c4 <memcpy>
 80075bc:	4631      	mov	r1, r6
 80075be:	4640      	mov	r0, r8
 80075c0:	f7fe ff86 	bl	80064d0 <_free_r>
 80075c4:	e7e1      	b.n	800758a <_realloc_r+0x1e>
 80075c6:	4635      	mov	r5, r6
 80075c8:	e7df      	b.n	800758a <_realloc_r+0x1e>

080075ca <_raise_r>:
 80075ca:	291f      	cmp	r1, #31
 80075cc:	b538      	push	{r3, r4, r5, lr}
 80075ce:	4604      	mov	r4, r0
 80075d0:	460d      	mov	r5, r1
 80075d2:	d904      	bls.n	80075de <_raise_r+0x14>
 80075d4:	2316      	movs	r3, #22
 80075d6:	6003      	str	r3, [r0, #0]
 80075d8:	f04f 30ff 	mov.w	r0, #4294967295
 80075dc:	bd38      	pop	{r3, r4, r5, pc}
 80075de:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80075e0:	b112      	cbz	r2, 80075e8 <_raise_r+0x1e>
 80075e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80075e6:	b94b      	cbnz	r3, 80075fc <_raise_r+0x32>
 80075e8:	4620      	mov	r0, r4
 80075ea:	f000 f831 	bl	8007650 <_getpid_r>
 80075ee:	462a      	mov	r2, r5
 80075f0:	4601      	mov	r1, r0
 80075f2:	4620      	mov	r0, r4
 80075f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075f8:	f000 b818 	b.w	800762c <_kill_r>
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d00a      	beq.n	8007616 <_raise_r+0x4c>
 8007600:	1c59      	adds	r1, r3, #1
 8007602:	d103      	bne.n	800760c <_raise_r+0x42>
 8007604:	2316      	movs	r3, #22
 8007606:	6003      	str	r3, [r0, #0]
 8007608:	2001      	movs	r0, #1
 800760a:	e7e7      	b.n	80075dc <_raise_r+0x12>
 800760c:	2400      	movs	r4, #0
 800760e:	4628      	mov	r0, r5
 8007610:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007614:	4798      	blx	r3
 8007616:	2000      	movs	r0, #0
 8007618:	e7e0      	b.n	80075dc <_raise_r+0x12>
	...

0800761c <raise>:
 800761c:	4b02      	ldr	r3, [pc, #8]	; (8007628 <raise+0xc>)
 800761e:	4601      	mov	r1, r0
 8007620:	6818      	ldr	r0, [r3, #0]
 8007622:	f7ff bfd2 	b.w	80075ca <_raise_r>
 8007626:	bf00      	nop
 8007628:	2000001c 	.word	0x2000001c

0800762c <_kill_r>:
 800762c:	b538      	push	{r3, r4, r5, lr}
 800762e:	2300      	movs	r3, #0
 8007630:	4d06      	ldr	r5, [pc, #24]	; (800764c <_kill_r+0x20>)
 8007632:	4604      	mov	r4, r0
 8007634:	4608      	mov	r0, r1
 8007636:	4611      	mov	r1, r2
 8007638:	602b      	str	r3, [r5, #0]
 800763a:	f7fa fe82 	bl	8002342 <_kill>
 800763e:	1c43      	adds	r3, r0, #1
 8007640:	d102      	bne.n	8007648 <_kill_r+0x1c>
 8007642:	682b      	ldr	r3, [r5, #0]
 8007644:	b103      	cbz	r3, 8007648 <_kill_r+0x1c>
 8007646:	6023      	str	r3, [r4, #0]
 8007648:	bd38      	pop	{r3, r4, r5, pc}
 800764a:	bf00      	nop
 800764c:	20001168 	.word	0x20001168

08007650 <_getpid_r>:
 8007650:	f7fa be70 	b.w	8002334 <_getpid>

08007654 <__sread>:
 8007654:	b510      	push	{r4, lr}
 8007656:	460c      	mov	r4, r1
 8007658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800765c:	f000 f89c 	bl	8007798 <_read_r>
 8007660:	2800      	cmp	r0, #0
 8007662:	bfab      	itete	ge
 8007664:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007666:	89a3      	ldrhlt	r3, [r4, #12]
 8007668:	181b      	addge	r3, r3, r0
 800766a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800766e:	bfac      	ite	ge
 8007670:	6563      	strge	r3, [r4, #84]	; 0x54
 8007672:	81a3      	strhlt	r3, [r4, #12]
 8007674:	bd10      	pop	{r4, pc}

08007676 <__swrite>:
 8007676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800767a:	461f      	mov	r7, r3
 800767c:	898b      	ldrh	r3, [r1, #12]
 800767e:	4605      	mov	r5, r0
 8007680:	05db      	lsls	r3, r3, #23
 8007682:	460c      	mov	r4, r1
 8007684:	4616      	mov	r6, r2
 8007686:	d505      	bpl.n	8007694 <__swrite+0x1e>
 8007688:	2302      	movs	r3, #2
 800768a:	2200      	movs	r2, #0
 800768c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007690:	f000 f868 	bl	8007764 <_lseek_r>
 8007694:	89a3      	ldrh	r3, [r4, #12]
 8007696:	4632      	mov	r2, r6
 8007698:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800769c:	81a3      	strh	r3, [r4, #12]
 800769e:	4628      	mov	r0, r5
 80076a0:	463b      	mov	r3, r7
 80076a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076aa:	f000 b817 	b.w	80076dc <_write_r>

080076ae <__sseek>:
 80076ae:	b510      	push	{r4, lr}
 80076b0:	460c      	mov	r4, r1
 80076b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076b6:	f000 f855 	bl	8007764 <_lseek_r>
 80076ba:	1c43      	adds	r3, r0, #1
 80076bc:	89a3      	ldrh	r3, [r4, #12]
 80076be:	bf15      	itete	ne
 80076c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80076c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80076c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80076ca:	81a3      	strheq	r3, [r4, #12]
 80076cc:	bf18      	it	ne
 80076ce:	81a3      	strhne	r3, [r4, #12]
 80076d0:	bd10      	pop	{r4, pc}

080076d2 <__sclose>:
 80076d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076d6:	f000 b813 	b.w	8007700 <_close_r>
	...

080076dc <_write_r>:
 80076dc:	b538      	push	{r3, r4, r5, lr}
 80076de:	4604      	mov	r4, r0
 80076e0:	4608      	mov	r0, r1
 80076e2:	4611      	mov	r1, r2
 80076e4:	2200      	movs	r2, #0
 80076e6:	4d05      	ldr	r5, [pc, #20]	; (80076fc <_write_r+0x20>)
 80076e8:	602a      	str	r2, [r5, #0]
 80076ea:	461a      	mov	r2, r3
 80076ec:	f7fa fe60 	bl	80023b0 <_write>
 80076f0:	1c43      	adds	r3, r0, #1
 80076f2:	d102      	bne.n	80076fa <_write_r+0x1e>
 80076f4:	682b      	ldr	r3, [r5, #0]
 80076f6:	b103      	cbz	r3, 80076fa <_write_r+0x1e>
 80076f8:	6023      	str	r3, [r4, #0]
 80076fa:	bd38      	pop	{r3, r4, r5, pc}
 80076fc:	20001168 	.word	0x20001168

08007700 <_close_r>:
 8007700:	b538      	push	{r3, r4, r5, lr}
 8007702:	2300      	movs	r3, #0
 8007704:	4d05      	ldr	r5, [pc, #20]	; (800771c <_close_r+0x1c>)
 8007706:	4604      	mov	r4, r0
 8007708:	4608      	mov	r0, r1
 800770a:	602b      	str	r3, [r5, #0]
 800770c:	f7fa fe6c 	bl	80023e8 <_close>
 8007710:	1c43      	adds	r3, r0, #1
 8007712:	d102      	bne.n	800771a <_close_r+0x1a>
 8007714:	682b      	ldr	r3, [r5, #0]
 8007716:	b103      	cbz	r3, 800771a <_close_r+0x1a>
 8007718:	6023      	str	r3, [r4, #0]
 800771a:	bd38      	pop	{r3, r4, r5, pc}
 800771c:	20001168 	.word	0x20001168

08007720 <_fstat_r>:
 8007720:	b538      	push	{r3, r4, r5, lr}
 8007722:	2300      	movs	r3, #0
 8007724:	4d06      	ldr	r5, [pc, #24]	; (8007740 <_fstat_r+0x20>)
 8007726:	4604      	mov	r4, r0
 8007728:	4608      	mov	r0, r1
 800772a:	4611      	mov	r1, r2
 800772c:	602b      	str	r3, [r5, #0]
 800772e:	f7fa fe66 	bl	80023fe <_fstat>
 8007732:	1c43      	adds	r3, r0, #1
 8007734:	d102      	bne.n	800773c <_fstat_r+0x1c>
 8007736:	682b      	ldr	r3, [r5, #0]
 8007738:	b103      	cbz	r3, 800773c <_fstat_r+0x1c>
 800773a:	6023      	str	r3, [r4, #0]
 800773c:	bd38      	pop	{r3, r4, r5, pc}
 800773e:	bf00      	nop
 8007740:	20001168 	.word	0x20001168

08007744 <_isatty_r>:
 8007744:	b538      	push	{r3, r4, r5, lr}
 8007746:	2300      	movs	r3, #0
 8007748:	4d05      	ldr	r5, [pc, #20]	; (8007760 <_isatty_r+0x1c>)
 800774a:	4604      	mov	r4, r0
 800774c:	4608      	mov	r0, r1
 800774e:	602b      	str	r3, [r5, #0]
 8007750:	f7fa fe64 	bl	800241c <_isatty>
 8007754:	1c43      	adds	r3, r0, #1
 8007756:	d102      	bne.n	800775e <_isatty_r+0x1a>
 8007758:	682b      	ldr	r3, [r5, #0]
 800775a:	b103      	cbz	r3, 800775e <_isatty_r+0x1a>
 800775c:	6023      	str	r3, [r4, #0]
 800775e:	bd38      	pop	{r3, r4, r5, pc}
 8007760:	20001168 	.word	0x20001168

08007764 <_lseek_r>:
 8007764:	b538      	push	{r3, r4, r5, lr}
 8007766:	4604      	mov	r4, r0
 8007768:	4608      	mov	r0, r1
 800776a:	4611      	mov	r1, r2
 800776c:	2200      	movs	r2, #0
 800776e:	4d05      	ldr	r5, [pc, #20]	; (8007784 <_lseek_r+0x20>)
 8007770:	602a      	str	r2, [r5, #0]
 8007772:	461a      	mov	r2, r3
 8007774:	f7fa fe5c 	bl	8002430 <_lseek>
 8007778:	1c43      	adds	r3, r0, #1
 800777a:	d102      	bne.n	8007782 <_lseek_r+0x1e>
 800777c:	682b      	ldr	r3, [r5, #0]
 800777e:	b103      	cbz	r3, 8007782 <_lseek_r+0x1e>
 8007780:	6023      	str	r3, [r4, #0]
 8007782:	bd38      	pop	{r3, r4, r5, pc}
 8007784:	20001168 	.word	0x20001168

08007788 <_malloc_usable_size_r>:
 8007788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800778c:	1f18      	subs	r0, r3, #4
 800778e:	2b00      	cmp	r3, #0
 8007790:	bfbc      	itt	lt
 8007792:	580b      	ldrlt	r3, [r1, r0]
 8007794:	18c0      	addlt	r0, r0, r3
 8007796:	4770      	bx	lr

08007798 <_read_r>:
 8007798:	b538      	push	{r3, r4, r5, lr}
 800779a:	4604      	mov	r4, r0
 800779c:	4608      	mov	r0, r1
 800779e:	4611      	mov	r1, r2
 80077a0:	2200      	movs	r2, #0
 80077a2:	4d05      	ldr	r5, [pc, #20]	; (80077b8 <_read_r+0x20>)
 80077a4:	602a      	str	r2, [r5, #0]
 80077a6:	461a      	mov	r2, r3
 80077a8:	f7fa fde5 	bl	8002376 <_read>
 80077ac:	1c43      	adds	r3, r0, #1
 80077ae:	d102      	bne.n	80077b6 <_read_r+0x1e>
 80077b0:	682b      	ldr	r3, [r5, #0]
 80077b2:	b103      	cbz	r3, 80077b6 <_read_r+0x1e>
 80077b4:	6023      	str	r3, [r4, #0]
 80077b6:	bd38      	pop	{r3, r4, r5, pc}
 80077b8:	20001168 	.word	0x20001168

080077bc <pow>:
 80077bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077c0:	4614      	mov	r4, r2
 80077c2:	461d      	mov	r5, r3
 80077c4:	4680      	mov	r8, r0
 80077c6:	4689      	mov	r9, r1
 80077c8:	f000 f862 	bl	8007890 <__ieee754_pow>
 80077cc:	4622      	mov	r2, r4
 80077ce:	4606      	mov	r6, r0
 80077d0:	460f      	mov	r7, r1
 80077d2:	462b      	mov	r3, r5
 80077d4:	4620      	mov	r0, r4
 80077d6:	4629      	mov	r1, r5
 80077d8:	f7f9 f918 	bl	8000a0c <__aeabi_dcmpun>
 80077dc:	bbc8      	cbnz	r0, 8007852 <pow+0x96>
 80077de:	2200      	movs	r2, #0
 80077e0:	2300      	movs	r3, #0
 80077e2:	4640      	mov	r0, r8
 80077e4:	4649      	mov	r1, r9
 80077e6:	f7f9 f8df 	bl	80009a8 <__aeabi_dcmpeq>
 80077ea:	b1b8      	cbz	r0, 800781c <pow+0x60>
 80077ec:	2200      	movs	r2, #0
 80077ee:	2300      	movs	r3, #0
 80077f0:	4620      	mov	r0, r4
 80077f2:	4629      	mov	r1, r5
 80077f4:	f7f9 f8d8 	bl	80009a8 <__aeabi_dcmpeq>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	d141      	bne.n	8007880 <pow+0xc4>
 80077fc:	4620      	mov	r0, r4
 80077fe:	4629      	mov	r1, r5
 8007800:	f000 fe3b 	bl	800847a <finite>
 8007804:	b328      	cbz	r0, 8007852 <pow+0x96>
 8007806:	2200      	movs	r2, #0
 8007808:	2300      	movs	r3, #0
 800780a:	4620      	mov	r0, r4
 800780c:	4629      	mov	r1, r5
 800780e:	f7f9 f8d5 	bl	80009bc <__aeabi_dcmplt>
 8007812:	b1f0      	cbz	r0, 8007852 <pow+0x96>
 8007814:	f7fe fd2c 	bl	8006270 <__errno>
 8007818:	2322      	movs	r3, #34	; 0x22
 800781a:	e019      	b.n	8007850 <pow+0x94>
 800781c:	4630      	mov	r0, r6
 800781e:	4639      	mov	r1, r7
 8007820:	f000 fe2b 	bl	800847a <finite>
 8007824:	b9c8      	cbnz	r0, 800785a <pow+0x9e>
 8007826:	4640      	mov	r0, r8
 8007828:	4649      	mov	r1, r9
 800782a:	f000 fe26 	bl	800847a <finite>
 800782e:	b1a0      	cbz	r0, 800785a <pow+0x9e>
 8007830:	4620      	mov	r0, r4
 8007832:	4629      	mov	r1, r5
 8007834:	f000 fe21 	bl	800847a <finite>
 8007838:	b178      	cbz	r0, 800785a <pow+0x9e>
 800783a:	4632      	mov	r2, r6
 800783c:	463b      	mov	r3, r7
 800783e:	4630      	mov	r0, r6
 8007840:	4639      	mov	r1, r7
 8007842:	f7f9 f8e3 	bl	8000a0c <__aeabi_dcmpun>
 8007846:	2800      	cmp	r0, #0
 8007848:	d0e4      	beq.n	8007814 <pow+0x58>
 800784a:	f7fe fd11 	bl	8006270 <__errno>
 800784e:	2321      	movs	r3, #33	; 0x21
 8007850:	6003      	str	r3, [r0, #0]
 8007852:	4630      	mov	r0, r6
 8007854:	4639      	mov	r1, r7
 8007856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800785a:	2200      	movs	r2, #0
 800785c:	2300      	movs	r3, #0
 800785e:	4630      	mov	r0, r6
 8007860:	4639      	mov	r1, r7
 8007862:	f7f9 f8a1 	bl	80009a8 <__aeabi_dcmpeq>
 8007866:	2800      	cmp	r0, #0
 8007868:	d0f3      	beq.n	8007852 <pow+0x96>
 800786a:	4640      	mov	r0, r8
 800786c:	4649      	mov	r1, r9
 800786e:	f000 fe04 	bl	800847a <finite>
 8007872:	2800      	cmp	r0, #0
 8007874:	d0ed      	beq.n	8007852 <pow+0x96>
 8007876:	4620      	mov	r0, r4
 8007878:	4629      	mov	r1, r5
 800787a:	f000 fdfe 	bl	800847a <finite>
 800787e:	e7c8      	b.n	8007812 <pow+0x56>
 8007880:	2600      	movs	r6, #0
 8007882:	4f01      	ldr	r7, [pc, #4]	; (8007888 <pow+0xcc>)
 8007884:	e7e5      	b.n	8007852 <pow+0x96>
 8007886:	bf00      	nop
 8007888:	3ff00000 	.word	0x3ff00000
 800788c:	00000000 	.word	0x00000000

08007890 <__ieee754_pow>:
 8007890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007894:	b093      	sub	sp, #76	; 0x4c
 8007896:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800789a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800789e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80078a2:	4689      	mov	r9, r1
 80078a4:	ea56 0102 	orrs.w	r1, r6, r2
 80078a8:	4680      	mov	r8, r0
 80078aa:	d111      	bne.n	80078d0 <__ieee754_pow+0x40>
 80078ac:	1803      	adds	r3, r0, r0
 80078ae:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80078b2:	4152      	adcs	r2, r2
 80078b4:	4299      	cmp	r1, r3
 80078b6:	4b82      	ldr	r3, [pc, #520]	; (8007ac0 <__ieee754_pow+0x230>)
 80078b8:	4193      	sbcs	r3, r2
 80078ba:	f080 84b9 	bcs.w	8008230 <__ieee754_pow+0x9a0>
 80078be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078c2:	4640      	mov	r0, r8
 80078c4:	4649      	mov	r1, r9
 80078c6:	f7f8 fc51 	bl	800016c <__adddf3>
 80078ca:	4683      	mov	fp, r0
 80078cc:	468c      	mov	ip, r1
 80078ce:	e06f      	b.n	80079b0 <__ieee754_pow+0x120>
 80078d0:	4b7c      	ldr	r3, [pc, #496]	; (8007ac4 <__ieee754_pow+0x234>)
 80078d2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 80078d6:	429c      	cmp	r4, r3
 80078d8:	464d      	mov	r5, r9
 80078da:	4682      	mov	sl, r0
 80078dc:	dc06      	bgt.n	80078ec <__ieee754_pow+0x5c>
 80078de:	d101      	bne.n	80078e4 <__ieee754_pow+0x54>
 80078e0:	2800      	cmp	r0, #0
 80078e2:	d1ec      	bne.n	80078be <__ieee754_pow+0x2e>
 80078e4:	429e      	cmp	r6, r3
 80078e6:	dc01      	bgt.n	80078ec <__ieee754_pow+0x5c>
 80078e8:	d10f      	bne.n	800790a <__ieee754_pow+0x7a>
 80078ea:	b172      	cbz	r2, 800790a <__ieee754_pow+0x7a>
 80078ec:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80078f0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80078f4:	ea55 050a 	orrs.w	r5, r5, sl
 80078f8:	d1e1      	bne.n	80078be <__ieee754_pow+0x2e>
 80078fa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80078fe:	18db      	adds	r3, r3, r3
 8007900:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007904:	4152      	adcs	r2, r2
 8007906:	429d      	cmp	r5, r3
 8007908:	e7d5      	b.n	80078b6 <__ieee754_pow+0x26>
 800790a:	2d00      	cmp	r5, #0
 800790c:	da39      	bge.n	8007982 <__ieee754_pow+0xf2>
 800790e:	4b6e      	ldr	r3, [pc, #440]	; (8007ac8 <__ieee754_pow+0x238>)
 8007910:	429e      	cmp	r6, r3
 8007912:	dc52      	bgt.n	80079ba <__ieee754_pow+0x12a>
 8007914:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007918:	429e      	cmp	r6, r3
 800791a:	f340 849c 	ble.w	8008256 <__ieee754_pow+0x9c6>
 800791e:	1533      	asrs	r3, r6, #20
 8007920:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007924:	2b14      	cmp	r3, #20
 8007926:	dd0f      	ble.n	8007948 <__ieee754_pow+0xb8>
 8007928:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800792c:	fa22 f103 	lsr.w	r1, r2, r3
 8007930:	fa01 f303 	lsl.w	r3, r1, r3
 8007934:	4293      	cmp	r3, r2
 8007936:	f040 848e 	bne.w	8008256 <__ieee754_pow+0x9c6>
 800793a:	f001 0101 	and.w	r1, r1, #1
 800793e:	f1c1 0302 	rsb	r3, r1, #2
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	b182      	cbz	r2, 8007968 <__ieee754_pow+0xd8>
 8007946:	e05d      	b.n	8007a04 <__ieee754_pow+0x174>
 8007948:	2a00      	cmp	r2, #0
 800794a:	d159      	bne.n	8007a00 <__ieee754_pow+0x170>
 800794c:	f1c3 0314 	rsb	r3, r3, #20
 8007950:	fa46 f103 	asr.w	r1, r6, r3
 8007954:	fa01 f303 	lsl.w	r3, r1, r3
 8007958:	42b3      	cmp	r3, r6
 800795a:	f040 8479 	bne.w	8008250 <__ieee754_pow+0x9c0>
 800795e:	f001 0101 	and.w	r1, r1, #1
 8007962:	f1c1 0302 	rsb	r3, r1, #2
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	4b58      	ldr	r3, [pc, #352]	; (8007acc <__ieee754_pow+0x23c>)
 800796a:	429e      	cmp	r6, r3
 800796c:	d132      	bne.n	80079d4 <__ieee754_pow+0x144>
 800796e:	2f00      	cmp	r7, #0
 8007970:	f280 846a 	bge.w	8008248 <__ieee754_pow+0x9b8>
 8007974:	4642      	mov	r2, r8
 8007976:	464b      	mov	r3, r9
 8007978:	2000      	movs	r0, #0
 800797a:	4954      	ldr	r1, [pc, #336]	; (8007acc <__ieee754_pow+0x23c>)
 800797c:	f7f8 fed6 	bl	800072c <__aeabi_ddiv>
 8007980:	e7a3      	b.n	80078ca <__ieee754_pow+0x3a>
 8007982:	2300      	movs	r3, #0
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	2a00      	cmp	r2, #0
 8007988:	d13c      	bne.n	8007a04 <__ieee754_pow+0x174>
 800798a:	4b4e      	ldr	r3, [pc, #312]	; (8007ac4 <__ieee754_pow+0x234>)
 800798c:	429e      	cmp	r6, r3
 800798e:	d1eb      	bne.n	8007968 <__ieee754_pow+0xd8>
 8007990:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007994:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007998:	ea53 030a 	orrs.w	r3, r3, sl
 800799c:	f000 8448 	beq.w	8008230 <__ieee754_pow+0x9a0>
 80079a0:	4b4b      	ldr	r3, [pc, #300]	; (8007ad0 <__ieee754_pow+0x240>)
 80079a2:	429c      	cmp	r4, r3
 80079a4:	dd0b      	ble.n	80079be <__ieee754_pow+0x12e>
 80079a6:	2f00      	cmp	r7, #0
 80079a8:	f2c0 8448 	blt.w	800823c <__ieee754_pow+0x9ac>
 80079ac:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80079b0:	4658      	mov	r0, fp
 80079b2:	4661      	mov	r1, ip
 80079b4:	b013      	add	sp, #76	; 0x4c
 80079b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ba:	2302      	movs	r3, #2
 80079bc:	e7e2      	b.n	8007984 <__ieee754_pow+0xf4>
 80079be:	2f00      	cmp	r7, #0
 80079c0:	f04f 0b00 	mov.w	fp, #0
 80079c4:	f04f 0c00 	mov.w	ip, #0
 80079c8:	daf2      	bge.n	80079b0 <__ieee754_pow+0x120>
 80079ca:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80079ce:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80079d2:	e7ed      	b.n	80079b0 <__ieee754_pow+0x120>
 80079d4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80079d8:	d106      	bne.n	80079e8 <__ieee754_pow+0x158>
 80079da:	4642      	mov	r2, r8
 80079dc:	464b      	mov	r3, r9
 80079de:	4640      	mov	r0, r8
 80079e0:	4649      	mov	r1, r9
 80079e2:	f7f8 fd79 	bl	80004d8 <__aeabi_dmul>
 80079e6:	e770      	b.n	80078ca <__ieee754_pow+0x3a>
 80079e8:	4b3a      	ldr	r3, [pc, #232]	; (8007ad4 <__ieee754_pow+0x244>)
 80079ea:	429f      	cmp	r7, r3
 80079ec:	d10a      	bne.n	8007a04 <__ieee754_pow+0x174>
 80079ee:	2d00      	cmp	r5, #0
 80079f0:	db08      	blt.n	8007a04 <__ieee754_pow+0x174>
 80079f2:	4640      	mov	r0, r8
 80079f4:	4649      	mov	r1, r9
 80079f6:	b013      	add	sp, #76	; 0x4c
 80079f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079fc:	f000 bc5e 	b.w	80082bc <__ieee754_sqrt>
 8007a00:	2300      	movs	r3, #0
 8007a02:	9300      	str	r3, [sp, #0]
 8007a04:	4640      	mov	r0, r8
 8007a06:	4649      	mov	r1, r9
 8007a08:	f000 fd34 	bl	8008474 <fabs>
 8007a0c:	4683      	mov	fp, r0
 8007a0e:	468c      	mov	ip, r1
 8007a10:	f1ba 0f00 	cmp.w	sl, #0
 8007a14:	d128      	bne.n	8007a68 <__ieee754_pow+0x1d8>
 8007a16:	b124      	cbz	r4, 8007a22 <__ieee754_pow+0x192>
 8007a18:	4b2c      	ldr	r3, [pc, #176]	; (8007acc <__ieee754_pow+0x23c>)
 8007a1a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d122      	bne.n	8007a68 <__ieee754_pow+0x1d8>
 8007a22:	2f00      	cmp	r7, #0
 8007a24:	da07      	bge.n	8007a36 <__ieee754_pow+0x1a6>
 8007a26:	465a      	mov	r2, fp
 8007a28:	4663      	mov	r3, ip
 8007a2a:	2000      	movs	r0, #0
 8007a2c:	4927      	ldr	r1, [pc, #156]	; (8007acc <__ieee754_pow+0x23c>)
 8007a2e:	f7f8 fe7d 	bl	800072c <__aeabi_ddiv>
 8007a32:	4683      	mov	fp, r0
 8007a34:	468c      	mov	ip, r1
 8007a36:	2d00      	cmp	r5, #0
 8007a38:	daba      	bge.n	80079b0 <__ieee754_pow+0x120>
 8007a3a:	9b00      	ldr	r3, [sp, #0]
 8007a3c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007a40:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007a44:	4323      	orrs	r3, r4
 8007a46:	d108      	bne.n	8007a5a <__ieee754_pow+0x1ca>
 8007a48:	465a      	mov	r2, fp
 8007a4a:	4663      	mov	r3, ip
 8007a4c:	4658      	mov	r0, fp
 8007a4e:	4661      	mov	r1, ip
 8007a50:	f7f8 fb8a 	bl	8000168 <__aeabi_dsub>
 8007a54:	4602      	mov	r2, r0
 8007a56:	460b      	mov	r3, r1
 8007a58:	e790      	b.n	800797c <__ieee754_pow+0xec>
 8007a5a:	9b00      	ldr	r3, [sp, #0]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d1a7      	bne.n	80079b0 <__ieee754_pow+0x120>
 8007a60:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8007a64:	469c      	mov	ip, r3
 8007a66:	e7a3      	b.n	80079b0 <__ieee754_pow+0x120>
 8007a68:	0feb      	lsrs	r3, r5, #31
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	930c      	str	r3, [sp, #48]	; 0x30
 8007a6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a70:	9b00      	ldr	r3, [sp, #0]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	d104      	bne.n	8007a80 <__ieee754_pow+0x1f0>
 8007a76:	4642      	mov	r2, r8
 8007a78:	464b      	mov	r3, r9
 8007a7a:	4640      	mov	r0, r8
 8007a7c:	4649      	mov	r1, r9
 8007a7e:	e7e7      	b.n	8007a50 <__ieee754_pow+0x1c0>
 8007a80:	4b15      	ldr	r3, [pc, #84]	; (8007ad8 <__ieee754_pow+0x248>)
 8007a82:	429e      	cmp	r6, r3
 8007a84:	f340 80f6 	ble.w	8007c74 <__ieee754_pow+0x3e4>
 8007a88:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007a8c:	429e      	cmp	r6, r3
 8007a8e:	4b10      	ldr	r3, [pc, #64]	; (8007ad0 <__ieee754_pow+0x240>)
 8007a90:	dd09      	ble.n	8007aa6 <__ieee754_pow+0x216>
 8007a92:	429c      	cmp	r4, r3
 8007a94:	dc0c      	bgt.n	8007ab0 <__ieee754_pow+0x220>
 8007a96:	2f00      	cmp	r7, #0
 8007a98:	da0c      	bge.n	8007ab4 <__ieee754_pow+0x224>
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	b013      	add	sp, #76	; 0x4c
 8007a9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa2:	f000 bce2 	b.w	800846a <__math_oflow>
 8007aa6:	429c      	cmp	r4, r3
 8007aa8:	dbf5      	blt.n	8007a96 <__ieee754_pow+0x206>
 8007aaa:	4b08      	ldr	r3, [pc, #32]	; (8007acc <__ieee754_pow+0x23c>)
 8007aac:	429c      	cmp	r4, r3
 8007aae:	dd15      	ble.n	8007adc <__ieee754_pow+0x24c>
 8007ab0:	2f00      	cmp	r7, #0
 8007ab2:	dcf2      	bgt.n	8007a9a <__ieee754_pow+0x20a>
 8007ab4:	2000      	movs	r0, #0
 8007ab6:	b013      	add	sp, #76	; 0x4c
 8007ab8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007abc:	f000 bcd0 	b.w	8008460 <__math_uflow>
 8007ac0:	fff00000 	.word	0xfff00000
 8007ac4:	7ff00000 	.word	0x7ff00000
 8007ac8:	433fffff 	.word	0x433fffff
 8007acc:	3ff00000 	.word	0x3ff00000
 8007ad0:	3fefffff 	.word	0x3fefffff
 8007ad4:	3fe00000 	.word	0x3fe00000
 8007ad8:	41e00000 	.word	0x41e00000
 8007adc:	4661      	mov	r1, ip
 8007ade:	2200      	movs	r2, #0
 8007ae0:	4658      	mov	r0, fp
 8007ae2:	4b5f      	ldr	r3, [pc, #380]	; (8007c60 <__ieee754_pow+0x3d0>)
 8007ae4:	f7f8 fb40 	bl	8000168 <__aeabi_dsub>
 8007ae8:	a355      	add	r3, pc, #340	; (adr r3, 8007c40 <__ieee754_pow+0x3b0>)
 8007aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aee:	4604      	mov	r4, r0
 8007af0:	460d      	mov	r5, r1
 8007af2:	f7f8 fcf1 	bl	80004d8 <__aeabi_dmul>
 8007af6:	a354      	add	r3, pc, #336	; (adr r3, 8007c48 <__ieee754_pow+0x3b8>)
 8007af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afc:	4606      	mov	r6, r0
 8007afe:	460f      	mov	r7, r1
 8007b00:	4620      	mov	r0, r4
 8007b02:	4629      	mov	r1, r5
 8007b04:	f7f8 fce8 	bl	80004d8 <__aeabi_dmul>
 8007b08:	2200      	movs	r2, #0
 8007b0a:	4682      	mov	sl, r0
 8007b0c:	468b      	mov	fp, r1
 8007b0e:	4620      	mov	r0, r4
 8007b10:	4629      	mov	r1, r5
 8007b12:	4b54      	ldr	r3, [pc, #336]	; (8007c64 <__ieee754_pow+0x3d4>)
 8007b14:	f7f8 fce0 	bl	80004d8 <__aeabi_dmul>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	a14c      	add	r1, pc, #304	; (adr r1, 8007c50 <__ieee754_pow+0x3c0>)
 8007b1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b22:	f7f8 fb21 	bl	8000168 <__aeabi_dsub>
 8007b26:	4622      	mov	r2, r4
 8007b28:	462b      	mov	r3, r5
 8007b2a:	f7f8 fcd5 	bl	80004d8 <__aeabi_dmul>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	460b      	mov	r3, r1
 8007b32:	2000      	movs	r0, #0
 8007b34:	494c      	ldr	r1, [pc, #304]	; (8007c68 <__ieee754_pow+0x3d8>)
 8007b36:	f7f8 fb17 	bl	8000168 <__aeabi_dsub>
 8007b3a:	4622      	mov	r2, r4
 8007b3c:	462b      	mov	r3, r5
 8007b3e:	4680      	mov	r8, r0
 8007b40:	4689      	mov	r9, r1
 8007b42:	4620      	mov	r0, r4
 8007b44:	4629      	mov	r1, r5
 8007b46:	f7f8 fcc7 	bl	80004d8 <__aeabi_dmul>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	4640      	mov	r0, r8
 8007b50:	4649      	mov	r1, r9
 8007b52:	f7f8 fcc1 	bl	80004d8 <__aeabi_dmul>
 8007b56:	a340      	add	r3, pc, #256	; (adr r3, 8007c58 <__ieee754_pow+0x3c8>)
 8007b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5c:	f7f8 fcbc 	bl	80004d8 <__aeabi_dmul>
 8007b60:	4602      	mov	r2, r0
 8007b62:	460b      	mov	r3, r1
 8007b64:	4650      	mov	r0, sl
 8007b66:	4659      	mov	r1, fp
 8007b68:	f7f8 fafe 	bl	8000168 <__aeabi_dsub>
 8007b6c:	f04f 0a00 	mov.w	sl, #0
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	4604      	mov	r4, r0
 8007b76:	460d      	mov	r5, r1
 8007b78:	4630      	mov	r0, r6
 8007b7a:	4639      	mov	r1, r7
 8007b7c:	f7f8 faf6 	bl	800016c <__adddf3>
 8007b80:	4632      	mov	r2, r6
 8007b82:	463b      	mov	r3, r7
 8007b84:	4650      	mov	r0, sl
 8007b86:	468b      	mov	fp, r1
 8007b88:	f7f8 faee 	bl	8000168 <__aeabi_dsub>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	460b      	mov	r3, r1
 8007b90:	4620      	mov	r0, r4
 8007b92:	4629      	mov	r1, r5
 8007b94:	f7f8 fae8 	bl	8000168 <__aeabi_dsub>
 8007b98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b9c:	9b00      	ldr	r3, [sp, #0]
 8007b9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	f04f 0600 	mov.w	r6, #0
 8007ba8:	f04f 0200 	mov.w	r2, #0
 8007bac:	bf0c      	ite	eq
 8007bae:	4b2f      	ldreq	r3, [pc, #188]	; (8007c6c <__ieee754_pow+0x3dc>)
 8007bb0:	4b2b      	ldrne	r3, [pc, #172]	; (8007c60 <__ieee754_pow+0x3d0>)
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	460d      	mov	r5, r1
 8007bb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bba:	e9cd 2300 	strd	r2, r3, [sp]
 8007bbe:	4632      	mov	r2, r6
 8007bc0:	463b      	mov	r3, r7
 8007bc2:	f7f8 fad1 	bl	8000168 <__aeabi_dsub>
 8007bc6:	4652      	mov	r2, sl
 8007bc8:	465b      	mov	r3, fp
 8007bca:	f7f8 fc85 	bl	80004d8 <__aeabi_dmul>
 8007bce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bd2:	4680      	mov	r8, r0
 8007bd4:	4689      	mov	r9, r1
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	4629      	mov	r1, r5
 8007bda:	f7f8 fc7d 	bl	80004d8 <__aeabi_dmul>
 8007bde:	4602      	mov	r2, r0
 8007be0:	460b      	mov	r3, r1
 8007be2:	4640      	mov	r0, r8
 8007be4:	4649      	mov	r1, r9
 8007be6:	f7f8 fac1 	bl	800016c <__adddf3>
 8007bea:	4632      	mov	r2, r6
 8007bec:	463b      	mov	r3, r7
 8007bee:	4680      	mov	r8, r0
 8007bf0:	4689      	mov	r9, r1
 8007bf2:	4650      	mov	r0, sl
 8007bf4:	4659      	mov	r1, fp
 8007bf6:	f7f8 fc6f 	bl	80004d8 <__aeabi_dmul>
 8007bfa:	4604      	mov	r4, r0
 8007bfc:	460d      	mov	r5, r1
 8007bfe:	460b      	mov	r3, r1
 8007c00:	4602      	mov	r2, r0
 8007c02:	4649      	mov	r1, r9
 8007c04:	4640      	mov	r0, r8
 8007c06:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007c0a:	f7f8 faaf 	bl	800016c <__adddf3>
 8007c0e:	4b18      	ldr	r3, [pc, #96]	; (8007c70 <__ieee754_pow+0x3e0>)
 8007c10:	4682      	mov	sl, r0
 8007c12:	4299      	cmp	r1, r3
 8007c14:	460f      	mov	r7, r1
 8007c16:	460e      	mov	r6, r1
 8007c18:	f340 82e5 	ble.w	80081e6 <__ieee754_pow+0x956>
 8007c1c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007c20:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007c24:	4303      	orrs	r3, r0
 8007c26:	f000 81df 	beq.w	8007fe8 <__ieee754_pow+0x758>
 8007c2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	2300      	movs	r3, #0
 8007c32:	f7f8 fec3 	bl	80009bc <__aeabi_dcmplt>
 8007c36:	3800      	subs	r0, #0
 8007c38:	bf18      	it	ne
 8007c3a:	2001      	movne	r0, #1
 8007c3c:	e72e      	b.n	8007a9c <__ieee754_pow+0x20c>
 8007c3e:	bf00      	nop
 8007c40:	60000000 	.word	0x60000000
 8007c44:	3ff71547 	.word	0x3ff71547
 8007c48:	f85ddf44 	.word	0xf85ddf44
 8007c4c:	3e54ae0b 	.word	0x3e54ae0b
 8007c50:	55555555 	.word	0x55555555
 8007c54:	3fd55555 	.word	0x3fd55555
 8007c58:	652b82fe 	.word	0x652b82fe
 8007c5c:	3ff71547 	.word	0x3ff71547
 8007c60:	3ff00000 	.word	0x3ff00000
 8007c64:	3fd00000 	.word	0x3fd00000
 8007c68:	3fe00000 	.word	0x3fe00000
 8007c6c:	bff00000 	.word	0xbff00000
 8007c70:	408fffff 	.word	0x408fffff
 8007c74:	4bd2      	ldr	r3, [pc, #840]	; (8007fc0 <__ieee754_pow+0x730>)
 8007c76:	2200      	movs	r2, #0
 8007c78:	402b      	ands	r3, r5
 8007c7a:	b943      	cbnz	r3, 8007c8e <__ieee754_pow+0x3fe>
 8007c7c:	4658      	mov	r0, fp
 8007c7e:	4661      	mov	r1, ip
 8007c80:	4bd0      	ldr	r3, [pc, #832]	; (8007fc4 <__ieee754_pow+0x734>)
 8007c82:	f7f8 fc29 	bl	80004d8 <__aeabi_dmul>
 8007c86:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007c8a:	4683      	mov	fp, r0
 8007c8c:	460c      	mov	r4, r1
 8007c8e:	1523      	asrs	r3, r4, #20
 8007c90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007c94:	4413      	add	r3, r2
 8007c96:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c98:	4bcb      	ldr	r3, [pc, #812]	; (8007fc8 <__ieee754_pow+0x738>)
 8007c9a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007c9e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007ca2:	429c      	cmp	r4, r3
 8007ca4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007ca8:	dd08      	ble.n	8007cbc <__ieee754_pow+0x42c>
 8007caa:	4bc8      	ldr	r3, [pc, #800]	; (8007fcc <__ieee754_pow+0x73c>)
 8007cac:	429c      	cmp	r4, r3
 8007cae:	f340 8199 	ble.w	8007fe4 <__ieee754_pow+0x754>
 8007cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cb4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007cb8:	3301      	adds	r3, #1
 8007cba:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cbc:	2600      	movs	r6, #0
 8007cbe:	00f3      	lsls	r3, r6, #3
 8007cc0:	930d      	str	r3, [sp, #52]	; 0x34
 8007cc2:	4bc3      	ldr	r3, [pc, #780]	; (8007fd0 <__ieee754_pow+0x740>)
 8007cc4:	4658      	mov	r0, fp
 8007cc6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007cca:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007cce:	4629      	mov	r1, r5
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8007cd6:	4623      	mov	r3, r4
 8007cd8:	f7f8 fa46 	bl	8000168 <__aeabi_dsub>
 8007cdc:	46da      	mov	sl, fp
 8007cde:	462b      	mov	r3, r5
 8007ce0:	4652      	mov	r2, sl
 8007ce2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007ce6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007cea:	f7f8 fa3f 	bl	800016c <__adddf3>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	2000      	movs	r0, #0
 8007cf4:	49b7      	ldr	r1, [pc, #732]	; (8007fd4 <__ieee754_pow+0x744>)
 8007cf6:	f7f8 fd19 	bl	800072c <__aeabi_ddiv>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d02:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007d06:	f7f8 fbe7 	bl	80004d8 <__aeabi_dmul>
 8007d0a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007d0e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8007d12:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007d16:	2300      	movs	r3, #0
 8007d18:	2200      	movs	r2, #0
 8007d1a:	46ab      	mov	fp, r5
 8007d1c:	106d      	asrs	r5, r5, #1
 8007d1e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007d22:	9304      	str	r3, [sp, #16]
 8007d24:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007d28:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007d2c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007d30:	4640      	mov	r0, r8
 8007d32:	4649      	mov	r1, r9
 8007d34:	4614      	mov	r4, r2
 8007d36:	461d      	mov	r5, r3
 8007d38:	f7f8 fbce 	bl	80004d8 <__aeabi_dmul>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	460b      	mov	r3, r1
 8007d40:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007d44:	f7f8 fa10 	bl	8000168 <__aeabi_dsub>
 8007d48:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007d4c:	4606      	mov	r6, r0
 8007d4e:	460f      	mov	r7, r1
 8007d50:	4620      	mov	r0, r4
 8007d52:	4629      	mov	r1, r5
 8007d54:	f7f8 fa08 	bl	8000168 <__aeabi_dsub>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	4650      	mov	r0, sl
 8007d5e:	4659      	mov	r1, fp
 8007d60:	f7f8 fa02 	bl	8000168 <__aeabi_dsub>
 8007d64:	4642      	mov	r2, r8
 8007d66:	464b      	mov	r3, r9
 8007d68:	f7f8 fbb6 	bl	80004d8 <__aeabi_dmul>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	460b      	mov	r3, r1
 8007d70:	4630      	mov	r0, r6
 8007d72:	4639      	mov	r1, r7
 8007d74:	f7f8 f9f8 	bl	8000168 <__aeabi_dsub>
 8007d78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007d7c:	f7f8 fbac 	bl	80004d8 <__aeabi_dmul>
 8007d80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d84:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007d88:	4610      	mov	r0, r2
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	f7f8 fba4 	bl	80004d8 <__aeabi_dmul>
 8007d90:	a379      	add	r3, pc, #484	; (adr r3, 8007f78 <__ieee754_pow+0x6e8>)
 8007d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d96:	4604      	mov	r4, r0
 8007d98:	460d      	mov	r5, r1
 8007d9a:	f7f8 fb9d 	bl	80004d8 <__aeabi_dmul>
 8007d9e:	a378      	add	r3, pc, #480	; (adr r3, 8007f80 <__ieee754_pow+0x6f0>)
 8007da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da4:	f7f8 f9e2 	bl	800016c <__adddf3>
 8007da8:	4622      	mov	r2, r4
 8007daa:	462b      	mov	r3, r5
 8007dac:	f7f8 fb94 	bl	80004d8 <__aeabi_dmul>
 8007db0:	a375      	add	r3, pc, #468	; (adr r3, 8007f88 <__ieee754_pow+0x6f8>)
 8007db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db6:	f7f8 f9d9 	bl	800016c <__adddf3>
 8007dba:	4622      	mov	r2, r4
 8007dbc:	462b      	mov	r3, r5
 8007dbe:	f7f8 fb8b 	bl	80004d8 <__aeabi_dmul>
 8007dc2:	a373      	add	r3, pc, #460	; (adr r3, 8007f90 <__ieee754_pow+0x700>)
 8007dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc8:	f7f8 f9d0 	bl	800016c <__adddf3>
 8007dcc:	4622      	mov	r2, r4
 8007dce:	462b      	mov	r3, r5
 8007dd0:	f7f8 fb82 	bl	80004d8 <__aeabi_dmul>
 8007dd4:	a370      	add	r3, pc, #448	; (adr r3, 8007f98 <__ieee754_pow+0x708>)
 8007dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dda:	f7f8 f9c7 	bl	800016c <__adddf3>
 8007dde:	4622      	mov	r2, r4
 8007de0:	462b      	mov	r3, r5
 8007de2:	f7f8 fb79 	bl	80004d8 <__aeabi_dmul>
 8007de6:	a36e      	add	r3, pc, #440	; (adr r3, 8007fa0 <__ieee754_pow+0x710>)
 8007de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dec:	f7f8 f9be 	bl	800016c <__adddf3>
 8007df0:	4622      	mov	r2, r4
 8007df2:	4606      	mov	r6, r0
 8007df4:	460f      	mov	r7, r1
 8007df6:	462b      	mov	r3, r5
 8007df8:	4620      	mov	r0, r4
 8007dfa:	4629      	mov	r1, r5
 8007dfc:	f7f8 fb6c 	bl	80004d8 <__aeabi_dmul>
 8007e00:	4602      	mov	r2, r0
 8007e02:	460b      	mov	r3, r1
 8007e04:	4630      	mov	r0, r6
 8007e06:	4639      	mov	r1, r7
 8007e08:	f7f8 fb66 	bl	80004d8 <__aeabi_dmul>
 8007e0c:	4604      	mov	r4, r0
 8007e0e:	460d      	mov	r5, r1
 8007e10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e14:	4642      	mov	r2, r8
 8007e16:	464b      	mov	r3, r9
 8007e18:	f7f8 f9a8 	bl	800016c <__adddf3>
 8007e1c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007e20:	f7f8 fb5a 	bl	80004d8 <__aeabi_dmul>
 8007e24:	4622      	mov	r2, r4
 8007e26:	462b      	mov	r3, r5
 8007e28:	f7f8 f9a0 	bl	800016c <__adddf3>
 8007e2c:	4642      	mov	r2, r8
 8007e2e:	4606      	mov	r6, r0
 8007e30:	460f      	mov	r7, r1
 8007e32:	464b      	mov	r3, r9
 8007e34:	4640      	mov	r0, r8
 8007e36:	4649      	mov	r1, r9
 8007e38:	f7f8 fb4e 	bl	80004d8 <__aeabi_dmul>
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	4b66      	ldr	r3, [pc, #408]	; (8007fd8 <__ieee754_pow+0x748>)
 8007e40:	4682      	mov	sl, r0
 8007e42:	468b      	mov	fp, r1
 8007e44:	f7f8 f992 	bl	800016c <__adddf3>
 8007e48:	4632      	mov	r2, r6
 8007e4a:	463b      	mov	r3, r7
 8007e4c:	f7f8 f98e 	bl	800016c <__adddf3>
 8007e50:	2400      	movs	r4, #0
 8007e52:	460d      	mov	r5, r1
 8007e54:	4622      	mov	r2, r4
 8007e56:	460b      	mov	r3, r1
 8007e58:	4640      	mov	r0, r8
 8007e5a:	4649      	mov	r1, r9
 8007e5c:	f7f8 fb3c 	bl	80004d8 <__aeabi_dmul>
 8007e60:	2200      	movs	r2, #0
 8007e62:	4680      	mov	r8, r0
 8007e64:	4689      	mov	r9, r1
 8007e66:	4620      	mov	r0, r4
 8007e68:	4629      	mov	r1, r5
 8007e6a:	4b5b      	ldr	r3, [pc, #364]	; (8007fd8 <__ieee754_pow+0x748>)
 8007e6c:	f7f8 f97c 	bl	8000168 <__aeabi_dsub>
 8007e70:	4652      	mov	r2, sl
 8007e72:	465b      	mov	r3, fp
 8007e74:	f7f8 f978 	bl	8000168 <__aeabi_dsub>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	4630      	mov	r0, r6
 8007e7e:	4639      	mov	r1, r7
 8007e80:	f7f8 f972 	bl	8000168 <__aeabi_dsub>
 8007e84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e88:	f7f8 fb26 	bl	80004d8 <__aeabi_dmul>
 8007e8c:	4622      	mov	r2, r4
 8007e8e:	4606      	mov	r6, r0
 8007e90:	460f      	mov	r7, r1
 8007e92:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e96:	462b      	mov	r3, r5
 8007e98:	f7f8 fb1e 	bl	80004d8 <__aeabi_dmul>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	4639      	mov	r1, r7
 8007ea4:	f7f8 f962 	bl	800016c <__adddf3>
 8007ea8:	2400      	movs	r4, #0
 8007eaa:	4606      	mov	r6, r0
 8007eac:	460f      	mov	r7, r1
 8007eae:	4602      	mov	r2, r0
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	4640      	mov	r0, r8
 8007eb4:	4649      	mov	r1, r9
 8007eb6:	f7f8 f959 	bl	800016c <__adddf3>
 8007eba:	a33b      	add	r3, pc, #236	; (adr r3, 8007fa8 <__ieee754_pow+0x718>)
 8007ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	460d      	mov	r5, r1
 8007ec4:	f7f8 fb08 	bl	80004d8 <__aeabi_dmul>
 8007ec8:	4642      	mov	r2, r8
 8007eca:	464b      	mov	r3, r9
 8007ecc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	4629      	mov	r1, r5
 8007ed4:	f7f8 f948 	bl	8000168 <__aeabi_dsub>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	460b      	mov	r3, r1
 8007edc:	4630      	mov	r0, r6
 8007ede:	4639      	mov	r1, r7
 8007ee0:	f7f8 f942 	bl	8000168 <__aeabi_dsub>
 8007ee4:	a332      	add	r3, pc, #200	; (adr r3, 8007fb0 <__ieee754_pow+0x720>)
 8007ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eea:	f7f8 faf5 	bl	80004d8 <__aeabi_dmul>
 8007eee:	a332      	add	r3, pc, #200	; (adr r3, 8007fb8 <__ieee754_pow+0x728>)
 8007ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef4:	4606      	mov	r6, r0
 8007ef6:	460f      	mov	r7, r1
 8007ef8:	4620      	mov	r0, r4
 8007efa:	4629      	mov	r1, r5
 8007efc:	f7f8 faec 	bl	80004d8 <__aeabi_dmul>
 8007f00:	4602      	mov	r2, r0
 8007f02:	460b      	mov	r3, r1
 8007f04:	4630      	mov	r0, r6
 8007f06:	4639      	mov	r1, r7
 8007f08:	f7f8 f930 	bl	800016c <__adddf3>
 8007f0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f0e:	4b33      	ldr	r3, [pc, #204]	; (8007fdc <__ieee754_pow+0x74c>)
 8007f10:	f04f 0a00 	mov.w	sl, #0
 8007f14:	4413      	add	r3, r2
 8007f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1a:	f7f8 f927 	bl	800016c <__adddf3>
 8007f1e:	4680      	mov	r8, r0
 8007f20:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007f22:	4689      	mov	r9, r1
 8007f24:	f7f8 fa6e 	bl	8000404 <__aeabi_i2d>
 8007f28:	4604      	mov	r4, r0
 8007f2a:	460d      	mov	r5, r1
 8007f2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f2e:	4b2c      	ldr	r3, [pc, #176]	; (8007fe0 <__ieee754_pow+0x750>)
 8007f30:	4413      	add	r3, r2
 8007f32:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007f36:	4642      	mov	r2, r8
 8007f38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f3c:	464b      	mov	r3, r9
 8007f3e:	f7f8 f915 	bl	800016c <__adddf3>
 8007f42:	4632      	mov	r2, r6
 8007f44:	463b      	mov	r3, r7
 8007f46:	f7f8 f911 	bl	800016c <__adddf3>
 8007f4a:	4622      	mov	r2, r4
 8007f4c:	462b      	mov	r3, r5
 8007f4e:	f7f8 f90d 	bl	800016c <__adddf3>
 8007f52:	4622      	mov	r2, r4
 8007f54:	462b      	mov	r3, r5
 8007f56:	4650      	mov	r0, sl
 8007f58:	468b      	mov	fp, r1
 8007f5a:	f7f8 f905 	bl	8000168 <__aeabi_dsub>
 8007f5e:	4632      	mov	r2, r6
 8007f60:	463b      	mov	r3, r7
 8007f62:	f7f8 f901 	bl	8000168 <__aeabi_dsub>
 8007f66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f6a:	f7f8 f8fd 	bl	8000168 <__aeabi_dsub>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	460b      	mov	r3, r1
 8007f72:	4640      	mov	r0, r8
 8007f74:	4649      	mov	r1, r9
 8007f76:	e60d      	b.n	8007b94 <__ieee754_pow+0x304>
 8007f78:	4a454eef 	.word	0x4a454eef
 8007f7c:	3fca7e28 	.word	0x3fca7e28
 8007f80:	93c9db65 	.word	0x93c9db65
 8007f84:	3fcd864a 	.word	0x3fcd864a
 8007f88:	a91d4101 	.word	0xa91d4101
 8007f8c:	3fd17460 	.word	0x3fd17460
 8007f90:	518f264d 	.word	0x518f264d
 8007f94:	3fd55555 	.word	0x3fd55555
 8007f98:	db6fabff 	.word	0xdb6fabff
 8007f9c:	3fdb6db6 	.word	0x3fdb6db6
 8007fa0:	33333303 	.word	0x33333303
 8007fa4:	3fe33333 	.word	0x3fe33333
 8007fa8:	e0000000 	.word	0xe0000000
 8007fac:	3feec709 	.word	0x3feec709
 8007fb0:	dc3a03fd 	.word	0xdc3a03fd
 8007fb4:	3feec709 	.word	0x3feec709
 8007fb8:	145b01f5 	.word	0x145b01f5
 8007fbc:	be3e2fe0 	.word	0xbe3e2fe0
 8007fc0:	7ff00000 	.word	0x7ff00000
 8007fc4:	43400000 	.word	0x43400000
 8007fc8:	0003988e 	.word	0x0003988e
 8007fcc:	000bb679 	.word	0x000bb679
 8007fd0:	080088e0 	.word	0x080088e0
 8007fd4:	3ff00000 	.word	0x3ff00000
 8007fd8:	40080000 	.word	0x40080000
 8007fdc:	08008900 	.word	0x08008900
 8007fe0:	080088f0 	.word	0x080088f0
 8007fe4:	2601      	movs	r6, #1
 8007fe6:	e66a      	b.n	8007cbe <__ieee754_pow+0x42e>
 8007fe8:	a39d      	add	r3, pc, #628	; (adr r3, 8008260 <__ieee754_pow+0x9d0>)
 8007fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fee:	4640      	mov	r0, r8
 8007ff0:	4649      	mov	r1, r9
 8007ff2:	f7f8 f8bb 	bl	800016c <__adddf3>
 8007ff6:	4622      	mov	r2, r4
 8007ff8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ffc:	462b      	mov	r3, r5
 8007ffe:	4650      	mov	r0, sl
 8008000:	4639      	mov	r1, r7
 8008002:	f7f8 f8b1 	bl	8000168 <__aeabi_dsub>
 8008006:	4602      	mov	r2, r0
 8008008:	460b      	mov	r3, r1
 800800a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800800e:	f7f8 fcf3 	bl	80009f8 <__aeabi_dcmpgt>
 8008012:	2800      	cmp	r0, #0
 8008014:	f47f ae09 	bne.w	8007c2a <__ieee754_pow+0x39a>
 8008018:	4aa3      	ldr	r2, [pc, #652]	; (80082a8 <__ieee754_pow+0xa18>)
 800801a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800801e:	4293      	cmp	r3, r2
 8008020:	f340 8101 	ble.w	8008226 <__ieee754_pow+0x996>
 8008024:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008028:	2000      	movs	r0, #0
 800802a:	151b      	asrs	r3, r3, #20
 800802c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008030:	fa4a f303 	asr.w	r3, sl, r3
 8008034:	4433      	add	r3, r6
 8008036:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800803a:	4f9c      	ldr	r7, [pc, #624]	; (80082ac <__ieee754_pow+0xa1c>)
 800803c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008040:	4117      	asrs	r7, r2
 8008042:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008046:	ea23 0107 	bic.w	r1, r3, r7
 800804a:	f1c2 0214 	rsb	r2, r2, #20
 800804e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008052:	460b      	mov	r3, r1
 8008054:	fa4a fa02 	asr.w	sl, sl, r2
 8008058:	2e00      	cmp	r6, #0
 800805a:	4602      	mov	r2, r0
 800805c:	4629      	mov	r1, r5
 800805e:	4620      	mov	r0, r4
 8008060:	bfb8      	it	lt
 8008062:	f1ca 0a00 	rsblt	sl, sl, #0
 8008066:	f7f8 f87f 	bl	8000168 <__aeabi_dsub>
 800806a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800806e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008072:	2400      	movs	r4, #0
 8008074:	4642      	mov	r2, r8
 8008076:	464b      	mov	r3, r9
 8008078:	f7f8 f878 	bl	800016c <__adddf3>
 800807c:	a37a      	add	r3, pc, #488	; (adr r3, 8008268 <__ieee754_pow+0x9d8>)
 800807e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008082:	4620      	mov	r0, r4
 8008084:	460d      	mov	r5, r1
 8008086:	f7f8 fa27 	bl	80004d8 <__aeabi_dmul>
 800808a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800808e:	4606      	mov	r6, r0
 8008090:	460f      	mov	r7, r1
 8008092:	4620      	mov	r0, r4
 8008094:	4629      	mov	r1, r5
 8008096:	f7f8 f867 	bl	8000168 <__aeabi_dsub>
 800809a:	4602      	mov	r2, r0
 800809c:	460b      	mov	r3, r1
 800809e:	4640      	mov	r0, r8
 80080a0:	4649      	mov	r1, r9
 80080a2:	f7f8 f861 	bl	8000168 <__aeabi_dsub>
 80080a6:	a372      	add	r3, pc, #456	; (adr r3, 8008270 <__ieee754_pow+0x9e0>)
 80080a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ac:	f7f8 fa14 	bl	80004d8 <__aeabi_dmul>
 80080b0:	a371      	add	r3, pc, #452	; (adr r3, 8008278 <__ieee754_pow+0x9e8>)
 80080b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b6:	4680      	mov	r8, r0
 80080b8:	4689      	mov	r9, r1
 80080ba:	4620      	mov	r0, r4
 80080bc:	4629      	mov	r1, r5
 80080be:	f7f8 fa0b 	bl	80004d8 <__aeabi_dmul>
 80080c2:	4602      	mov	r2, r0
 80080c4:	460b      	mov	r3, r1
 80080c6:	4640      	mov	r0, r8
 80080c8:	4649      	mov	r1, r9
 80080ca:	f7f8 f84f 	bl	800016c <__adddf3>
 80080ce:	4604      	mov	r4, r0
 80080d0:	460d      	mov	r5, r1
 80080d2:	4602      	mov	r2, r0
 80080d4:	460b      	mov	r3, r1
 80080d6:	4630      	mov	r0, r6
 80080d8:	4639      	mov	r1, r7
 80080da:	f7f8 f847 	bl	800016c <__adddf3>
 80080de:	4632      	mov	r2, r6
 80080e0:	463b      	mov	r3, r7
 80080e2:	4680      	mov	r8, r0
 80080e4:	4689      	mov	r9, r1
 80080e6:	f7f8 f83f 	bl	8000168 <__aeabi_dsub>
 80080ea:	4602      	mov	r2, r0
 80080ec:	460b      	mov	r3, r1
 80080ee:	4620      	mov	r0, r4
 80080f0:	4629      	mov	r1, r5
 80080f2:	f7f8 f839 	bl	8000168 <__aeabi_dsub>
 80080f6:	4642      	mov	r2, r8
 80080f8:	4606      	mov	r6, r0
 80080fa:	460f      	mov	r7, r1
 80080fc:	464b      	mov	r3, r9
 80080fe:	4640      	mov	r0, r8
 8008100:	4649      	mov	r1, r9
 8008102:	f7f8 f9e9 	bl	80004d8 <__aeabi_dmul>
 8008106:	a35e      	add	r3, pc, #376	; (adr r3, 8008280 <__ieee754_pow+0x9f0>)
 8008108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810c:	4604      	mov	r4, r0
 800810e:	460d      	mov	r5, r1
 8008110:	f7f8 f9e2 	bl	80004d8 <__aeabi_dmul>
 8008114:	a35c      	add	r3, pc, #368	; (adr r3, 8008288 <__ieee754_pow+0x9f8>)
 8008116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811a:	f7f8 f825 	bl	8000168 <__aeabi_dsub>
 800811e:	4622      	mov	r2, r4
 8008120:	462b      	mov	r3, r5
 8008122:	f7f8 f9d9 	bl	80004d8 <__aeabi_dmul>
 8008126:	a35a      	add	r3, pc, #360	; (adr r3, 8008290 <__ieee754_pow+0xa00>)
 8008128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812c:	f7f8 f81e 	bl	800016c <__adddf3>
 8008130:	4622      	mov	r2, r4
 8008132:	462b      	mov	r3, r5
 8008134:	f7f8 f9d0 	bl	80004d8 <__aeabi_dmul>
 8008138:	a357      	add	r3, pc, #348	; (adr r3, 8008298 <__ieee754_pow+0xa08>)
 800813a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813e:	f7f8 f813 	bl	8000168 <__aeabi_dsub>
 8008142:	4622      	mov	r2, r4
 8008144:	462b      	mov	r3, r5
 8008146:	f7f8 f9c7 	bl	80004d8 <__aeabi_dmul>
 800814a:	a355      	add	r3, pc, #340	; (adr r3, 80082a0 <__ieee754_pow+0xa10>)
 800814c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008150:	f7f8 f80c 	bl	800016c <__adddf3>
 8008154:	4622      	mov	r2, r4
 8008156:	462b      	mov	r3, r5
 8008158:	f7f8 f9be 	bl	80004d8 <__aeabi_dmul>
 800815c:	4602      	mov	r2, r0
 800815e:	460b      	mov	r3, r1
 8008160:	4640      	mov	r0, r8
 8008162:	4649      	mov	r1, r9
 8008164:	f7f8 f800 	bl	8000168 <__aeabi_dsub>
 8008168:	4604      	mov	r4, r0
 800816a:	460d      	mov	r5, r1
 800816c:	4602      	mov	r2, r0
 800816e:	460b      	mov	r3, r1
 8008170:	4640      	mov	r0, r8
 8008172:	4649      	mov	r1, r9
 8008174:	f7f8 f9b0 	bl	80004d8 <__aeabi_dmul>
 8008178:	2200      	movs	r2, #0
 800817a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800817e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008182:	4620      	mov	r0, r4
 8008184:	4629      	mov	r1, r5
 8008186:	f7f7 ffef 	bl	8000168 <__aeabi_dsub>
 800818a:	4602      	mov	r2, r0
 800818c:	460b      	mov	r3, r1
 800818e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008192:	f7f8 facb 	bl	800072c <__aeabi_ddiv>
 8008196:	4632      	mov	r2, r6
 8008198:	4604      	mov	r4, r0
 800819a:	460d      	mov	r5, r1
 800819c:	463b      	mov	r3, r7
 800819e:	4640      	mov	r0, r8
 80081a0:	4649      	mov	r1, r9
 80081a2:	f7f8 f999 	bl	80004d8 <__aeabi_dmul>
 80081a6:	4632      	mov	r2, r6
 80081a8:	463b      	mov	r3, r7
 80081aa:	f7f7 ffdf 	bl	800016c <__adddf3>
 80081ae:	4602      	mov	r2, r0
 80081b0:	460b      	mov	r3, r1
 80081b2:	4620      	mov	r0, r4
 80081b4:	4629      	mov	r1, r5
 80081b6:	f7f7 ffd7 	bl	8000168 <__aeabi_dsub>
 80081ba:	4642      	mov	r2, r8
 80081bc:	464b      	mov	r3, r9
 80081be:	f7f7 ffd3 	bl	8000168 <__aeabi_dsub>
 80081c2:	4602      	mov	r2, r0
 80081c4:	460b      	mov	r3, r1
 80081c6:	2000      	movs	r0, #0
 80081c8:	4939      	ldr	r1, [pc, #228]	; (80082b0 <__ieee754_pow+0xa20>)
 80081ca:	f7f7 ffcd 	bl	8000168 <__aeabi_dsub>
 80081ce:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80081d2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80081d6:	da29      	bge.n	800822c <__ieee754_pow+0x99c>
 80081d8:	4652      	mov	r2, sl
 80081da:	f000 f955 	bl	8008488 <scalbn>
 80081de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081e2:	f7ff bbfe 	b.w	80079e2 <__ieee754_pow+0x152>
 80081e6:	4b33      	ldr	r3, [pc, #204]	; (80082b4 <__ieee754_pow+0xa24>)
 80081e8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80081ec:	429f      	cmp	r7, r3
 80081ee:	f77f af13 	ble.w	8008018 <__ieee754_pow+0x788>
 80081f2:	4b31      	ldr	r3, [pc, #196]	; (80082b8 <__ieee754_pow+0xa28>)
 80081f4:	440b      	add	r3, r1
 80081f6:	4303      	orrs	r3, r0
 80081f8:	d009      	beq.n	800820e <__ieee754_pow+0x97e>
 80081fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081fe:	2200      	movs	r2, #0
 8008200:	2300      	movs	r3, #0
 8008202:	f7f8 fbdb 	bl	80009bc <__aeabi_dcmplt>
 8008206:	3800      	subs	r0, #0
 8008208:	bf18      	it	ne
 800820a:	2001      	movne	r0, #1
 800820c:	e453      	b.n	8007ab6 <__ieee754_pow+0x226>
 800820e:	4622      	mov	r2, r4
 8008210:	462b      	mov	r3, r5
 8008212:	f7f7 ffa9 	bl	8000168 <__aeabi_dsub>
 8008216:	4642      	mov	r2, r8
 8008218:	464b      	mov	r3, r9
 800821a:	f7f8 fbe3 	bl	80009e4 <__aeabi_dcmpge>
 800821e:	2800      	cmp	r0, #0
 8008220:	f43f aefa 	beq.w	8008018 <__ieee754_pow+0x788>
 8008224:	e7e9      	b.n	80081fa <__ieee754_pow+0x96a>
 8008226:	f04f 0a00 	mov.w	sl, #0
 800822a:	e720      	b.n	800806e <__ieee754_pow+0x7de>
 800822c:	4621      	mov	r1, r4
 800822e:	e7d6      	b.n	80081de <__ieee754_pow+0x94e>
 8008230:	f04f 0b00 	mov.w	fp, #0
 8008234:	f8df c078 	ldr.w	ip, [pc, #120]	; 80082b0 <__ieee754_pow+0xa20>
 8008238:	f7ff bbba 	b.w	80079b0 <__ieee754_pow+0x120>
 800823c:	f04f 0b00 	mov.w	fp, #0
 8008240:	f04f 0c00 	mov.w	ip, #0
 8008244:	f7ff bbb4 	b.w	80079b0 <__ieee754_pow+0x120>
 8008248:	4640      	mov	r0, r8
 800824a:	4649      	mov	r1, r9
 800824c:	f7ff bb3d 	b.w	80078ca <__ieee754_pow+0x3a>
 8008250:	9200      	str	r2, [sp, #0]
 8008252:	f7ff bb89 	b.w	8007968 <__ieee754_pow+0xd8>
 8008256:	2300      	movs	r3, #0
 8008258:	f7ff bb73 	b.w	8007942 <__ieee754_pow+0xb2>
 800825c:	f3af 8000 	nop.w
 8008260:	652b82fe 	.word	0x652b82fe
 8008264:	3c971547 	.word	0x3c971547
 8008268:	00000000 	.word	0x00000000
 800826c:	3fe62e43 	.word	0x3fe62e43
 8008270:	fefa39ef 	.word	0xfefa39ef
 8008274:	3fe62e42 	.word	0x3fe62e42
 8008278:	0ca86c39 	.word	0x0ca86c39
 800827c:	be205c61 	.word	0xbe205c61
 8008280:	72bea4d0 	.word	0x72bea4d0
 8008284:	3e663769 	.word	0x3e663769
 8008288:	c5d26bf1 	.word	0xc5d26bf1
 800828c:	3ebbbd41 	.word	0x3ebbbd41
 8008290:	af25de2c 	.word	0xaf25de2c
 8008294:	3f11566a 	.word	0x3f11566a
 8008298:	16bebd93 	.word	0x16bebd93
 800829c:	3f66c16c 	.word	0x3f66c16c
 80082a0:	5555553e 	.word	0x5555553e
 80082a4:	3fc55555 	.word	0x3fc55555
 80082a8:	3fe00000 	.word	0x3fe00000
 80082ac:	000fffff 	.word	0x000fffff
 80082b0:	3ff00000 	.word	0x3ff00000
 80082b4:	4090cbff 	.word	0x4090cbff
 80082b8:	3f6f3400 	.word	0x3f6f3400

080082bc <__ieee754_sqrt>:
 80082bc:	f8df c158 	ldr.w	ip, [pc, #344]	; 8008418 <__ieee754_sqrt+0x15c>
 80082c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082c4:	ea3c 0c01 	bics.w	ip, ip, r1
 80082c8:	4606      	mov	r6, r0
 80082ca:	460d      	mov	r5, r1
 80082cc:	460c      	mov	r4, r1
 80082ce:	460a      	mov	r2, r1
 80082d0:	4607      	mov	r7, r0
 80082d2:	4603      	mov	r3, r0
 80082d4:	d10f      	bne.n	80082f6 <__ieee754_sqrt+0x3a>
 80082d6:	4602      	mov	r2, r0
 80082d8:	460b      	mov	r3, r1
 80082da:	f7f8 f8fd 	bl	80004d8 <__aeabi_dmul>
 80082de:	4602      	mov	r2, r0
 80082e0:	460b      	mov	r3, r1
 80082e2:	4630      	mov	r0, r6
 80082e4:	4629      	mov	r1, r5
 80082e6:	f7f7 ff41 	bl	800016c <__adddf3>
 80082ea:	4606      	mov	r6, r0
 80082ec:	460d      	mov	r5, r1
 80082ee:	4630      	mov	r0, r6
 80082f0:	4629      	mov	r1, r5
 80082f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082f6:	2900      	cmp	r1, #0
 80082f8:	dc0e      	bgt.n	8008318 <__ieee754_sqrt+0x5c>
 80082fa:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80082fe:	ea5c 0707 	orrs.w	r7, ip, r7
 8008302:	d0f4      	beq.n	80082ee <__ieee754_sqrt+0x32>
 8008304:	b141      	cbz	r1, 8008318 <__ieee754_sqrt+0x5c>
 8008306:	4602      	mov	r2, r0
 8008308:	460b      	mov	r3, r1
 800830a:	f7f7 ff2d 	bl	8000168 <__aeabi_dsub>
 800830e:	4602      	mov	r2, r0
 8008310:	460b      	mov	r3, r1
 8008312:	f7f8 fa0b 	bl	800072c <__aeabi_ddiv>
 8008316:	e7e8      	b.n	80082ea <__ieee754_sqrt+0x2e>
 8008318:	1521      	asrs	r1, r4, #20
 800831a:	d075      	beq.n	8008408 <__ieee754_sqrt+0x14c>
 800831c:	07cc      	lsls	r4, r1, #31
 800831e:	f04f 0400 	mov.w	r4, #0
 8008322:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008326:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800832a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800832e:	bf5e      	ittt	pl
 8008330:	0fd9      	lsrpl	r1, r3, #31
 8008332:	005b      	lslpl	r3, r3, #1
 8008334:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8008338:	0fd9      	lsrs	r1, r3, #31
 800833a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800833e:	2516      	movs	r5, #22
 8008340:	4620      	mov	r0, r4
 8008342:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008346:	107f      	asrs	r7, r7, #1
 8008348:	005b      	lsls	r3, r3, #1
 800834a:	1846      	adds	r6, r0, r1
 800834c:	4296      	cmp	r6, r2
 800834e:	bfde      	ittt	le
 8008350:	1b92      	suble	r2, r2, r6
 8008352:	1870      	addle	r0, r6, r1
 8008354:	1864      	addle	r4, r4, r1
 8008356:	0052      	lsls	r2, r2, #1
 8008358:	3d01      	subs	r5, #1
 800835a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800835e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008362:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008366:	d1f0      	bne.n	800834a <__ieee754_sqrt+0x8e>
 8008368:	4629      	mov	r1, r5
 800836a:	f04f 0e20 	mov.w	lr, #32
 800836e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008372:	4282      	cmp	r2, r0
 8008374:	eb06 0c05 	add.w	ip, r6, r5
 8008378:	dc02      	bgt.n	8008380 <__ieee754_sqrt+0xc4>
 800837a:	d113      	bne.n	80083a4 <__ieee754_sqrt+0xe8>
 800837c:	459c      	cmp	ip, r3
 800837e:	d811      	bhi.n	80083a4 <__ieee754_sqrt+0xe8>
 8008380:	f1bc 0f00 	cmp.w	ip, #0
 8008384:	eb0c 0506 	add.w	r5, ip, r6
 8008388:	da43      	bge.n	8008412 <__ieee754_sqrt+0x156>
 800838a:	2d00      	cmp	r5, #0
 800838c:	db41      	blt.n	8008412 <__ieee754_sqrt+0x156>
 800838e:	f100 0801 	add.w	r8, r0, #1
 8008392:	1a12      	subs	r2, r2, r0
 8008394:	4640      	mov	r0, r8
 8008396:	459c      	cmp	ip, r3
 8008398:	bf88      	it	hi
 800839a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800839e:	eba3 030c 	sub.w	r3, r3, ip
 80083a2:	4431      	add	r1, r6
 80083a4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80083a8:	f1be 0e01 	subs.w	lr, lr, #1
 80083ac:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80083b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80083b4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80083b8:	d1db      	bne.n	8008372 <__ieee754_sqrt+0xb6>
 80083ba:	4313      	orrs	r3, r2
 80083bc:	d006      	beq.n	80083cc <__ieee754_sqrt+0x110>
 80083be:	1c48      	adds	r0, r1, #1
 80083c0:	bf0b      	itete	eq
 80083c2:	4671      	moveq	r1, lr
 80083c4:	3101      	addne	r1, #1
 80083c6:	3401      	addeq	r4, #1
 80083c8:	f021 0101 	bicne.w	r1, r1, #1
 80083cc:	1063      	asrs	r3, r4, #1
 80083ce:	0849      	lsrs	r1, r1, #1
 80083d0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80083d4:	07e2      	lsls	r2, r4, #31
 80083d6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80083da:	bf48      	it	mi
 80083dc:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80083e0:	460e      	mov	r6, r1
 80083e2:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80083e6:	e782      	b.n	80082ee <__ieee754_sqrt+0x32>
 80083e8:	0ada      	lsrs	r2, r3, #11
 80083ea:	3815      	subs	r0, #21
 80083ec:	055b      	lsls	r3, r3, #21
 80083ee:	2a00      	cmp	r2, #0
 80083f0:	d0fa      	beq.n	80083e8 <__ieee754_sqrt+0x12c>
 80083f2:	02d5      	lsls	r5, r2, #11
 80083f4:	d50a      	bpl.n	800840c <__ieee754_sqrt+0x150>
 80083f6:	f1c1 0420 	rsb	r4, r1, #32
 80083fa:	fa23 f404 	lsr.w	r4, r3, r4
 80083fe:	1e4d      	subs	r5, r1, #1
 8008400:	408b      	lsls	r3, r1
 8008402:	4322      	orrs	r2, r4
 8008404:	1b41      	subs	r1, r0, r5
 8008406:	e789      	b.n	800831c <__ieee754_sqrt+0x60>
 8008408:	4608      	mov	r0, r1
 800840a:	e7f0      	b.n	80083ee <__ieee754_sqrt+0x132>
 800840c:	0052      	lsls	r2, r2, #1
 800840e:	3101      	adds	r1, #1
 8008410:	e7ef      	b.n	80083f2 <__ieee754_sqrt+0x136>
 8008412:	4680      	mov	r8, r0
 8008414:	e7bd      	b.n	8008392 <__ieee754_sqrt+0xd6>
 8008416:	bf00      	nop
 8008418:	7ff00000 	.word	0x7ff00000

0800841c <with_errno>:
 800841c:	b570      	push	{r4, r5, r6, lr}
 800841e:	4604      	mov	r4, r0
 8008420:	460d      	mov	r5, r1
 8008422:	4616      	mov	r6, r2
 8008424:	f7fd ff24 	bl	8006270 <__errno>
 8008428:	4629      	mov	r1, r5
 800842a:	6006      	str	r6, [r0, #0]
 800842c:	4620      	mov	r0, r4
 800842e:	bd70      	pop	{r4, r5, r6, pc}

08008430 <xflow>:
 8008430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008432:	4615      	mov	r5, r2
 8008434:	461c      	mov	r4, r3
 8008436:	b180      	cbz	r0, 800845a <xflow+0x2a>
 8008438:	4610      	mov	r0, r2
 800843a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800843e:	e9cd 0100 	strd	r0, r1, [sp]
 8008442:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008446:	4628      	mov	r0, r5
 8008448:	4621      	mov	r1, r4
 800844a:	f7f8 f845 	bl	80004d8 <__aeabi_dmul>
 800844e:	2222      	movs	r2, #34	; 0x22
 8008450:	b003      	add	sp, #12
 8008452:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008456:	f7ff bfe1 	b.w	800841c <with_errno>
 800845a:	4610      	mov	r0, r2
 800845c:	4619      	mov	r1, r3
 800845e:	e7ee      	b.n	800843e <xflow+0xe>

08008460 <__math_uflow>:
 8008460:	2200      	movs	r2, #0
 8008462:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008466:	f7ff bfe3 	b.w	8008430 <xflow>

0800846a <__math_oflow>:
 800846a:	2200      	movs	r2, #0
 800846c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008470:	f7ff bfde 	b.w	8008430 <xflow>

08008474 <fabs>:
 8008474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008478:	4770      	bx	lr

0800847a <finite>:
 800847a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800847e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008482:	0fc0      	lsrs	r0, r0, #31
 8008484:	4770      	bx	lr
	...

08008488 <scalbn>:
 8008488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800848a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800848e:	4604      	mov	r4, r0
 8008490:	460d      	mov	r5, r1
 8008492:	4617      	mov	r7, r2
 8008494:	460b      	mov	r3, r1
 8008496:	b996      	cbnz	r6, 80084be <scalbn+0x36>
 8008498:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800849c:	4303      	orrs	r3, r0
 800849e:	d039      	beq.n	8008514 <scalbn+0x8c>
 80084a0:	4b33      	ldr	r3, [pc, #204]	; (8008570 <scalbn+0xe8>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	f7f8 f818 	bl	80004d8 <__aeabi_dmul>
 80084a8:	4b32      	ldr	r3, [pc, #200]	; (8008574 <scalbn+0xec>)
 80084aa:	4604      	mov	r4, r0
 80084ac:	429f      	cmp	r7, r3
 80084ae:	460d      	mov	r5, r1
 80084b0:	da0f      	bge.n	80084d2 <scalbn+0x4a>
 80084b2:	a32b      	add	r3, pc, #172	; (adr r3, 8008560 <scalbn+0xd8>)
 80084b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b8:	f7f8 f80e 	bl	80004d8 <__aeabi_dmul>
 80084bc:	e006      	b.n	80084cc <scalbn+0x44>
 80084be:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80084c2:	4296      	cmp	r6, r2
 80084c4:	d10a      	bne.n	80084dc <scalbn+0x54>
 80084c6:	4602      	mov	r2, r0
 80084c8:	f7f7 fe50 	bl	800016c <__adddf3>
 80084cc:	4604      	mov	r4, r0
 80084ce:	460d      	mov	r5, r1
 80084d0:	e020      	b.n	8008514 <scalbn+0x8c>
 80084d2:	460b      	mov	r3, r1
 80084d4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80084d8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80084dc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80084e0:	19b9      	adds	r1, r7, r6
 80084e2:	4291      	cmp	r1, r2
 80084e4:	dd0e      	ble.n	8008504 <scalbn+0x7c>
 80084e6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80084ea:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80084ee:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80084f2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80084f6:	4820      	ldr	r0, [pc, #128]	; (8008578 <scalbn+0xf0>)
 80084f8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80084fc:	a31a      	add	r3, pc, #104	; (adr r3, 8008568 <scalbn+0xe0>)
 80084fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008502:	e7d9      	b.n	80084b8 <scalbn+0x30>
 8008504:	2900      	cmp	r1, #0
 8008506:	dd08      	ble.n	800851a <scalbn+0x92>
 8008508:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800850c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008510:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008514:	4620      	mov	r0, r4
 8008516:	4629      	mov	r1, r5
 8008518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800851a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800851e:	da12      	bge.n	8008546 <scalbn+0xbe>
 8008520:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008524:	429f      	cmp	r7, r3
 8008526:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800852a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800852e:	dcdc      	bgt.n	80084ea <scalbn+0x62>
 8008530:	a30b      	add	r3, pc, #44	; (adr r3, 8008560 <scalbn+0xd8>)
 8008532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008536:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800853a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800853e:	480f      	ldr	r0, [pc, #60]	; (800857c <scalbn+0xf4>)
 8008540:	f041 011f 	orr.w	r1, r1, #31
 8008544:	e7b8      	b.n	80084b8 <scalbn+0x30>
 8008546:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800854a:	3136      	adds	r1, #54	; 0x36
 800854c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008550:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008554:	4620      	mov	r0, r4
 8008556:	4629      	mov	r1, r5
 8008558:	2200      	movs	r2, #0
 800855a:	4b09      	ldr	r3, [pc, #36]	; (8008580 <scalbn+0xf8>)
 800855c:	e7ac      	b.n	80084b8 <scalbn+0x30>
 800855e:	bf00      	nop
 8008560:	c2f8f359 	.word	0xc2f8f359
 8008564:	01a56e1f 	.word	0x01a56e1f
 8008568:	8800759c 	.word	0x8800759c
 800856c:	7e37e43c 	.word	0x7e37e43c
 8008570:	43500000 	.word	0x43500000
 8008574:	ffff3cb0 	.word	0xffff3cb0
 8008578:	8800759c 	.word	0x8800759c
 800857c:	c2f8f359 	.word	0xc2f8f359
 8008580:	3c900000 	.word	0x3c900000

08008584 <_gettimeofday>:
 8008584:	2258      	movs	r2, #88	; 0x58
 8008586:	4b02      	ldr	r3, [pc, #8]	; (8008590 <_gettimeofday+0xc>)
 8008588:	f04f 30ff 	mov.w	r0, #4294967295
 800858c:	601a      	str	r2, [r3, #0]
 800858e:	4770      	bx	lr
 8008590:	20001168 	.word	0x20001168

08008594 <_init>:
 8008594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008596:	bf00      	nop
 8008598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800859a:	bc08      	pop	{r3}
 800859c:	469e      	mov	lr, r3
 800859e:	4770      	bx	lr

080085a0 <_fini>:
 80085a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a2:	bf00      	nop
 80085a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085a6:	bc08      	pop	{r3}
 80085a8:	469e      	mov	lr, r3
 80085aa:	4770      	bx	lr
